<!DOCTYPE html>
<html lang="en">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>Mercari EDA - More Info Than You Can Imagine | Kaggle</title>
<meta charset="utf-8">
<meta name="robots" content="index, follow">
<meta name="description" content="Download Open Datasets on 1000s of Projects + Share Projects on One Platform. Explore Popular Topics Like Government, Sports, Medicine, Fintech, Food, More. Flexible Data Ingestion.">
<meta name="turbolinks-cache-control" content="no-cache">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=5.0, minimum-scale=1.0">
<meta name="theme-color" content="#008ABC">
<script type="text/javascript">
        window["initialPageLoadStartTime"] = new Date().getTime();
    </script><link rel="dns-prefetch" href="https://www.google-analytics.com">
<link rel="dns-prefetch" href="https://stats.g.doubleclick.net">
<link rel="dns-prefetch" href="https://js.intercomcdn.com">
<link rel="dns-prefetch" href="https://storage.googleapis.com/">
<link href="/static/images/favicon.ico" rel="shortcut icon" type="image/x-icon">
<link rel="manifest" href="/static/json/manifest.json">
<link href="//fonts.googleapis.com/css?family=Open+Sans:400,300,300italic,400italic,600,600italic,700,700italic" rel="stylesheet" type="text/css">
<link href="https://fonts.googleapis.com/icon?family=Google+Material+Icons" rel="stylesheet" type="text/css">
<link rel="canonical" href="/vrtjso/mercari-eda-more-info-than-you-can-imagine">
<link rel="stylesheet" type="text/css" href="/static/assets/vendor.css?v=9f0d32f8fdcf">
<link rel="stylesheet" type="text/css" href="/static/assets/app.css?v=02175dc594ba">
<script>
        try{(function(a,s,y,n,c,h,i,d,e){d=s.createElement("style");
        d.appendChild(s.createTextNode(""));s.head.appendChild(d);d=d.sheet;
        y=y.map(x => d.insertRule(x + "{ opacity: 0 !important }"));
        h.start=1*new Date;h.end=i=function(){y.forEach(x => x<d.cssRules.length ? d.deleteRule(x) : {})};
        (a[n]=a[n]||[]).hide=h;setTimeout(function(){i();h.end=null},c);h.timeout=c;
        })(window,document,['.site-header-react__nav'],'dataLayer',2000,{'GTM-52LNT9S':true});}catch{}
    </script><script>
        window.dataLayer = window.dataLayer || [];
        function gtag() { dataLayer.push(arguments); }
        gtag('js', new Date());
        gtag('config', 'UA-12629138-1', {
            'optimize_id': 'GTM-52LNT9S',
            'displayFeaturesTask': null,
            'send_page_view': false
        });
    </script><script async src="https://www.googletagmanager.com/gtag/js?id=UA-12629138-1"></script><script>
    !function(f,b,e,v,n,t,s)
    {if(f.fbq)return;n=f.fbq=function(){n.callMethod?
            n.callMethod.apply(n,arguments):n.queue.push(arguments)};
        if(!f._fbq)f._fbq=n;n.push=n;n.loaded=!0;n.version='2.0';
        n.queue=[];t=b.createElement(e);t.async=!0;
        t.src=v;s=b.getElementsByTagName(e)[0];
        s.parentNode.insertBefore(t,s)}(window,document,'script',
        'https://connect.facebook.net/en_US/fbevents.js');
    fbq("set", "autoConfig", "false", "136809193586742");
    fbq('init', '136809193586742'); 
    fbq('track', 'PageView');
</script><noscript>
    <img height="1" width="1" src="https://www.facebook.com/tr?id=136809193586742&amp;ev=PageView&amp;noscript=1">
</noscript>
<script>window.intercomSettings = {"app_id":"koj6gxx6"};</script><script>(function () { var w = window; var ic = w.Intercom; if (typeof ic === "function") { ic('reattach_activator'); ic('update', intercomSettings); } else { var d = document; var i = function () { i.c(arguments) }; i.q = []; i.c = function (args) { i.q.push(args) }; w.Intercom = i; function l() { var s = d.createElement('script'); s.type = 'text/javascript'; s.async = true; s.src = 'https://widget.intercom.io/widget/koj6gxx6'; var x = d.getElementsByTagName('script')[0]; x.parentNode.insertBefore(s, x); } if (w.attachEvent) { w.attachEvent('onload', l); } else { w.addEventListener('load', l, false); } } })()</script><meta name="twitter:card" content="summary">
<meta name="twitter:site" content="@kaggledatasets">
<meta name="og:url" content="https://kaggle.com/vrtjso/mercari-eda-more-info-than-you-can-imagine">
<meta name="og:title" content="Mercari EDA - More Info Than You Can Imagine">
<meta name="og:description" content="Using data from Mercari Price Suggestion Challenge">
<meta name="og:image" content="https://storage.googleapis.com/kaggle-avatars/thumbnails/587388-kg.jpg">
<script type="text/javascript">
    var Kaggle = Kaggle || {};

    Kaggle.Current = {
        antiForgeryToken: 'CfDJ8LdUzqlsSWBPr4Ce3rb9VL8hMKm-HmikSJsoJdcBafwpBXFuBl3h7Q38j5_LjTczU7xc2sRgdpkUkmSJkiXlT5hTuBOxv4JQ1Sc4hIYMq7fRRSTYr2WRlS0Ug-Ytl9EpG6Lx6B6DpB0djgE9XBcWaas',
        isAnonymous: true,
        analyticsToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE1Njc0ODY5NTYsIlVzZXJJZCI6MH0.3aLrGYMKVW8ea91MV0lxl95eEQx11YXHE6HGcZ4fobs',
        analyticsTokenExpiry: 15,
        internetKernelsEnabled: false,
        
        
        
        
        
        
        mdeImageUploader: true,
        
        
        
    }
        Kaggle.Current.log = function(){};
        Kaggle.Current.warn = function(){};

    var decodeUserDisplayName = function () {
        var escapedUserDisplayName = Kaggle.Current.userDisplayNameEscaped || "";
        try {
            var textVersion = new DOMParser().parseFromString(escapedUserDisplayName, "text/html").documentElement.textContent;
            if (textVersion) {
                return textVersion;
            }
        } catch(ex) {}
        return escapedUserDisplayName;
    }
    Kaggle.Current.userDisplayName = decodeUserDisplayName();
</script><script type="text/javascript">
    var Kaggle = Kaggle || {};
    Kaggle.PageMessages = [];
</script><script type="text/javascript">
/* <![CDATA[ */
goog_snippet_vars = function() {
    var w = window;
    w.google_conversion_id = 955616553;
    w.google_conversion_label = "QSjvCKDksHMQqZrWxwM";
    w.google_conversion_value = 0.00;
    w.google_conversion_currency = "USD";
    w.google_remarketing_only = false;
    w.google_conversion_language = "en";
    w.google_conversion_format = "3";
    w.google_conversion_color = "ffffff";
}
// DO NOT CHANGE THE CODE BELOW.
goog_report_conversion = function(url) {
    goog_snippet_vars();
    window.google_conversion_format = "3";
    var opt = new Object();
    opt.onload_callback = function() {
        if (typeof(url) != 'undefined') {
            window.location = url;
        }
    }
    var conv_handler = window['google_trackConversion'];
    if (typeof(conv_handler) == 'function') {
        conv_handler(opt);
    }
}
/* ]]> */
</script><script type="text/javascript" src="//www.googleadservices.com/pagead/conversion_async.js">
</script><script>window['useKaggleAnalytics'] = true;</script><script src="/static/assets/vendor.js?v=c9c668ad871d" data-turbolinks-track="reload"></script><script src="/static/assets/app.js?v=2ababd39cb32" data-turbolinks-track="reload"></script><script>
            (function() {
                if ('serviceWorker' in navigator) {
                    navigator.serviceWorker.register("/static/assets/service-worker.js").then(function(reg) {
                        reg.onupdatefound = function() {
                            var installingWorker = reg.installing;
                            installingWorker.onstatechange = function() {
                                switch (installingWorker.state) {
                                case 'installed':
                                    if (navigator.serviceWorker.controller) {
                                        console.log('New or updated content is available.');
                                    } else {
                                        console.log('Content is now available offline!');
                                    }
                                    break;
                                case 'redundant':
                                    console.error('The installing service worker became redundant.');
                                    break;
                                }
                            };
                        };
                    }).catch(function(e) {
                      console.error('Error during service worker registration:', e);
                    });
                }
            })();
        </script><script>
        function handleClientLoad() {
            try {
                gapi.load('client:auth2');
            } catch (e) {
                // In Opera, readystatechange is an unreliable detection of script load, causing
                // this function to be called before gapi exists on the window. The onload callback
                // is still called at the correct time, so the feature works as expected - it's
                // just generating noisy errors.
            }
        }
    </script><script async defer src="https://apis.google.com/js/api.js" onload="this.googleApiOnLoad=function(){};handleClientLoad()" onreadystatechange="if (this.readyState === 'complete') this.googleApiOnLoad()">
    </script><script defer src="https://cdn.jsdelivr.net/npm/stackdriver-errors-js@0.7.0/dist/stackdriver-errors-concat.min.js"></script><script type="text/javascript">
            window.addEventListener('DOMContentLoaded', function () {
                var errorHandler = new StackdriverErrorReporter();
                errorHandler.start({
                    key: 'AIzaSyDANGXFHtSIVc51MIdGwg4mQFgm3oNrKoo',
                    projectId: 'kaggle-161607',
                    service: 'web-fe',
                    version: '25efc4902bf8cd25c52ae92bf7cb4ec66f0c6eaf',
                    context: { user: '0' }
                });
            });
        </script>
</head>
<body data-turbolinks="true">
    <main><div class="site-layout">
        <div class="site-layout__header">
            <div data-component-name="SiteHeaderContainer" style="display: flex; flex-direction: column; flex: 1 0 auto;"></div>
<script>var Kaggle=window.Kaggle||{};Kaggle.State=Kaggle.State||[];Kaggle.State.push({});performance && performance.mark && performance.mark("SiteHeaderContainer.componentCouldBootstrap");</script>
</div>

    <div class="site-layout__main-content">
        

<div data-component-name="KernelViewer" style="display: flex; flex-direction: column; flex: 1 0 auto;"></div>
<script>var Kaggle=window.Kaggle||{};Kaggle.State=Kaggle.State||[];Kaggle.State.push({"kernel":{"id":446949,"title":"Mercari EDA - More Info Than You Can Imagine","forkParent":null,"currentRunId":1850284,"mostRecentRunId":1850284,"url":"/vrtjso/mercari-eda-more-info-than-you-can-imagine","tags":[{"name":"beginner","slug":"beginner","url":"/tags/beginner"},{"name":"eda","slug":"eda","url":"/tags/eda"},{"name":"data visualization","slug":"data-visualization","url":"/tags/data-visualization"}],"commentCount":0,"upvoteCount":139,"viewCount":10000,"forkCount":102,"bestPublicScore":null,"author":{"id":587388,"displayName":"Lingzhi","email":null,"editedEmail":null,"editedEmailCode":null,"userName":"vrtjso","thumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/587388-kg.jpg","profileUrl":"/vrtjso","registerDate":"0001-01-01T00:00:00Z","lastVisitDate":"0001-01-01T00:00:00Z","statusId":0,"performanceTier":3,"userRoles":null,"userLogins":null,"groupIds":null,"duplicateUsers":null,"hasPhoneVerifications":false,"failedNerdchas":0,"hasPendingNerdcha":false,"deleteRequests":null,"userAttributes":null,"isAdmin":false,"isTvc":false,"isKaggleBot":false,"isAdminOrTvc":false,"isAnonymous":false,"canAct":false,"canBeSeen":false,"thumbnailName":null,"activationCode":"00000000-0000-0000-0000-000000000000","isPhoneVerified":false},"isPrivate":false,"updatedTime":"2017-12-02T08:19:07.9666667Z","selfLink":"/kernels/446949","pinnedDockerImageVersionId":null,"isLanguageTemplate":false,"medal":"gold","topicId":44074,"readGroupId":null,"writeGroupId":null,"slug":"mercari-eda-more-info-than-you-can-imagine"},"kernelBlob":{"id":7016348,"settings":{"dockerImageVersionId":null,"dataSources":[{"sourceType":"Competition","sourceId":7559,"databundleVersionId":null,"mountSlug":null}],"sourceType":"notebook","language":"r","isGpuEnabled":false,"isInternetEnabled":false},"source":"{\u0022nbformat_minor\u0022: 1, \u0022cells\u0022: [{\u0022source\u0022: [\u0022# Introduction\u0022], \u0022cell_type\u0022: \u0022markdown\u0022, \u0022metadata\u0022: {\u0022_cell_guid\u0022: \u0022e83790e9-af84-4eae-a3bf-a156158c870f\u0022, \u0022_uuid\u0022: \u00225be176176440099b5ef1cff33dd94a687c2aaf49\u0022}}, {\u0022source\u0022: [\u0022This kernel provides a very first step data exploration of the data with R.\\n\u0022, \u0022\\n\u0022, \u0022The aim of this problem is to predict the price of items on online markets, given the item names, descriptions as well as other features. This is a mix of traditional machine learning problem and NLP problem.\\n\u0022, \u0022\\n\u0022, \u0022I will be very appreciative if you find this kernel useful and give me an upvote. I will keep updating this kernel and please comment if you have any advice. \u0022], \u0022cell_type\u0022: \u0022markdown\u0022, \u0022metadata\u0022: {\u0022_cell_guid\u0022: \u002252412630-6229-48be-856e-a42a7d417fb3\u0022, \u0022_uuid\u0022: \u0022751b151617111e190a34e92f40d91ab854e9b482\u0022}}, {\u0022source\u0022: [\u0022# Loading Packages and Files\u0022], \u0022cell_type\u0022: \u0022markdown\u0022, \u0022metadata\u0022: {\u0022_cell_guid\u0022: \u0022186ebfc5-4fdf-44d1-adc6-28bdc3fcef05\u0022, \u0022_uuid\u0022: \u0022b6d7c07b4d4b259d5e7d22d5b04d6dcee1cf85d5\u0022}}, {\u0022execution_count\u0022: null, \u0022source\u0022: [\u0022library(data.table) # Loading data\\n\u0022, \u0022library(ggplot2) # Data visualization\\n\u0022, \u0022library(treemapify) # Treemap visualization\\n\u0022, \u0022library(gridExtra) # Create multiplot\\n\u0022, \u0022library(dplyr) # data manipulation\\n\u0022, \u0022library(tidyr) # data manipulation\\n\u0022, \u0022library(tibble) # data wrangling\\n\u0022, \u0022library(stringr) # String processing\\n\u0022, \u0022library(repr)\\n\u0022, \u0022library(stringi) # String processing\u0022], \u0022cell_type\u0022: \u0022code\u0022, \u0022metadata\u0022: {\u0022collapsed\u0022: false, \u0022_cell_guid\u0022: \u002270819a4b-5c28-4ff2-9aad-916be9416441\u0022, \u0022_kg_hide-output\u0022: true, \u0022_uuid\u0022: \u0022f80ccd3a4158a1b229fc0b87b7372e518405f885\u0022}, \u0022outputs\u0022: []}, {\u0022execution_count\u0022: null, \u0022source\u0022: [\u0022train = fread(\u0027../input/train.tsv\u0027, sep=\u0027\\\\t\u0027)\\n\u0022, \u0022test = fread(\u0027../input/test.tsv\u0027, sep=\u0027\\\\t\u0027)\u0022], \u0022cell_type\u0022: \u0022code\u0022, \u0022metadata\u0022: {\u0022collapsed\u0022: false, \u0022_cell_guid\u0022: \u00220416feb6-85ef-41df-82eb-8b0dd99d09e9\u0022, \u0022_kg_hide-output\u0022: true, \u0022_uuid\u0022: \u0022423a9e171688c83675d00ee0749a3f1d956a9948\u0022}, \u0022outputs\u0022: []}, {\u0022source\u0022: [\u0022# Overview\u0022], \u0022cell_type\u0022: \u0022markdown\u0022, \u0022metadata\u0022: {\u0022_cell_guid\u0022: \u0022384665dc-82bc-4315-a214-792655755949\u0022, \u0022_uuid\u0022: \u0022e754f2d422118ebc96b2328b47df0fd2042814b1\u0022}}, {\u0022source\u0022: [\u0022The training data has 1482535 observations with 7 features. The test data has 693359 rows that we need to predict. According to the competition description, the public leaderboard will be evaluated by  ALL of the test data we have at the first stage.\\n\u0022, \u0022\\n\u0022, \u0022The evaluation metrics is RMSLE, which gives more penalty on under-estimating prices rather than over-estimating. Due to the nature of RMSLE we take log of the price in our analysis.\u0022], \u0022cell_type\u0022: \u0022markdown\u0022, \u0022metadata\u0022: {\u0022_cell_guid\u0022: \u00225a12837b-648b-4ac3-881f-e5b09183c865\u0022, \u0022_uuid\u0022: \u0022462c6f026d17fd1cb97255416942fb0d33420f83\u0022}}, {\u0022execution_count\u0022: null, \u0022source\u0022: [\u0022head(train, 3)\u0022], \u0022cell_type\u0022: \u0022code\u0022, \u0022metadata\u0022: {\u0022collapsed\u0022: false, \u0022_cell_guid\u0022: \u002274bf58ef-f4f6-4ae6-ac82-901c9512af1d\u0022, \u0022_uuid\u0022: \u002273c5794f9dccad23e875319dcf6e630c52ee1470\u0022}, \u0022outputs\u0022: []}, {\u0022execution_count\u0022: null, \u0022source\u0022: [\u0022summary(train)\u0022], \u0022cell_type\u0022: \u0022code\u0022, \u0022metadata\u0022: {\u0022collapsed\u0022: false, \u0022_cell_guid\u0022: \u00229eaeee7b-2833-46bd-86c2-e4e552248671\u0022, \u0022_kg_hide-output\u0022: false, \u0022_uuid\u0022: \u00223dec8839a2fbc1c027614d3d9bc2898ecc970ed9\u0022}, \u0022outputs\u0022: []}, {\u0022execution_count\u0022: null, \u0022source\u0022: [\u0022summary(test)\u0022], \u0022cell_type\u0022: \u0022code\u0022, \u0022metadata\u0022: {\u0022collapsed\u0022: false, \u0022_cell_guid\u0022: \u0022683dde77-0b40-4f16-a139-65b465d8df06\u0022, \u0022_kg_hide-output\u0022: true, \u0022_uuid\u0022: \u0022b48f190d2f0b6aca5221ffe1231e1701389baf3a\u0022}, \u0022outputs\u0022: []}, {\u0022source\u0022: [\u0022We can have a a rough look at the features (test data summary is hidden for simplicity)\\n\u0022, \u00221. **train_id / test_id**: A unique key for each item.\\n\u0022, \u00222. **name**: The item\u0027s name as a string.\\n\u0022, \u00223. **item_condition_id**: A factor with 5 levels. As the plot below shows, the mean prices for different conditions are really close and it\u0027s hard to guess which whether higher / lower condition id is better so far.\\n\u0022, \u00224. **category_name**: The category of the item.\\n\u0022, \u00225. **brand_name**: The brand name of the item. Nearly half of the items do not have a brand.\\n\u0022, \u00226. **shipping**: A binary indicator of the shipping information. (1 if shipping fee is paid by seller and 0 by buyer)\\n\u0022, \u00227. **item_description**: A long string containing the raw text of the item description. ~5% of the items do not have a description.\u0022], \u0022cell_type\u0022: \u0022markdown\u0022, \u0022metadata\u0022: {\u0022_cell_guid\u0022: \u0022b0a84a80-56e4-4d95-8898-6f1cd4bfeff6\u0022, \u0022_uuid\u0022: \u0022f4669f5814f9f634b4565e6e4fea1236bdb09cec\u0022}}, {\u0022source\u0022: [\u0022# Feature Visualizations\u0022], \u0022cell_type\u0022: \u0022markdown\u0022, \u0022metadata\u0022: {\u0022_cell_guid\u0022: \u0022d29d3b30-9572-477b-9364-54db1500fb27\u0022, \u0022_uuid\u0022: \u00229ac51d52cff0b0cb7cc2fbca256e28e4fa82c4e6\u0022}}, {\u0022source\u0022: [\u0022## Prices and Indicators\u0022], \u0022cell_type\u0022: \u0022markdown\u0022, \u0022metadata\u0022: {\u0022_cell_guid\u0022: \u00227c7a42f6-c464-4b31-a025-755ffa683895\u0022, \u0022_uuid\u0022: \u0022be1029e95423cc771b203f2d716a645d963297f9\u0022}}, {\u0022source\u0022: [\u0022As the figures below show, the distribution of log price is more normally-distributed than the orginal scale of price.\u0022], \u0022cell_type\u0022: \u0022markdown\u0022, \u0022metadata\u0022: {\u0022_cell_guid\u0022: \u0022aad8da15-93ce-4fff-a76e-9e5a9213293f\u0022, \u0022_uuid\u0022: \u0022d41ec0860e6e384a5c364c2259749883d951f842\u0022}}, {\u0022execution_count\u0022: null, \u0022source\u0022: [\u0022train = train %\u003e% mutate(log_price = log(price+1)) # take log of the price\\n\u0022, \u0022train = train %\u003e% mutate(item_condition_id = factor(item_condition_id))\\n\u0022, \u0022train = train %\u003e% mutate(shipping = factor(shipping))\u0022], \u0022cell_type\u0022: \u0022code\u0022, \u0022metadata\u0022: {\u0022_kg_hide-input\u0022: false, \u0022collapsed\u0022: true, \u0022_cell_guid\u0022: \u0022d1463209-8f69-4a1a-8fbb-fe4a1f2028cf\u0022, \u0022_uuid\u0022: \u002247f3e202522ef6283d3f26d60e93fe8383e43c79\u0022}, \u0022outputs\u0022: []}, {\u0022execution_count\u0022: null, \u0022source\u0022: [\u0022options(repr.plot.width=7, repr.plot.height=7)\\n\u0022, \u0022\\n\u0022, \u0022p1 = train %\u003e% ggplot(aes(x=log_price)) +\\n\u0022, \u0022geom_histogram(bins=30) +\\n\u0022, \u0022ggtitle(\u0027Distributon of Log1p Price\u0027)\\n\u0022, \u0022\\n\u0022, \u0022p2 = train %\u003e% ggplot(aes(x=price)) +\\n\u0022, \u0022geom_histogram(bins=30) +\\n\u0022, \u0022xlim(0,300) +\\n\u0022, \u0022ggtitle(\u0027Distributon of Price\u0027)\\n\u0022, \u0022\\n\u0022, \u0022p3 = train %\u003e% ggplot(aes(x=item_condition_id)) +\\n\u0022, \u0022geom_bar() +\\n\u0022, \u0022ggtitle(\u0027Distribution of Item Conditions\u0027) +\\n\u0022, \u0022theme(legend.position=\\\u0022none\\\u0022)\\n\u0022, \u0022\\n\u0022, \u0022p4 = train %\u003e% ggplot(aes(x=shipping)) +\\n\u0022, \u0022geom_bar(width=0.5) +\\n\u0022, \u0022ggtitle(\u0027Distribution of Shipping Info\u0027) +\\n\u0022, \u0022theme(legend.position=\\\u0022none\\\u0022)\\n\u0022, \u0022\\n\u0022, \u0022suppressWarnings(grid.arrange(p1, p2, p3, p4, ncol=2))\u0022], \u0022cell_type\u0022: \u0022code\u0022, \u0022metadata\u0022: {\u0022_kg_hide-input\u0022: true, \u0022collapsed\u0022: false, \u0022_cell_guid\u0022: \u0022671f1bed-c4cf-48fe-aab9-a46bee3fc3d7\u0022, \u0022_kg_hide-output\u0022: false, \u0022_uuid\u0022: \u0022724e824b087d8562e9244bfcaf03c30a5cc30c34\u0022}, \u0022outputs\u0022: []}, {\u0022source\u0022: [\u0022## Categories and Brands\u0022], \u0022cell_type\u0022: \u0022markdown\u0022, \u0022metadata\u0022: {\u0022_cell_guid\u0022: \u002256c318a9-5617-4270-b71a-b0a63491771e\u0022, \u0022_uuid\u0022: \u0022aa9ac3a2ef5ca2485b8b9f426d0d154f071d001f\u0022}}, {\u0022source\u0022: [\u0022We notice that the category_name is actually encoded as three or four hierarchical levels splitted by /. (Thanks to [Abhinav Reddy Kaitha](https://www.kaggle.com/abhinavkaitha) there are some items with four levels instead of three)\\n\u0022, \u0022\\n\u0022, \u0022We can split the category names and store them into 4 columns. The major category (1st category) only has 11 levels and we can make distinguishable visualizations on them. From the 2nd level on the # of levels are too many to visualize.\\n\u0022, \u0022\\n\u0022, \u0022Most items only have three levels of categories. But the 4th level exists with 8 unique sub-categories and 4389 items. For modeling perspective it may be fine to combine it with 3rd levels but for analysis purpose I extract and keep the 4th level here.\u0022], \u0022cell_type\u0022: \u0022markdown\u0022, \u0022metadata\u0022: {\u0022_cell_guid\u0022: \u002227076269-77bc-4f77-b3d0-4ee2b71ec73d\u0022, \u0022_uuid\u0022: \u0022b6b9918155c88040a51e6a0230972e323d0d6fd5\u0022}}, {\u0022execution_count\u0022: null, \u0022source\u0022: [\u0022train = data.frame(train, str_split_fixed(train$category_name, \u0027/\u0027, 4)) %\u003e%\\n\u0022, \u0022mutate(cat1=X1, cat2=X2, cat3=X3, cat4=X4) %\u003e% select(-X1, -X2, -X3, -X4)\\n\u0022, \u0022\\n\u0022, \u0022train %\u003e% summarise(Num_Cat1 = length(unique(cat1)), Num_Cat2 = length(unique(cat2)),\\n\u0022, \u0022Num_Cat3 = length(unique(cat3)), Num_Cat4 = length(unique(cat4)))\u0022], \u0022cell_type\u0022: \u0022code\u0022, \u0022metadata\u0022: {\u0022_kg_hide-input\u0022: false, \u0022collapsed\u0022: false, \u0022_cell_guid\u0022: \u0022e3ad6a17-9324-48ec-8432-00b1d76c7f27\u0022, \u0022_uuid\u0022: \u0022d76456c65aeadabc56fed90e9643b39ae1c32996\u0022}, \u0022outputs\u0022: []}, {\u0022execution_count\u0022: null, \u0022source\u0022: [\u0022train %\u003e% filter(cat4 != \u0027\u0027) %\u003e% nrow\u0022], \u0022cell_type\u0022: \u0022code\u0022, \u0022metadata\u0022: {\u0022_kg_hide-input\u0022: false, \u0022collapsed\u0022: false, \u0022_cell_guid\u0022: \u0022e3ad6a17-9324-48ec-8432-00b1d76c7f27\u0022, \u0022scrolled\u0022: true, \u0022_uuid\u0022: \u0022d76456c65aeadabc56fed90e9643b39ae1c32996\u0022}, \u0022outputs\u0022: []}, {\u0022execution_count\u0022: null, \u0022source\u0022: [\u0022options(repr.plot.width=7, repr.plot.height=7)\\n\u0022, \u0022\\n\u0022, \u0022train %\u003e%\\n\u0022, \u0022group_by(cat1, cat2) %\u003e%\\n\u0022, \u0022count() %\u003e%\\n\u0022, \u0022ungroup() %\u003e%\\n\u0022, \u0022ggplot(aes(area=n, fill=cat1, label=cat2, subgroup=cat1)) +\\n\u0022, \u0022geom_treemap() +\\n\u0022, \u0022geom_treemap_subgroup_text(grow = T, alpha = 0.5, colour =\\n\u0022, \u0022                           \\\u0022black\\\u0022, fontface = \\\u0022italic\\\u0022, min.size = 0) +\\n\u0022, \u0022geom_treemap_text(colour = \\\u0022white\\\u0022, place = \\\u0022topleft\\\u0022, reflow = T) +\\n\u0022, \u0022theme(legend.position = \\\u0022null\\\u0022) +\\n\u0022, \u0022ggtitle(\\\u00221st and 2nd Hierarchical Category Levels\\\u0022)\u0022], \u0022cell_type\u0022: \u0022code\u0022, \u0022metadata\u0022: {\u0022_kg_hide-input\u0022: true, \u0022collapsed\u0022: false, \u0022_cell_guid\u0022: \u0022e3ad6a17-9324-48ec-8432-00b1d76c7f27\u0022, \u0022_uuid\u0022: \u0022d76456c65aeadabc56fed90e9643b39ae1c32996\u0022}, \u0022outputs\u0022: []}, {\u0022execution_count\u0022: null, \u0022source\u0022: [\u0022options(repr.plot.width=7, repr.plot.height=7)\\n\u0022, \u0022\\n\u0022, \u0022p1 = train %\u003e% count(cat1) %\u003e% \\n\u0022, \u0022ggplot(aes(x=reorder(cat1, -n), y=n)) +\\n\u0022, \u0022geom_bar(stat=\u0027identity\u0027, width=0.7) +\\n\u0022, \u0022ggtitle(\u00271st Level Categories\u0027) +\\n\u0022, \u0022xlab(\u00271st Level Catogory\u0027) +\\n\u0022, \u0022ylab(\u0027count\u0027) +\\n\u0022, \u0022theme(axis.text.x=element_text(angle=15, hjust=1))\\n\u0022, \u0022\\n\u0022, \u0022p2 = train %\u003e% count(cat2) %\u003e% \\n\u0022, \u0022filter(n\u003e20000) %\u003e% \\n\u0022, \u0022ggplot(aes(x=reorder(cat2,-n), y=n)) +\\n\u0022, \u0022geom_bar(stat=\u0027identity\u0027, width=0.7) +\\n\u0022, \u0022ggtitle(\u00272nd Level Categories (\u003e20000 only)\u0027) +\\n\u0022, \u0022xlab(\u00272nd Level Catogory\u0027) +\\n\u0022, \u0022ylab(\u0027count\u0027) +\\n\u0022, \u0022theme(axis.text.x=element_text(angle=15, hjust=1, size=7))\\n\u0022, \u0022\\n\u0022, \u0022grid.arrange(p1, p2, ncol=1)\u0022], \u0022cell_type\u0022: \u0022code\u0022, \u0022metadata\u0022: {\u0022_kg_hide-input\u0022: true, \u0022collapsed\u0022: false, \u0022_cell_guid\u0022: \u0022c03e33c8-d431-4f81-9fd5-4d57cc33e53d\u0022, \u0022_uuid\u0022: \u0022aa16335bb79ab5bead6a45688491c6ecfe4bf6e4\u0022}, \u0022outputs\u0022: []}, {\u0022source\u0022: [\u0022For visualizing I only subset the 2nd categories with 20000+ items.\\n\u0022, \u0022\\n\u0022, \u0022It appears that the major 1st level category in this online shopping market is Women. So let\u0027s take a step into it and look at the 2nd category under women. It appears most items are clothings and accessories.\u0022], \u0022cell_type\u0022: \u0022markdown\u0022, \u0022metadata\u0022: {\u0022_cell_guid\u0022: \u00228d2cf745-4da9-407d-9c2a-53c062a8c608\u0022, \u0022_uuid\u0022: \u0022effccc02e32a6be427c7d42b57fd487f2f8bd69f\u0022}}, {\u0022execution_count\u0022: null, \u0022source\u0022: [\u0022options(repr.plot.width=7, repr.plot.height=7)\\n\u0022, \u0022\\n\u0022, \u0022train %\u003e% filter(cat1==\u0027Women\u0027) %\u003e% \\n\u0022, \u0022group_by(cat2, cat3) %\u003e%\\n\u0022, \u0022count() %\u003e%\\n\u0022, \u0022ungroup() %\u003e%\\n\u0022, \u0022ggplot(aes(area=n, fill=cat2, label=cat3, subgroup=cat2)) +\\n\u0022, \u0022geom_treemap() +\\n\u0022, \u0022geom_treemap_subgroup_text(grow = T, alpha = 0.5, colour =\\n\u0022, \u0022                           \\\u0022black\\\u0022, fontface = \\\u0022italic\\\u0022, min.size = 0) +\\n\u0022, \u0022geom_treemap_text(colour = \\\u0022white\\\u0022, place = \\\u0022topleft\\\u0022, reflow = T) +\\n\u0022, \u0022theme(legend.position = \\\u0022null\\\u0022) +\\n\u0022, \u0022ggtitle(\\\u00222nd and 3rd Hierarchical Category Levels Under Woman\\\u0022)\u0022], \u0022cell_type\u0022: \u0022code\u0022, \u0022metadata\u0022: {\u0022_kg_hide-input\u0022: true, \u0022collapsed\u0022: false, \u0022_cell_guid\u0022: \u0022ff68baa4-0b54-4118-b0e6-a18c33b0c0a9\u0022, \u0022_uuid\u0022: \u0022c751e8026fac69f4effc4b3d9dfb48ef396da833\u0022}, \u0022outputs\u0022: []}, {\u0022execution_count\u0022: null, \u0022source\u0022: [\u0022options(repr.plot.width=7, repr.plot.height=3.5)\\n\u0022, \u0022\\n\u0022, \u0022train %\u003e% filter(cat1==\u0027Women\u0027) %\u003e%\\n\u0022, \u0022count(cat2) %\u003e% \\n\u0022, \u0022ggplot(aes(x=reorder(cat2, -n), y=n)) +\\n\u0022, \u0022geom_bar(stat=\u0027identity\u0027, width=0.7) +\\n\u0022, \u0022ggtitle(\u00272nd Level Categories Under Women\u0027) +\\n\u0022, \u0022xlab(\u00272nd Level Catogory Under Women\u0027) +\\n\u0022, \u0022ylab(\u0027count\u0027) +\\n\u0022, \u0022theme(axis.text.x=element_text(angle=30, hjust=1, size=8))\u0022], \u0022cell_type\u0022: \u0022code\u0022, \u0022metadata\u0022: {\u0022_kg_hide-input\u0022: true, \u0022collapsed\u0022: false, \u0022_cell_guid\u0022: \u0022d39b6dd4-3471-46b1-b8c0-e1fe01564449\u0022, \u0022_uuid\u0022: \u0022a6b6c8b45dea8fa8a82504121fc09be746722345\u0022}, \u0022outputs\u0022: []}, {\u0022source\u0022: [\u0022Nearly half of the items don\u0027t have brands. The proportions of items that have brands vary in different categories. For example, Nearly all handmade items don\u0027t have brand names, of course.\\n\u0022, \u0022\\n\u0022, \u0022For brands, they are not in a hierarchical order and there are too many to be fitted in one graph. So I plotted the count of top 10 most frequent brands for a rough look. Each brand contains items from 1 or more major categories. Not surprisingly, the top brands are dominated by women items except Apple and Nintendo.\u0022], \u0022cell_type\u0022: \u0022markdown\u0022, \u0022metadata\u0022: {\u0022_cell_guid\u0022: \u0022530eb693-633b-4e8d-98d9-cfc05d4e9578\u0022, \u0022_uuid\u0022: \u002239e01eaf6ee5ef2642e84fc137ebbb3e1d908d46\u0022}}, {\u0022execution_count\u0022: null, \u0022source\u0022: [\u0022options(repr.plot.width=7, repr.plot.height=3.5)\\n\u0022, \u0022\\n\u0022, \u0022train = train %\u003e% mutate(has_brand=(brand_name!=\u0027\u0027))\\n\u0022, \u0022train %\u003e%\\n\u0022, \u0022ggplot(aes(x=cat1, fill=has_brand)) +\\n\u0022, \u0022geom_bar(position=\u0027fill\u0027) +\\n\u0022, \u0022theme(axis.text.x=element_text(angle=15, hjust=1, size=8)) +\\n\u0022, \u0022xlab(\u00271st Categories\u0027) +\\n\u0022, \u0022ylab(\u0027Proportion\u0027) +\\n\u0022, \u0022ggtitle(\u0027Items With and Without Brands\u0027)\u0022], \u0022cell_type\u0022: \u0022code\u0022, \u0022metadata\u0022: {\u0022_kg_hide-input\u0022: true, \u0022collapsed\u0022: false, \u0022_cell_guid\u0022: \u0022cd7e9348-53ec-49c1-bf88-b3aa18b9327a\u0022, \u0022_uuid\u0022: \u00229a710c2d2a8eacea185e6e21fb33a87197863071\u0022}, \u0022outputs\u0022: []}, {\u0022execution_count\u0022: null, \u0022source\u0022: [\u0022options(repr.plot.width=7, repr.plot.height=3.5)\\n\u0022, \u0022\\n\u0022, \u0022top10 = train %\u003e% filter(brand_name!=\u0027\u0027) %\u003e% \\n\u0022, \u0022count(brand_name) %\u003e%\\n\u0022, \u0022arrange(desc(n)) %\u003e%\\n\u0022, \u0022head(10)\\n\u0022, \u0022\\n\u0022, \u0022train %\u003e% filter(brand_name %in% top10$brand_name) %\u003e%\\n\u0022, \u0022ggplot(aes(x=factor(brand_name, levels=rev(top10$brand_name)), fill=cat1)) +\\n\u0022, \u0022geom_bar(width=0.5) +\\n\u0022, \u0022coord_flip() +\\n\u0022, \u0022xlab(\u0027brand\u0027) +\\n\u0022, \u0022labs(fill=\u00271st Category\u0027) +\\n\u0022, \u0022ggtitle(\u0027Top 10 Brands and Their Categories\u0027)\u0022], \u0022cell_type\u0022: \u0022code\u0022, \u0022metadata\u0022: {\u0022_kg_hide-input\u0022: true, \u0022collapsed\u0022: false, \u0022_cell_guid\u0022: \u002268ec9a30-755d-453a-a581-fdc4ec47ea9c\u0022, \u0022_uuid\u0022: \u002262796dc28f9b5b149b389530c760918d93aea7c9\u0022}, \u0022outputs\u0022: []}, {\u0022source\u0022: [\u0022## Item Descriptions\u0022], \u0022cell_type\u0022: \u0022markdown\u0022, \u0022metadata\u0022: {\u0022_cell_guid\u0022: \u002273e23a74-17fc-4837-b8f3-db1343b50536\u0022, \u0022_uuid\u0022: \u0022aad254015fc2574e7e4a481bb73de22d6366a7ac\u0022}}, {\u0022source\u0022: [\u0022For the item description, I extract two most simple features of the text: the length of the text and the number of words of the text. It shows that both of them have a exponential distribution with a long tail.\u0022], \u0022cell_type\u0022: \u0022markdown\u0022, \u0022metadata\u0022: {\u0022_cell_guid\u0022: \u002267a27aaa-7488-4eab-b982-2406ab8dbb00\u0022, \u0022_uuid\u0022: \u0022c6c9cb18df2b04c60c1a97e03780227471d93cb0\u0022}}, {\u0022execution_count\u0022: null, \u0022source\u0022: [\u0022options(repr.plot.width=7, repr.plot.height=3.5)\\n\u0022, \u0022\\n\u0022, \u0022p1 = train %\u003e% mutate(len_of_des = str_length(item_description)) %\u003e%\\n\u0022, \u0022ggplot(aes(x=len_of_des)) +\\n\u0022, \u0022geom_histogram(bins=50) +\\n\u0022, \u0022ggtitle(\u0027Distribution of Length of Descriptions\u0027) +\\n\u0022, \u0022xlab(\u0027Length of Item Description\u0027) +\\n\u0022, \u0022theme(plot.title = element_text(size=10))\\n\u0022, \u0022\\n\u0022, \u0022p2 = train %\u003e% mutate(num_token_des = str_count(item_description, \u0027\\\\\\\\S+\u0027)) %\u003e% \\n\u0022, \u0022ggplot(aes(x=num_token_des)) +\\n\u0022, \u0022geom_histogram(bins=50) +\\n\u0022, \u0022ggtitle(\u0027Distribution of # of Tokens of Descriptions\u0027) +\\n\u0022, \u0022xlab(\u0027Number of Tokens\u0027) +\\n\u0022, \u0022theme(plot.title = element_text(size=10))\\n\u0022, \u0022\\n\u0022, \u0022grid.arrange(p1, p2, ncol=2)\u0022], \u0022cell_type\u0022: \u0022code\u0022, \u0022metadata\u0022: {\u0022_kg_hide-input\u0022: true, \u0022collapsed\u0022: false, \u0022_cell_guid\u0022: \u0022d58a42d8-179f-4985-993c-e66a32063b04\u0022, \u0022_uuid\u0022: \u002284ad2a9a20776bf83ce21cfcb274fc4aa3c72934\u0022}, \u0022outputs\u0022: []}, {\u0022source\u0022: [\u0022## Names\u0022], \u0022cell_type\u0022: \u0022markdown\u0022, \u0022metadata\u0022: {\u0022_cell_guid\u0022: \u002282ccedbe-7c63-4cb3-8900-179d1920d335\u0022, \u0022_uuid\u0022: \u0022d4d231732e467163942590ffde640bbc7bd34fa7\u0022}}, {\u0022source\u0022: [\u0022Name is a very important feature \\u2014\\u2014 it directly tell us what the items are. But it\u0027s hard to be categorized or one-hot encoded because there are 1225273 uniqle names for all the items. We should find some ways to extract the information from the item name.\u0022], \u0022cell_type\u0022: \u0022markdown\u0022, \u0022metadata\u0022: {\u0022_cell_guid\u0022: \u0022d55cfe7d-acd0-4d94-a446-5e216ad1701f\u0022, \u0022_uuid\u0022: \u0022d2af15ab0139056f72212e43a83f2c4c022397c5\u0022}}, {\u0022execution_count\u0022: null, \u0022source\u0022: [\u0022length(unique(train$name))\u0022], \u0022cell_type\u0022: \u0022code\u0022, \u0022metadata\u0022: {\u0022collapsed\u0022: false, \u0022_cell_guid\u0022: \u0022de79f358-bad0-4f51-a06a-da1c249ddaef\u0022, \u0022_uuid\u0022: \u0022983de409264f809b944c56f20b9e1af488b3a3db\u0022}, \u0022outputs\u0022: []}, {\u0022execution_count\u0022: null, \u0022source\u0022: [\u0022options(repr.plot.width=7, repr.plot.height=3.5)\\n\u0022, \u0022\\n\u0022, \u0022train = train %\u003e% mutate(num_token_name = str_count(name, \u0027\\\\\\\\S+\u0027))\\n\u0022, \u0022train %\u003e%\\n\u0022, \u0022ggplot(aes(x=num_token_name)) +\\n\u0022, \u0022geom_bar(width=0.7) +\\n\u0022, \u0022ggtitle(\u0027Distribution of # of Tokens of Names\u0027) +\\n\u0022, \u0022xlab(\u0027Number of Words\u0027)\u0022], \u0022cell_type\u0022: \u0022code\u0022, \u0022metadata\u0022: {\u0022_kg_hide-input\u0022: true, \u0022collapsed\u0022: false, \u0022_cell_guid\u0022: \u00222d1b8def-75fc-4422-ae13-f59d02697311\u0022, \u0022_uuid\u0022: \u002206c9d3960e7f183a965e7ee4fd0e93be9ffdd5b4\u0022}, \u0022outputs\u0022: []}, {\u0022source\u0022: [\u0022A very intuitive question would be: does the item name include its category and brand information? We know that the 3-level categories has been a very detailed classification of all the items. We can see how many items include their 3rd categories and brands in their names.\u0022], \u0022cell_type\u0022: \u0022markdown\u0022, \u0022metadata\u0022: {\u0022_cell_guid\u0022: \u002250e765bb-3066-436c-9e3c-90c6980841c3\u0022, \u0022_uuid\u0022: \u0022ab28662c009bfd31330610d9e570ae2cc22c3f3b\u0022}}, {\u0022execution_count\u0022: null, \u0022source\u0022: [\u0022options(repr.plot.width=7, repr.plot.height=7)\\n\u0022, \u0022\\n\u0022, \u0022p1 = train %\u003e% filter(cat1!=\u0027\u0027) %\u003e% \\n\u0022, \u0022mutate(cat3 = as.character(cat3)) %\u003e% \\n\u0022, \u0022mutate(cat_in_name = (str_detect(name, cat3))) %\u003e% \\n\u0022, \u0022ggplot(aes(x=cat1, fill=cat_in_name)) +\\n\u0022, \u0022geom_bar(position=\u0027fill\u0027) +\\n\u0022, \u0022theme(axis.text.x=element_text(angle=30, hjust=1, size=8)) +\\n\u0022, \u0022xlab(\u00271st Categories\u0027) +\\n\u0022, \u0022ylab(\u0027Proportion\u0027) +\\n\u0022, \u0022ggtitle(\u00273rd Category Appears in Item Name\u0027)\\n\u0022, \u0022\\n\u0022, \u0022p2 = train %\u003e% filter(has_brand) %\u003e% \\n\u0022, \u0022mutate(brand_name = as.character(brand_name)) %\u003e% \\n\u0022, \u0022mutate(brand_in_name = (str_detect(name, brand_name))) %\u003e% \\n\u0022, \u0022ggplot(aes(x=cat1, fill=brand_in_name)) +\\n\u0022, \u0022geom_bar(position=\u0027fill\u0027) +\\n\u0022, \u0022theme(axis.text.x=element_text(angle=30, hjust=1, size=8)) +\\n\u0022, \u0022xlab(\u00271st Categories\u0027) +\\n\u0022, \u0022ylab(\u0027Proportion\u0027) +\\n\u0022, \u0022ggtitle(\u0027Brand Appears in Item Name\u0027)\\n\u0022, \u0022\\n\u0022, \u0022grid.arrange(p1, p2, ncol=1)\u0022], \u0022cell_type\u0022: \u0022code\u0022, \u0022metadata\u0022: {\u0022_kg_hide-input\u0022: true, \u0022collapsed\u0022: false, \u0022_cell_guid\u0022: \u0022b78f424e-a6fc-4873-bac0-6cd3b7109e8b\u0022, \u0022_uuid\u0022: \u002210e0400c52071311b56e4ef9197154987125b032\u0022}, \u0022outputs\u0022: []}, {\u0022source\u0022: [\u0022It appears that few item names include their categories, but many items include their brands.\\n\u0022, \u0022\\n\u0022, \u0022If we look at the brand_in_name information by brands, we can surprisingly see that it varies a lot by brands. For example, many of the Nike products contain \u0027Nike\u0027 in their names while Apple products don\u0027t show this trend \\u2014\\u2014 perhaps they are named \u0027iphone\u0027 or \u0027macbook\u0027 and everyone knows they are from Apple.\u0022], \u0022cell_type\u0022: \u0022markdown\u0022, \u0022metadata\u0022: {\u0022_cell_guid\u0022: \u002229cbfd08-5c54-4a60-a22f-2ef570be66f6\u0022, \u0022_uuid\u0022: \u002200cdc0037614346a64395e19e1d4d6c23dd45927\u0022}}, {\u0022execution_count\u0022: null, \u0022source\u0022: [\u0022options(repr.plot.width=7, repr.plot.height=3.5)\\n\u0022, \u0022\\n\u0022, \u0022train %\u003e% filter(brand_name %in% top10$brand_name) %\u003e%\\n\u0022, \u0022mutate(brand_name = as.character(brand_name)) %\u003e% \\n\u0022, \u0022mutate(brand_in_name = (str_detect(name, brand_name))) %\u003e% \\n\u0022, \u0022ggplot(aes(x=factor(brand_name, levels=top10$brand_name), fill=brand_in_name)) +\\n\u0022, \u0022geom_bar(position=\u0027fill\u0027) +\\n\u0022, \u0022theme(axis.text.x=element_text(angle=30, hjust=1, size=8)) +\\n\u0022, \u0022xlab(\u00271st Categories\u0027) +\\n\u0022, \u0022ylab(\u0027Proportion\u0027) +\\n\u0022, \u0022ggtitle(\u0027Brand Appears in Item Name (By Top 10 Brands)\u0027)\u0022], \u0022cell_type\u0022: \u0022code\u0022, \u0022metadata\u0022: {\u0022_kg_hide-input\u0022: true, \u0022collapsed\u0022: false, \u0022_cell_guid\u0022: \u002276a3aa74-1559-4f2e-bd7f-052ff99e7f53\u0022, \u0022_uuid\u0022: \u0022f9218e8799c4bdf07d36013209639c61c797a954\u0022}, \u0022outputs\u0022: []}, {\u0022source\u0022: [\u0022This is just a very initial step to look at item names. More information can be extract from this feature.\u0022], \u0022cell_type\u0022: \u0022markdown\u0022, \u0022metadata\u0022: {\u0022_cell_guid\u0022: \u002227099e9e-3606-4db5-bf9a-9ffc0a0dfd18\u0022, \u0022_uuid\u0022: \u00227c75996d83907e9d4e3c461827ac9c0e8e93b370\u0022}}, {\u0022source\u0022: [\u0022# Interaction with Price\u0022], \u0022cell_type\u0022: \u0022markdown\u0022, \u0022metadata\u0022: {\u0022_cell_guid\u0022: \u00222db13dc8-81d7-439a-a3b4-bf2eec213680\u0022, \u0022_uuid\u0022: \u0022f288a792ecabdcef715e0eb4330ac1a921e0f0cf\u0022}}, {\u0022source\u0022: [\u0022Our objective is to predict price. Here below shows the relation between some major features and the response log price. The main purpose of this section is to give you some inspirations on creating useful features.\\n\u0022, \u0022\\n\u0022, \u0022First we will see the predictive power of condition and shiping info. Unfortunately the mean price doesn\u0027t vary too much. We can see that even though we take log to the price, there are still lots of outliers.\u0022], \u0022cell_type\u0022: \u0022markdown\u0022, \u0022metadata\u0022: {\u0022_cell_guid\u0022: \u002256543b41-0f30-41c7-9ea8-7e976ef944b4\u0022, \u0022_uuid\u0022: \u0022b6fa7be696f1c7ac651142d448b267bf59e87ea7\u0022}}, {\u0022execution_count\u0022: null, \u0022source\u0022: [\u0022options(repr.plot.width=7, repr.plot.height=3.5)\\n\u0022, \u0022\\n\u0022, \u0022p1 = train %\u003e%\\n\u0022, \u0022ggplot(aes(x=item_condition_id, y=log_price, fill=item_condition_id)) +\\n\u0022, \u0022geom_boxplot(outlier.size=0.1) +\\n\u0022, \u0022ggtitle(\u0027Boxplot of Log Price versus Condition\u0027) +\\n\u0022, \u0022theme(legend.position=\\\u0022none\\\u0022, plot.title = element_text(size=10))\\n\u0022, \u0022\\n\u0022, \u0022p2 = train %\u003e%\\n\u0022, \u0022ggplot(aes(x=shipping, y=log_price, fill=shipping)) +\\n\u0022, \u0022geom_boxplot(width=0.5, outlier.size=0.1) +\\n\u0022, \u0022ggtitle(\u0027Boxplot of Log Price versus Shipping\u0027) +\\n\u0022, \u0022theme(legend.position=\\\u0022none\\\u0022, plot.title = element_text(size=10))\\n\u0022, \u0022\\n\u0022, \u0022grid.arrange(p1, p2, ncol=2)\u0022], \u0022cell_type\u0022: \u0022code\u0022, \u0022metadata\u0022: {\u0022_kg_hide-input\u0022: true, \u0022collapsed\u0022: false, \u0022_cell_guid\u0022: \u002296a41ef8-a876-4a1a-9201-93b003294f0f\u0022, \u0022_uuid\u0022: \u0022bca89b895f17854c8748415a63fdfd9f5a9342d6\u0022}, \u0022outputs\u0022: []}, {\u0022source\u0022: [\u0022The item is more expensive If the shipping fee is expected to be paid by the buyer.\\n\u0022, \u0022\\n\u0022, \u0022Next we would like to investigate the predictive power of categories and brands.\u0022], \u0022cell_type\u0022: \u0022markdown\u0022, \u0022metadata\u0022: {\u0022_cell_guid\u0022: \u0022299426fd-0b23-44d1-9f66-5d797d5bff8b\u0022, \u0022_uuid\u0022: \u0022374495f6c5507f896d6831be6219c0c892f95c0b\u0022}}, {\u0022execution_count\u0022: null, \u0022source\u0022: [\u0022options(repr.plot.width=7, repr.plot.height=3.5)\\n\u0022, \u0022\\n\u0022, \u0022train %\u003e%\\n\u0022, \u0022ggplot(aes(x=cat1, y=log_price, fill=has_brand)) +\\n\u0022, \u0022geom_boxplot(outlier.size=0.1) +\\n\u0022, \u0022ggtitle(\u0027Boxplot of Log Price versus 1st Category\u0027) +\\n\u0022, \u0022xlab(\u00271st Category\u0027) +\\n\u0022, \u0022theme(axis.text.x=element_text(angle=15, hjust=1))\u0022], \u0022cell_type\u0022: \u0022code\u0022, \u0022metadata\u0022: {\u0022_kg_hide-input\u0022: true, \u0022collapsed\u0022: false, \u0022_cell_guid\u0022: \u0022d19f344e-0106-42c3-8677-5b9da0feafc6\u0022, \u0022_uuid\u0022: \u00223b8f1a5cbd3f666d63ea7f2af0be6d8a8e5b117a\u0022}, \u0022outputs\u0022: []}, {\u0022source\u0022: [\u0022The price don\u0027t differ too much between different categories. However, there is a clear trend that items with brands have higher price than items without brands, especially for the electronics. \u0022], \u0022cell_type\u0022: \u0022markdown\u0022, \u0022metadata\u0022: {\u0022_cell_guid\u0022: \u00227f092a62-7edb-4998-91c6-0116e2c16c34\u0022, \u0022_uuid\u0022: \u0022b605668b8e77847fbfa07c03fff4c74c006c5dc7\u0022}}, {\u0022execution_count\u0022: null, \u0022source\u0022: [\u0022options(repr.plot.width=7, repr.plot.height=7)\\n\u0022, \u0022\\n\u0022, \u0022train %\u003e% mutate(len_of_des = str_length(item_description)) %\u003e%\\n\u0022, \u0022group_by(len_of_des) %\u003e%\\n\u0022, \u0022summarise(mean_log_price = mean(log_price)) %\u003e% \\n\u0022, \u0022ggplot(aes(x=len_of_des, y=mean_log_price)) +\\n\u0022, \u0022geom_point(size=0.5) +\\n\u0022, \u0022geom_smooth(method = \\\u0022loess\\\u0022, color = \\\u0022red\\\u0022, size=0.5) +\\n\u0022, \u0022ggtitle(\u0027Mean Log Price versus Length of Description\u0027)\u0022], \u0022cell_type\u0022: \u0022code\u0022, \u0022metadata\u0022: {\u0022_kg_hide-input\u0022: true, \u0022collapsed\u0022: true, \u0022_cell_guid\u0022: \u0022509c2c4b-ba8e-4f2e-ab3b-09bc386944f0\u0022, \u0022_uuid\u0022: \u0022dc94f7d6842e9a7a47c873a2cf563cad8829296a\u0022}, \u0022outputs\u0022: []}, {\u0022execution_count\u0022: null, \u0022source\u0022: [\u0022options(repr.plot.width=7, repr.plot.height=7)\\n\u0022, \u0022\\n\u0022, \u0022train %\u003e% mutate(num_token_des = str_count(item_description, \u0027\\\\\\\\S+\u0027)) %\u003e%\\n\u0022, \u0022group_by(num_token_des) %\u003e%\\n\u0022, \u0022summarise(mean_log_price = mean(log_price)) %\u003e% \\n\u0022, \u0022ggplot(aes(x=num_token_des, y=mean_log_price)) +\\n\u0022, \u0022geom_point(size=0.5) +\\n\u0022, \u0022geom_smooth(method = \\\u0022loess\\\u0022, color = \\\u0022red\\\u0022, size=0.5) +\\n\u0022, \u0022ggtitle(\u0027Mean Log Price versus # of Tokens of Description\u0027)\u0022], \u0022cell_type\u0022: \u0022code\u0022, \u0022metadata\u0022: {\u0022_kg_hide-input\u0022: true, \u0022collapsed\u0022: true, \u0022_cell_guid\u0022: \u0022a8e6555e-f254-407a-a0c7-7b9feae4d3e7\u0022, \u0022_uuid\u0022: \u0022dcc681298cbb5002ee664d2ed49034b5104f437c\u0022}, \u0022outputs\u0022: []}, {\u0022source\u0022: [\u0022There is a very interesting quadratic trend between # of words of description and the price. Note that when the # of words increases, the sample size for each point decreases exponentially, the variance of the mean log price then becomes large due to the central limit theorem.\u0022], \u0022cell_type\u0022: \u0022markdown\u0022, \u0022metadata\u0022: {\u0022_cell_guid\u0022: \u00225c544efc-feec-4720-9ba0-1bf540cbe959\u0022, \u0022_uuid\u0022: \u0022d06d4540ca2f8a3cc25bc067276fdebd830c6036\u0022}}], \u0022metadata\u0022: {\u0022language_info\u0022: {\u0022name\u0022: \u0022R\u0022, \u0022version\u0022: \u00223.4.2\u0022, \u0022codemirror_mode\u0022: \u0022r\u0022, \u0022mimetype\u0022: \u0022text/x-r-source\u0022, \u0022file_extension\u0022: \u0022.r\u0022, \u0022pygments_lexer\u0022: \u0022r\u0022}, \u0022kernelspec\u0022: {\u0022display_name\u0022: \u0022R\u0022, \u0022name\u0022: \u0022ir\u0022, \u0022language\u0022: \u0022R\u0022}}, \u0022nbformat\u0022: 4}","dateCreated":"2017-12-02T08:19:07.827Z"},"kernelRun":{"id":1850284,"kernelId":446949,"status":"complete","type":"batch","sourceType":"notebook","language":"r","title":"Mercari EDA - More Info Than You Can Imagine","dateCreated":"2017-12-02T08:19:07.827Z","dateEvaluated":"2017-12-02T08:19:07.967Z","workerContainerPort":null,"workerUptimeSeconds":32244,"workerIPAddress":"172.16.0.4     ","scriptLanguageId":12,"scriptLanguageName":"R Notebook HTML","renderedOutputUrl":"https://www.kaggleusercontent.com/kf/1850284/eyJhbGciOiJkaXIiLCJlbmMiOiJBMTI4Q0JDLUhTMjU2In0..skw9M0CQdf3KZ0mRlpmRAQ.qauLS1yGoX1nX6CzoEj1oZWxYdFjvS6fut_TgWb4b0mEccyxCwd9bfDyT4gvR0VNWpOxg5RdaQrC3GsYTo5mPxxnLwLlvTSj5yvqGEnYQbCtYaQ_xd-axQs_25iWNJHhRJIgrBx-oVb2O-abeWS4Aogy8j1oSTmvZss9iGX0j34.vMe9x6ZWUmF1NnMHkGAwkA/__results__.html","commit":{"id":7016348,"settings":{"dockerImageVersionId":null,"dataSources":[{"sourceType":"Competition","sourceId":7559,"databundleVersionId":null,"mountSlug":null}],"sourceType":"notebook","language":"r","isGpuEnabled":false,"isInternetEnabled":false},"source":"{\u0022nbformat_minor\u0022: 1, \u0022cells\u0022: [{\u0022source\u0022: [\u0022# Introduction\u0022], \u0022cell_type\u0022: \u0022markdown\u0022, \u0022metadata\u0022: {\u0022_cell_guid\u0022: \u0022e83790e9-af84-4eae-a3bf-a156158c870f\u0022, \u0022_uuid\u0022: \u00225be176176440099b5ef1cff33dd94a687c2aaf49\u0022}}, {\u0022source\u0022: [\u0022This kernel provides a very first step data exploration of the data with R.\\n\u0022, \u0022\\n\u0022, \u0022The aim of this problem is to predict the price of items on online markets, given the item names, descriptions as well as other features. This is a mix of traditional machine learning problem and NLP problem.\\n\u0022, \u0022\\n\u0022, \u0022I will be very appreciative if you find this kernel useful and give me an upvote. I will keep updating this kernel and please comment if you have any advice. \u0022], \u0022cell_type\u0022: \u0022markdown\u0022, \u0022metadata\u0022: {\u0022_cell_guid\u0022: \u002252412630-6229-48be-856e-a42a7d417fb3\u0022, \u0022_uuid\u0022: \u0022751b151617111e190a34e92f40d91ab854e9b482\u0022}}, {\u0022source\u0022: [\u0022# Loading Packages and Files\u0022], \u0022cell_type\u0022: \u0022markdown\u0022, \u0022metadata\u0022: {\u0022_cell_guid\u0022: \u0022186ebfc5-4fdf-44d1-adc6-28bdc3fcef05\u0022, \u0022_uuid\u0022: \u0022b6d7c07b4d4b259d5e7d22d5b04d6dcee1cf85d5\u0022}}, {\u0022execution_count\u0022: null, \u0022source\u0022: [\u0022library(data.table) # Loading data\\n\u0022, \u0022library(ggplot2) # Data visualization\\n\u0022, \u0022library(treemapify) # Treemap visualization\\n\u0022, \u0022library(gridExtra) # Create multiplot\\n\u0022, \u0022library(dplyr) # data manipulation\\n\u0022, \u0022library(tidyr) # data manipulation\\n\u0022, \u0022library(tibble) # data wrangling\\n\u0022, \u0022library(stringr) # String processing\\n\u0022, \u0022library(repr)\\n\u0022, \u0022library(stringi) # String processing\u0022], \u0022cell_type\u0022: \u0022code\u0022, \u0022metadata\u0022: {\u0022collapsed\u0022: false, \u0022_cell_guid\u0022: \u002270819a4b-5c28-4ff2-9aad-916be9416441\u0022, \u0022_kg_hide-output\u0022: true, \u0022_uuid\u0022: \u0022f80ccd3a4158a1b229fc0b87b7372e518405f885\u0022}, \u0022outputs\u0022: []}, {\u0022execution_count\u0022: null, \u0022source\u0022: [\u0022train = fread(\u0027../input/train.tsv\u0027, sep=\u0027\\\\t\u0027)\\n\u0022, \u0022test = fread(\u0027../input/test.tsv\u0027, sep=\u0027\\\\t\u0027)\u0022], \u0022cell_type\u0022: \u0022code\u0022, \u0022metadata\u0022: {\u0022collapsed\u0022: false, \u0022_cell_guid\u0022: \u00220416feb6-85ef-41df-82eb-8b0dd99d09e9\u0022, \u0022_kg_hide-output\u0022: true, \u0022_uuid\u0022: \u0022423a9e171688c83675d00ee0749a3f1d956a9948\u0022}, \u0022outputs\u0022: []}, {\u0022source\u0022: [\u0022# Overview\u0022], \u0022cell_type\u0022: \u0022markdown\u0022, \u0022metadata\u0022: {\u0022_cell_guid\u0022: \u0022384665dc-82bc-4315-a214-792655755949\u0022, \u0022_uuid\u0022: \u0022e754f2d422118ebc96b2328b47df0fd2042814b1\u0022}}, {\u0022source\u0022: [\u0022The training data has 1482535 observations with 7 features. The test data has 693359 rows that we need to predict. According to the competition description, the public leaderboard will be evaluated by  ALL of the test data we have at the first stage.\\n\u0022, \u0022\\n\u0022, \u0022The evaluation metrics is RMSLE, which gives more penalty on under-estimating prices rather than over-estimating. Due to the nature of RMSLE we take log of the price in our analysis.\u0022], \u0022cell_type\u0022: \u0022markdown\u0022, \u0022metadata\u0022: {\u0022_cell_guid\u0022: \u00225a12837b-648b-4ac3-881f-e5b09183c865\u0022, \u0022_uuid\u0022: \u0022462c6f026d17fd1cb97255416942fb0d33420f83\u0022}}, {\u0022execution_count\u0022: null, \u0022source\u0022: [\u0022head(train, 3)\u0022], \u0022cell_type\u0022: \u0022code\u0022, \u0022metadata\u0022: {\u0022collapsed\u0022: false, \u0022_cell_guid\u0022: \u002274bf58ef-f4f6-4ae6-ac82-901c9512af1d\u0022, \u0022_uuid\u0022: \u002273c5794f9dccad23e875319dcf6e630c52ee1470\u0022}, \u0022outputs\u0022: []}, {\u0022execution_count\u0022: null, \u0022source\u0022: [\u0022summary(train)\u0022], \u0022cell_type\u0022: \u0022code\u0022, \u0022metadata\u0022: {\u0022collapsed\u0022: false, \u0022_cell_guid\u0022: \u00229eaeee7b-2833-46bd-86c2-e4e552248671\u0022, \u0022_kg_hide-output\u0022: false, \u0022_uuid\u0022: \u00223dec8839a2fbc1c027614d3d9bc2898ecc970ed9\u0022}, \u0022outputs\u0022: []}, {\u0022execution_count\u0022: null, \u0022source\u0022: [\u0022summary(test)\u0022], \u0022cell_type\u0022: \u0022code\u0022, \u0022metadata\u0022: {\u0022collapsed\u0022: false, \u0022_cell_guid\u0022: \u0022683dde77-0b40-4f16-a139-65b465d8df06\u0022, \u0022_kg_hide-output\u0022: true, \u0022_uuid\u0022: \u0022b48f190d2f0b6aca5221ffe1231e1701389baf3a\u0022}, \u0022outputs\u0022: []}, {\u0022source\u0022: [\u0022We can have a a rough look at the features (test data summary is hidden for simplicity)\\n\u0022, \u00221. **train_id / test_id**: A unique key for each item.\\n\u0022, \u00222. **name**: The item\u0027s name as a string.\\n\u0022, \u00223. **item_condition_id**: A factor with 5 levels. As the plot below shows, the mean prices for different conditions are really close and it\u0027s hard to guess which whether higher / lower condition id is better so far.\\n\u0022, \u00224. **category_name**: The category of the item.\\n\u0022, \u00225. **brand_name**: The brand name of the item. Nearly half of the items do not have a brand.\\n\u0022, \u00226. **shipping**: A binary indicator of the shipping information. (1 if shipping fee is paid by seller and 0 by buyer)\\n\u0022, \u00227. **item_description**: A long string containing the raw text of the item description. ~5% of the items do not have a description.\u0022], \u0022cell_type\u0022: \u0022markdown\u0022, \u0022metadata\u0022: {\u0022_cell_guid\u0022: \u0022b0a84a80-56e4-4d95-8898-6f1cd4bfeff6\u0022, \u0022_uuid\u0022: \u0022f4669f5814f9f634b4565e6e4fea1236bdb09cec\u0022}}, {\u0022source\u0022: [\u0022# Feature Visualizations\u0022], \u0022cell_type\u0022: \u0022markdown\u0022, \u0022metadata\u0022: {\u0022_cell_guid\u0022: \u0022d29d3b30-9572-477b-9364-54db1500fb27\u0022, \u0022_uuid\u0022: \u00229ac51d52cff0b0cb7cc2fbca256e28e4fa82c4e6\u0022}}, {\u0022source\u0022: [\u0022## Prices and Indicators\u0022], \u0022cell_type\u0022: \u0022markdown\u0022, \u0022metadata\u0022: {\u0022_cell_guid\u0022: \u00227c7a42f6-c464-4b31-a025-755ffa683895\u0022, \u0022_uuid\u0022: \u0022be1029e95423cc771b203f2d716a645d963297f9\u0022}}, {\u0022source\u0022: [\u0022As the figures below show, the distribution of log price is more normally-distributed than the orginal scale of price.\u0022], \u0022cell_type\u0022: \u0022markdown\u0022, \u0022metadata\u0022: {\u0022_cell_guid\u0022: \u0022aad8da15-93ce-4fff-a76e-9e5a9213293f\u0022, \u0022_uuid\u0022: \u0022d41ec0860e6e384a5c364c2259749883d951f842\u0022}}, {\u0022execution_count\u0022: null, \u0022source\u0022: [\u0022train = train %\u003e% mutate(log_price = log(price+1)) # take log of the price\\n\u0022, \u0022train = train %\u003e% mutate(item_condition_id = factor(item_condition_id))\\n\u0022, \u0022train = train %\u003e% mutate(shipping = factor(shipping))\u0022], \u0022cell_type\u0022: \u0022code\u0022, \u0022metadata\u0022: {\u0022_kg_hide-input\u0022: false, \u0022collapsed\u0022: true, \u0022_cell_guid\u0022: \u0022d1463209-8f69-4a1a-8fbb-fe4a1f2028cf\u0022, \u0022_uuid\u0022: \u002247f3e202522ef6283d3f26d60e93fe8383e43c79\u0022}, \u0022outputs\u0022: []}, {\u0022execution_count\u0022: null, \u0022source\u0022: [\u0022options(repr.plot.width=7, repr.plot.height=7)\\n\u0022, \u0022\\n\u0022, \u0022p1 = train %\u003e% ggplot(aes(x=log_price)) +\\n\u0022, \u0022geom_histogram(bins=30) +\\n\u0022, \u0022ggtitle(\u0027Distributon of Log1p Price\u0027)\\n\u0022, \u0022\\n\u0022, \u0022p2 = train %\u003e% ggplot(aes(x=price)) +\\n\u0022, \u0022geom_histogram(bins=30) +\\n\u0022, \u0022xlim(0,300) +\\n\u0022, \u0022ggtitle(\u0027Distributon of Price\u0027)\\n\u0022, \u0022\\n\u0022, \u0022p3 = train %\u003e% ggplot(aes(x=item_condition_id)) +\\n\u0022, \u0022geom_bar() +\\n\u0022, \u0022ggtitle(\u0027Distribution of Item Conditions\u0027) +\\n\u0022, \u0022theme(legend.position=\\\u0022none\\\u0022)\\n\u0022, \u0022\\n\u0022, \u0022p4 = train %\u003e% ggplot(aes(x=shipping)) +\\n\u0022, \u0022geom_bar(width=0.5) +\\n\u0022, \u0022ggtitle(\u0027Distribution of Shipping Info\u0027) +\\n\u0022, \u0022theme(legend.position=\\\u0022none\\\u0022)\\n\u0022, \u0022\\n\u0022, \u0022suppressWarnings(grid.arrange(p1, p2, p3, p4, ncol=2))\u0022], \u0022cell_type\u0022: \u0022code\u0022, \u0022metadata\u0022: {\u0022_kg_hide-input\u0022: true, \u0022collapsed\u0022: false, \u0022_cell_guid\u0022: \u0022671f1bed-c4cf-48fe-aab9-a46bee3fc3d7\u0022, \u0022_kg_hide-output\u0022: false, \u0022_uuid\u0022: \u0022724e824b087d8562e9244bfcaf03c30a5cc30c34\u0022}, \u0022outputs\u0022: []}, {\u0022source\u0022: [\u0022## Categories and Brands\u0022], \u0022cell_type\u0022: \u0022markdown\u0022, \u0022metadata\u0022: {\u0022_cell_guid\u0022: \u002256c318a9-5617-4270-b71a-b0a63491771e\u0022, \u0022_uuid\u0022: \u0022aa9ac3a2ef5ca2485b8b9f426d0d154f071d001f\u0022}}, {\u0022source\u0022: [\u0022We notice that the category_name is actually encoded as three or four hierarchical levels splitted by /. (Thanks to [Abhinav Reddy Kaitha](https://www.kaggle.com/abhinavkaitha) there are some items with four levels instead of three)\\n\u0022, \u0022\\n\u0022, \u0022We can split the category names and store them into 4 columns. The major category (1st category) only has 11 levels and we can make distinguishable visualizations on them. From the 2nd level on the # of levels are too many to visualize.\\n\u0022, \u0022\\n\u0022, \u0022Most items only have three levels of categories. But the 4th level exists with 8 unique sub-categories and 4389 items. For modeling perspective it may be fine to combine it with 3rd levels but for analysis purpose I extract and keep the 4th level here.\u0022], \u0022cell_type\u0022: \u0022markdown\u0022, \u0022metadata\u0022: {\u0022_cell_guid\u0022: \u002227076269-77bc-4f77-b3d0-4ee2b71ec73d\u0022, \u0022_uuid\u0022: \u0022b6b9918155c88040a51e6a0230972e323d0d6fd5\u0022}}, {\u0022execution_count\u0022: null, \u0022source\u0022: [\u0022train = data.frame(train, str_split_fixed(train$category_name, \u0027/\u0027, 4)) %\u003e%\\n\u0022, \u0022mutate(cat1=X1, cat2=X2, cat3=X3, cat4=X4) %\u003e% select(-X1, -X2, -X3, -X4)\\n\u0022, \u0022\\n\u0022, \u0022train %\u003e% summarise(Num_Cat1 = length(unique(cat1)), Num_Cat2 = length(unique(cat2)),\\n\u0022, \u0022Num_Cat3 = length(unique(cat3)), Num_Cat4 = length(unique(cat4)))\u0022], \u0022cell_type\u0022: \u0022code\u0022, \u0022metadata\u0022: {\u0022_kg_hide-input\u0022: false, \u0022collapsed\u0022: false, \u0022_cell_guid\u0022: \u0022e3ad6a17-9324-48ec-8432-00b1d76c7f27\u0022, \u0022_uuid\u0022: \u0022d76456c65aeadabc56fed90e9643b39ae1c32996\u0022}, \u0022outputs\u0022: []}, {\u0022execution_count\u0022: null, \u0022source\u0022: [\u0022train %\u003e% filter(cat4 != \u0027\u0027) %\u003e% nrow\u0022], \u0022cell_type\u0022: \u0022code\u0022, \u0022metadata\u0022: {\u0022_kg_hide-input\u0022: false, \u0022collapsed\u0022: false, \u0022_cell_guid\u0022: \u0022e3ad6a17-9324-48ec-8432-00b1d76c7f27\u0022, \u0022scrolled\u0022: true, \u0022_uuid\u0022: \u0022d76456c65aeadabc56fed90e9643b39ae1c32996\u0022}, \u0022outputs\u0022: []}, {\u0022execution_count\u0022: null, \u0022source\u0022: [\u0022options(repr.plot.width=7, repr.plot.height=7)\\n\u0022, \u0022\\n\u0022, \u0022train %\u003e%\\n\u0022, \u0022group_by(cat1, cat2) %\u003e%\\n\u0022, \u0022count() %\u003e%\\n\u0022, \u0022ungroup() %\u003e%\\n\u0022, \u0022ggplot(aes(area=n, fill=cat1, label=cat2, subgroup=cat1)) +\\n\u0022, \u0022geom_treemap() +\\n\u0022, \u0022geom_treemap_subgroup_text(grow = T, alpha = 0.5, colour =\\n\u0022, \u0022                           \\\u0022black\\\u0022, fontface = \\\u0022italic\\\u0022, min.size = 0) +\\n\u0022, \u0022geom_treemap_text(colour = \\\u0022white\\\u0022, place = \\\u0022topleft\\\u0022, reflow = T) +\\n\u0022, \u0022theme(legend.position = \\\u0022null\\\u0022) +\\n\u0022, \u0022ggtitle(\\\u00221st and 2nd Hierarchical Category Levels\\\u0022)\u0022], \u0022cell_type\u0022: \u0022code\u0022, \u0022metadata\u0022: {\u0022_kg_hide-input\u0022: true, \u0022collapsed\u0022: false, \u0022_cell_guid\u0022: \u0022e3ad6a17-9324-48ec-8432-00b1d76c7f27\u0022, \u0022_uuid\u0022: \u0022d76456c65aeadabc56fed90e9643b39ae1c32996\u0022}, \u0022outputs\u0022: []}, {\u0022execution_count\u0022: null, \u0022source\u0022: [\u0022options(repr.plot.width=7, repr.plot.height=7)\\n\u0022, \u0022\\n\u0022, \u0022p1 = train %\u003e% count(cat1) %\u003e% \\n\u0022, \u0022ggplot(aes(x=reorder(cat1, -n), y=n)) +\\n\u0022, \u0022geom_bar(stat=\u0027identity\u0027, width=0.7) +\\n\u0022, \u0022ggtitle(\u00271st Level Categories\u0027) +\\n\u0022, \u0022xlab(\u00271st Level Catogory\u0027) +\\n\u0022, \u0022ylab(\u0027count\u0027) +\\n\u0022, \u0022theme(axis.text.x=element_text(angle=15, hjust=1))\\n\u0022, \u0022\\n\u0022, \u0022p2 = train %\u003e% count(cat2) %\u003e% \\n\u0022, \u0022filter(n\u003e20000) %\u003e% \\n\u0022, \u0022ggplot(aes(x=reorder(cat2,-n), y=n)) +\\n\u0022, \u0022geom_bar(stat=\u0027identity\u0027, width=0.7) +\\n\u0022, \u0022ggtitle(\u00272nd Level Categories (\u003e20000 only)\u0027) +\\n\u0022, \u0022xlab(\u00272nd Level Catogory\u0027) +\\n\u0022, \u0022ylab(\u0027count\u0027) +\\n\u0022, \u0022theme(axis.text.x=element_text(angle=15, hjust=1, size=7))\\n\u0022, \u0022\\n\u0022, \u0022grid.arrange(p1, p2, ncol=1)\u0022], \u0022cell_type\u0022: \u0022code\u0022, \u0022metadata\u0022: {\u0022_kg_hide-input\u0022: true, \u0022collapsed\u0022: false, \u0022_cell_guid\u0022: \u0022c03e33c8-d431-4f81-9fd5-4d57cc33e53d\u0022, \u0022_uuid\u0022: \u0022aa16335bb79ab5bead6a45688491c6ecfe4bf6e4\u0022}, \u0022outputs\u0022: []}, {\u0022source\u0022: [\u0022For visualizing I only subset the 2nd categories with 20000+ items.\\n\u0022, \u0022\\n\u0022, \u0022It appears that the major 1st level category in this online shopping market is Women. So let\u0027s take a step into it and look at the 2nd category under women. It appears most items are clothings and accessories.\u0022], \u0022cell_type\u0022: \u0022markdown\u0022, \u0022metadata\u0022: {\u0022_cell_guid\u0022: \u00228d2cf745-4da9-407d-9c2a-53c062a8c608\u0022, \u0022_uuid\u0022: \u0022effccc02e32a6be427c7d42b57fd487f2f8bd69f\u0022}}, {\u0022execution_count\u0022: null, \u0022source\u0022: [\u0022options(repr.plot.width=7, repr.plot.height=7)\\n\u0022, \u0022\\n\u0022, \u0022train %\u003e% filter(cat1==\u0027Women\u0027) %\u003e% \\n\u0022, \u0022group_by(cat2, cat3) %\u003e%\\n\u0022, \u0022count() %\u003e%\\n\u0022, \u0022ungroup() %\u003e%\\n\u0022, \u0022ggplot(aes(area=n, fill=cat2, label=cat3, subgroup=cat2)) +\\n\u0022, \u0022geom_treemap() +\\n\u0022, \u0022geom_treemap_subgroup_text(grow = T, alpha = 0.5, colour =\\n\u0022, \u0022                           \\\u0022black\\\u0022, fontface = \\\u0022italic\\\u0022, min.size = 0) +\\n\u0022, \u0022geom_treemap_text(colour = \\\u0022white\\\u0022, place = \\\u0022topleft\\\u0022, reflow = T) +\\n\u0022, \u0022theme(legend.position = \\\u0022null\\\u0022) +\\n\u0022, \u0022ggtitle(\\\u00222nd and 3rd Hierarchical Category Levels Under Woman\\\u0022)\u0022], \u0022cell_type\u0022: \u0022code\u0022, \u0022metadata\u0022: {\u0022_kg_hide-input\u0022: true, \u0022collapsed\u0022: false, \u0022_cell_guid\u0022: \u0022ff68baa4-0b54-4118-b0e6-a18c33b0c0a9\u0022, \u0022_uuid\u0022: \u0022c751e8026fac69f4effc4b3d9dfb48ef396da833\u0022}, \u0022outputs\u0022: []}, {\u0022execution_count\u0022: null, \u0022source\u0022: [\u0022options(repr.plot.width=7, repr.plot.height=3.5)\\n\u0022, \u0022\\n\u0022, \u0022train %\u003e% filter(cat1==\u0027Women\u0027) %\u003e%\\n\u0022, \u0022count(cat2) %\u003e% \\n\u0022, \u0022ggplot(aes(x=reorder(cat2, -n), y=n)) +\\n\u0022, \u0022geom_bar(stat=\u0027identity\u0027, width=0.7) +\\n\u0022, \u0022ggtitle(\u00272nd Level Categories Under Women\u0027) +\\n\u0022, \u0022xlab(\u00272nd Level Catogory Under Women\u0027) +\\n\u0022, \u0022ylab(\u0027count\u0027) +\\n\u0022, \u0022theme(axis.text.x=element_text(angle=30, hjust=1, size=8))\u0022], \u0022cell_type\u0022: \u0022code\u0022, \u0022metadata\u0022: {\u0022_kg_hide-input\u0022: true, \u0022collapsed\u0022: false, \u0022_cell_guid\u0022: \u0022d39b6dd4-3471-46b1-b8c0-e1fe01564449\u0022, \u0022_uuid\u0022: \u0022a6b6c8b45dea8fa8a82504121fc09be746722345\u0022}, \u0022outputs\u0022: []}, {\u0022source\u0022: [\u0022Nearly half of the items don\u0027t have brands. The proportions of items that have brands vary in different categories. For example, Nearly all handmade items don\u0027t have brand names, of course.\\n\u0022, \u0022\\n\u0022, \u0022For brands, they are not in a hierarchical order and there are too many to be fitted in one graph. So I plotted the count of top 10 most frequent brands for a rough look. Each brand contains items from 1 or more major categories. Not surprisingly, the top brands are dominated by women items except Apple and Nintendo.\u0022], \u0022cell_type\u0022: \u0022markdown\u0022, \u0022metadata\u0022: {\u0022_cell_guid\u0022: \u0022530eb693-633b-4e8d-98d9-cfc05d4e9578\u0022, \u0022_uuid\u0022: \u002239e01eaf6ee5ef2642e84fc137ebbb3e1d908d46\u0022}}, {\u0022execution_count\u0022: null, \u0022source\u0022: [\u0022options(repr.plot.width=7, repr.plot.height=3.5)\\n\u0022, \u0022\\n\u0022, \u0022train = train %\u003e% mutate(has_brand=(brand_name!=\u0027\u0027))\\n\u0022, \u0022train %\u003e%\\n\u0022, \u0022ggplot(aes(x=cat1, fill=has_brand)) +\\n\u0022, \u0022geom_bar(position=\u0027fill\u0027) +\\n\u0022, \u0022theme(axis.text.x=element_text(angle=15, hjust=1, size=8)) +\\n\u0022, \u0022xlab(\u00271st Categories\u0027) +\\n\u0022, \u0022ylab(\u0027Proportion\u0027) +\\n\u0022, \u0022ggtitle(\u0027Items With and Without Brands\u0027)\u0022], \u0022cell_type\u0022: \u0022code\u0022, \u0022metadata\u0022: {\u0022_kg_hide-input\u0022: true, \u0022collapsed\u0022: false, \u0022_cell_guid\u0022: \u0022cd7e9348-53ec-49c1-bf88-b3aa18b9327a\u0022, \u0022_uuid\u0022: \u00229a710c2d2a8eacea185e6e21fb33a87197863071\u0022}, \u0022outputs\u0022: []}, {\u0022execution_count\u0022: null, \u0022source\u0022: [\u0022options(repr.plot.width=7, repr.plot.height=3.5)\\n\u0022, \u0022\\n\u0022, \u0022top10 = train %\u003e% filter(brand_name!=\u0027\u0027) %\u003e% \\n\u0022, \u0022count(brand_name) %\u003e%\\n\u0022, \u0022arrange(desc(n)) %\u003e%\\n\u0022, \u0022head(10)\\n\u0022, \u0022\\n\u0022, \u0022train %\u003e% filter(brand_name %in% top10$brand_name) %\u003e%\\n\u0022, \u0022ggplot(aes(x=factor(brand_name, levels=rev(top10$brand_name)), fill=cat1)) +\\n\u0022, \u0022geom_bar(width=0.5) +\\n\u0022, \u0022coord_flip() +\\n\u0022, \u0022xlab(\u0027brand\u0027) +\\n\u0022, \u0022labs(fill=\u00271st Category\u0027) +\\n\u0022, \u0022ggtitle(\u0027Top 10 Brands and Their Categories\u0027)\u0022], \u0022cell_type\u0022: \u0022code\u0022, \u0022metadata\u0022: {\u0022_kg_hide-input\u0022: true, \u0022collapsed\u0022: false, \u0022_cell_guid\u0022: \u002268ec9a30-755d-453a-a581-fdc4ec47ea9c\u0022, \u0022_uuid\u0022: \u002262796dc28f9b5b149b389530c760918d93aea7c9\u0022}, \u0022outputs\u0022: []}, {\u0022source\u0022: [\u0022## Item Descriptions\u0022], \u0022cell_type\u0022: \u0022markdown\u0022, \u0022metadata\u0022: {\u0022_cell_guid\u0022: \u002273e23a74-17fc-4837-b8f3-db1343b50536\u0022, \u0022_uuid\u0022: \u0022aad254015fc2574e7e4a481bb73de22d6366a7ac\u0022}}, {\u0022source\u0022: [\u0022For the item description, I extract two most simple features of the text: the length of the text and the number of words of the text. It shows that both of them have a exponential distribution with a long tail.\u0022], \u0022cell_type\u0022: \u0022markdown\u0022, \u0022metadata\u0022: {\u0022_cell_guid\u0022: \u002267a27aaa-7488-4eab-b982-2406ab8dbb00\u0022, \u0022_uuid\u0022: \u0022c6c9cb18df2b04c60c1a97e03780227471d93cb0\u0022}}, {\u0022execution_count\u0022: null, \u0022source\u0022: [\u0022options(repr.plot.width=7, repr.plot.height=3.5)\\n\u0022, \u0022\\n\u0022, \u0022p1 = train %\u003e% mutate(len_of_des = str_length(item_description)) %\u003e%\\n\u0022, \u0022ggplot(aes(x=len_of_des)) +\\n\u0022, \u0022geom_histogram(bins=50) +\\n\u0022, \u0022ggtitle(\u0027Distribution of Length of Descriptions\u0027) +\\n\u0022, \u0022xlab(\u0027Length of Item Description\u0027) +\\n\u0022, \u0022theme(plot.title = element_text(size=10))\\n\u0022, \u0022\\n\u0022, \u0022p2 = train %\u003e% mutate(num_token_des = str_count(item_description, \u0027\\\\\\\\S+\u0027)) %\u003e% \\n\u0022, \u0022ggplot(aes(x=num_token_des)) +\\n\u0022, \u0022geom_histogram(bins=50) +\\n\u0022, \u0022ggtitle(\u0027Distribution of # of Tokens of Descriptions\u0027) +\\n\u0022, \u0022xlab(\u0027Number of Tokens\u0027) +\\n\u0022, \u0022theme(plot.title = element_text(size=10))\\n\u0022, \u0022\\n\u0022, \u0022grid.arrange(p1, p2, ncol=2)\u0022], \u0022cell_type\u0022: \u0022code\u0022, \u0022metadata\u0022: {\u0022_kg_hide-input\u0022: true, \u0022collapsed\u0022: false, \u0022_cell_guid\u0022: \u0022d58a42d8-179f-4985-993c-e66a32063b04\u0022, \u0022_uuid\u0022: \u002284ad2a9a20776bf83ce21cfcb274fc4aa3c72934\u0022}, \u0022outputs\u0022: []}, {\u0022source\u0022: [\u0022## Names\u0022], \u0022cell_type\u0022: \u0022markdown\u0022, \u0022metadata\u0022: {\u0022_cell_guid\u0022: \u002282ccedbe-7c63-4cb3-8900-179d1920d335\u0022, \u0022_uuid\u0022: \u0022d4d231732e467163942590ffde640bbc7bd34fa7\u0022}}, {\u0022source\u0022: [\u0022Name is a very important feature \\u2014\\u2014 it directly tell us what the items are. But it\u0027s hard to be categorized or one-hot encoded because there are 1225273 uniqle names for all the items. We should find some ways to extract the information from the item name.\u0022], \u0022cell_type\u0022: \u0022markdown\u0022, \u0022metadata\u0022: {\u0022_cell_guid\u0022: \u0022d55cfe7d-acd0-4d94-a446-5e216ad1701f\u0022, \u0022_uuid\u0022: \u0022d2af15ab0139056f72212e43a83f2c4c022397c5\u0022}}, {\u0022execution_count\u0022: null, \u0022source\u0022: [\u0022length(unique(train$name))\u0022], \u0022cell_type\u0022: \u0022code\u0022, \u0022metadata\u0022: {\u0022collapsed\u0022: false, \u0022_cell_guid\u0022: \u0022de79f358-bad0-4f51-a06a-da1c249ddaef\u0022, \u0022_uuid\u0022: \u0022983de409264f809b944c56f20b9e1af488b3a3db\u0022}, \u0022outputs\u0022: []}, {\u0022execution_count\u0022: null, \u0022source\u0022: [\u0022options(repr.plot.width=7, repr.plot.height=3.5)\\n\u0022, \u0022\\n\u0022, \u0022train = train %\u003e% mutate(num_token_name = str_count(name, \u0027\\\\\\\\S+\u0027))\\n\u0022, \u0022train %\u003e%\\n\u0022, \u0022ggplot(aes(x=num_token_name)) +\\n\u0022, \u0022geom_bar(width=0.7) +\\n\u0022, \u0022ggtitle(\u0027Distribution of # of Tokens of Names\u0027) +\\n\u0022, \u0022xlab(\u0027Number of Words\u0027)\u0022], \u0022cell_type\u0022: \u0022code\u0022, \u0022metadata\u0022: {\u0022_kg_hide-input\u0022: true, \u0022collapsed\u0022: false, \u0022_cell_guid\u0022: \u00222d1b8def-75fc-4422-ae13-f59d02697311\u0022, \u0022_uuid\u0022: \u002206c9d3960e7f183a965e7ee4fd0e93be9ffdd5b4\u0022}, \u0022outputs\u0022: []}, {\u0022source\u0022: [\u0022A very intuitive question would be: does the item name include its category and brand information? We know that the 3-level categories has been a very detailed classification of all the items. We can see how many items include their 3rd categories and brands in their names.\u0022], \u0022cell_type\u0022: \u0022markdown\u0022, \u0022metadata\u0022: {\u0022_cell_guid\u0022: \u002250e765bb-3066-436c-9e3c-90c6980841c3\u0022, \u0022_uuid\u0022: \u0022ab28662c009bfd31330610d9e570ae2cc22c3f3b\u0022}}, {\u0022execution_count\u0022: null, \u0022source\u0022: [\u0022options(repr.plot.width=7, repr.plot.height=7)\\n\u0022, \u0022\\n\u0022, \u0022p1 = train %\u003e% filter(cat1!=\u0027\u0027) %\u003e% \\n\u0022, \u0022mutate(cat3 = as.character(cat3)) %\u003e% \\n\u0022, \u0022mutate(cat_in_name = (str_detect(name, cat3))) %\u003e% \\n\u0022, \u0022ggplot(aes(x=cat1, fill=cat_in_name)) +\\n\u0022, \u0022geom_bar(position=\u0027fill\u0027) +\\n\u0022, \u0022theme(axis.text.x=element_text(angle=30, hjust=1, size=8)) +\\n\u0022, \u0022xlab(\u00271st Categories\u0027) +\\n\u0022, \u0022ylab(\u0027Proportion\u0027) +\\n\u0022, \u0022ggtitle(\u00273rd Category Appears in Item Name\u0027)\\n\u0022, \u0022\\n\u0022, \u0022p2 = train %\u003e% filter(has_brand) %\u003e% \\n\u0022, \u0022mutate(brand_name = as.character(brand_name)) %\u003e% \\n\u0022, \u0022mutate(brand_in_name = (str_detect(name, brand_name))) %\u003e% \\n\u0022, \u0022ggplot(aes(x=cat1, fill=brand_in_name)) +\\n\u0022, \u0022geom_bar(position=\u0027fill\u0027) +\\n\u0022, \u0022theme(axis.text.x=element_text(angle=30, hjust=1, size=8)) +\\n\u0022, \u0022xlab(\u00271st Categories\u0027) +\\n\u0022, \u0022ylab(\u0027Proportion\u0027) +\\n\u0022, \u0022ggtitle(\u0027Brand Appears in Item Name\u0027)\\n\u0022, \u0022\\n\u0022, \u0022grid.arrange(p1, p2, ncol=1)\u0022], \u0022cell_type\u0022: \u0022code\u0022, \u0022metadata\u0022: {\u0022_kg_hide-input\u0022: true, \u0022collapsed\u0022: false, \u0022_cell_guid\u0022: \u0022b78f424e-a6fc-4873-bac0-6cd3b7109e8b\u0022, \u0022_uuid\u0022: \u002210e0400c52071311b56e4ef9197154987125b032\u0022}, \u0022outputs\u0022: []}, {\u0022source\u0022: [\u0022It appears that few item names include their categories, but many items include their brands.\\n\u0022, \u0022\\n\u0022, \u0022If we look at the brand_in_name information by brands, we can surprisingly see that it varies a lot by brands. For example, many of the Nike products contain \u0027Nike\u0027 in their names while Apple products don\u0027t show this trend \\u2014\\u2014 perhaps they are named \u0027iphone\u0027 or \u0027macbook\u0027 and everyone knows they are from Apple.\u0022], \u0022cell_type\u0022: \u0022markdown\u0022, \u0022metadata\u0022: {\u0022_cell_guid\u0022: \u002229cbfd08-5c54-4a60-a22f-2ef570be66f6\u0022, \u0022_uuid\u0022: \u002200cdc0037614346a64395e19e1d4d6c23dd45927\u0022}}, {\u0022execution_count\u0022: null, \u0022source\u0022: [\u0022options(repr.plot.width=7, repr.plot.height=3.5)\\n\u0022, \u0022\\n\u0022, \u0022train %\u003e% filter(brand_name %in% top10$brand_name) %\u003e%\\n\u0022, \u0022mutate(brand_name = as.character(brand_name)) %\u003e% \\n\u0022, \u0022mutate(brand_in_name = (str_detect(name, brand_name))) %\u003e% \\n\u0022, \u0022ggplot(aes(x=factor(brand_name, levels=top10$brand_name), fill=brand_in_name)) +\\n\u0022, \u0022geom_bar(position=\u0027fill\u0027) +\\n\u0022, \u0022theme(axis.text.x=element_text(angle=30, hjust=1, size=8)) +\\n\u0022, \u0022xlab(\u00271st Categories\u0027) +\\n\u0022, \u0022ylab(\u0027Proportion\u0027) +\\n\u0022, \u0022ggtitle(\u0027Brand Appears in Item Name (By Top 10 Brands)\u0027)\u0022], \u0022cell_type\u0022: \u0022code\u0022, \u0022metadata\u0022: {\u0022_kg_hide-input\u0022: true, \u0022collapsed\u0022: false, \u0022_cell_guid\u0022: \u002276a3aa74-1559-4f2e-bd7f-052ff99e7f53\u0022, \u0022_uuid\u0022: \u0022f9218e8799c4bdf07d36013209639c61c797a954\u0022}, \u0022outputs\u0022: []}, {\u0022source\u0022: [\u0022This is just a very initial step to look at item names. More information can be extract from this feature.\u0022], \u0022cell_type\u0022: \u0022markdown\u0022, \u0022metadata\u0022: {\u0022_cell_guid\u0022: \u002227099e9e-3606-4db5-bf9a-9ffc0a0dfd18\u0022, \u0022_uuid\u0022: \u00227c75996d83907e9d4e3c461827ac9c0e8e93b370\u0022}}, {\u0022source\u0022: [\u0022# Interaction with Price\u0022], \u0022cell_type\u0022: \u0022markdown\u0022, \u0022metadata\u0022: {\u0022_cell_guid\u0022: \u00222db13dc8-81d7-439a-a3b4-bf2eec213680\u0022, \u0022_uuid\u0022: \u0022f288a792ecabdcef715e0eb4330ac1a921e0f0cf\u0022}}, {\u0022source\u0022: [\u0022Our objective is to predict price. Here below shows the relation between some major features and the response log price. The main purpose of this section is to give you some inspirations on creating useful features.\\n\u0022, \u0022\\n\u0022, \u0022First we will see the predictive power of condition and shiping info. Unfortunately the mean price doesn\u0027t vary too much. We can see that even though we take log to the price, there are still lots of outliers.\u0022], \u0022cell_type\u0022: \u0022markdown\u0022, \u0022metadata\u0022: {\u0022_cell_guid\u0022: \u002256543b41-0f30-41c7-9ea8-7e976ef944b4\u0022, \u0022_uuid\u0022: \u0022b6fa7be696f1c7ac651142d448b267bf59e87ea7\u0022}}, {\u0022execution_count\u0022: null, \u0022source\u0022: [\u0022options(repr.plot.width=7, repr.plot.height=3.5)\\n\u0022, \u0022\\n\u0022, \u0022p1 = train %\u003e%\\n\u0022, \u0022ggplot(aes(x=item_condition_id, y=log_price, fill=item_condition_id)) +\\n\u0022, \u0022geom_boxplot(outlier.size=0.1) +\\n\u0022, \u0022ggtitle(\u0027Boxplot of Log Price versus Condition\u0027) +\\n\u0022, \u0022theme(legend.position=\\\u0022none\\\u0022, plot.title = element_text(size=10))\\n\u0022, \u0022\\n\u0022, \u0022p2 = train %\u003e%\\n\u0022, \u0022ggplot(aes(x=shipping, y=log_price, fill=shipping)) +\\n\u0022, \u0022geom_boxplot(width=0.5, outlier.size=0.1) +\\n\u0022, \u0022ggtitle(\u0027Boxplot of Log Price versus Shipping\u0027) +\\n\u0022, \u0022theme(legend.position=\\\u0022none\\\u0022, plot.title = element_text(size=10))\\n\u0022, \u0022\\n\u0022, \u0022grid.arrange(p1, p2, ncol=2)\u0022], \u0022cell_type\u0022: \u0022code\u0022, \u0022metadata\u0022: {\u0022_kg_hide-input\u0022: true, \u0022collapsed\u0022: false, \u0022_cell_guid\u0022: \u002296a41ef8-a876-4a1a-9201-93b003294f0f\u0022, \u0022_uuid\u0022: \u0022bca89b895f17854c8748415a63fdfd9f5a9342d6\u0022}, \u0022outputs\u0022: []}, {\u0022source\u0022: [\u0022The item is more expensive If the shipping fee is expected to be paid by the buyer.\\n\u0022, \u0022\\n\u0022, \u0022Next we would like to investigate the predictive power of categories and brands.\u0022], \u0022cell_type\u0022: \u0022markdown\u0022, \u0022metadata\u0022: {\u0022_cell_guid\u0022: \u0022299426fd-0b23-44d1-9f66-5d797d5bff8b\u0022, \u0022_uuid\u0022: \u0022374495f6c5507f896d6831be6219c0c892f95c0b\u0022}}, {\u0022execution_count\u0022: null, \u0022source\u0022: [\u0022options(repr.plot.width=7, repr.plot.height=3.5)\\n\u0022, \u0022\\n\u0022, \u0022train %\u003e%\\n\u0022, \u0022ggplot(aes(x=cat1, y=log_price, fill=has_brand)) +\\n\u0022, \u0022geom_boxplot(outlier.size=0.1) +\\n\u0022, \u0022ggtitle(\u0027Boxplot of Log Price versus 1st Category\u0027) +\\n\u0022, \u0022xlab(\u00271st Category\u0027) +\\n\u0022, \u0022theme(axis.text.x=element_text(angle=15, hjust=1))\u0022], \u0022cell_type\u0022: \u0022code\u0022, \u0022metadata\u0022: {\u0022_kg_hide-input\u0022: true, \u0022collapsed\u0022: false, \u0022_cell_guid\u0022: \u0022d19f344e-0106-42c3-8677-5b9da0feafc6\u0022, \u0022_uuid\u0022: \u00223b8f1a5cbd3f666d63ea7f2af0be6d8a8e5b117a\u0022}, \u0022outputs\u0022: []}, {\u0022source\u0022: [\u0022The price don\u0027t differ too much between different categories. However, there is a clear trend that items with brands have higher price than items without brands, especially for the electronics. \u0022], \u0022cell_type\u0022: \u0022markdown\u0022, \u0022metadata\u0022: {\u0022_cell_guid\u0022: \u00227f092a62-7edb-4998-91c6-0116e2c16c34\u0022, \u0022_uuid\u0022: \u0022b605668b8e77847fbfa07c03fff4c74c006c5dc7\u0022}}, {\u0022execution_count\u0022: null, \u0022source\u0022: [\u0022options(repr.plot.width=7, repr.plot.height=7)\\n\u0022, \u0022\\n\u0022, \u0022train %\u003e% mutate(len_of_des = str_length(item_description)) %\u003e%\\n\u0022, \u0022group_by(len_of_des) %\u003e%\\n\u0022, \u0022summarise(mean_log_price = mean(log_price)) %\u003e% \\n\u0022, \u0022ggplot(aes(x=len_of_des, y=mean_log_price)) +\\n\u0022, \u0022geom_point(size=0.5) +\\n\u0022, \u0022geom_smooth(method = \\\u0022loess\\\u0022, color = \\\u0022red\\\u0022, size=0.5) +\\n\u0022, \u0022ggtitle(\u0027Mean Log Price versus Length of Description\u0027)\u0022], \u0022cell_type\u0022: \u0022code\u0022, \u0022metadata\u0022: {\u0022_kg_hide-input\u0022: true, \u0022collapsed\u0022: true, \u0022_cell_guid\u0022: \u0022509c2c4b-ba8e-4f2e-ab3b-09bc386944f0\u0022, \u0022_uuid\u0022: \u0022dc94f7d6842e9a7a47c873a2cf563cad8829296a\u0022}, \u0022outputs\u0022: []}, {\u0022execution_count\u0022: null, \u0022source\u0022: [\u0022options(repr.plot.width=7, repr.plot.height=7)\\n\u0022, \u0022\\n\u0022, \u0022train %\u003e% mutate(num_token_des = str_count(item_description, \u0027\\\\\\\\S+\u0027)) %\u003e%\\n\u0022, \u0022group_by(num_token_des) %\u003e%\\n\u0022, \u0022summarise(mean_log_price = mean(log_price)) %\u003e% \\n\u0022, \u0022ggplot(aes(x=num_token_des, y=mean_log_price)) +\\n\u0022, \u0022geom_point(size=0.5) +\\n\u0022, \u0022geom_smooth(method = \\\u0022loess\\\u0022, color = \\\u0022red\\\u0022, size=0.5) +\\n\u0022, \u0022ggtitle(\u0027Mean Log Price versus # of Tokens of Description\u0027)\u0022], \u0022cell_type\u0022: \u0022code\u0022, \u0022metadata\u0022: {\u0022_kg_hide-input\u0022: true, \u0022collapsed\u0022: true, \u0022_cell_guid\u0022: \u0022a8e6555e-f254-407a-a0c7-7b9feae4d3e7\u0022, \u0022_uuid\u0022: \u0022dcc681298cbb5002ee664d2ed49034b5104f437c\u0022}, \u0022outputs\u0022: []}, {\u0022source\u0022: [\u0022There is a very interesting quadratic trend between # of words of description and the price. Note that when the # of words increases, the sample size for each point decreases exponentially, the variance of the mean log price then becomes large due to the central limit theorem.\u0022], \u0022cell_type\u0022: \u0022markdown\u0022, \u0022metadata\u0022: {\u0022_cell_guid\u0022: \u00225c544efc-feec-4720-9ba0-1bf540cbe959\u0022, \u0022_uuid\u0022: \u0022d06d4540ca2f8a3cc25bc067276fdebd830c6036\u0022}}], \u0022metadata\u0022: {\u0022language_info\u0022: {\u0022name\u0022: \u0022R\u0022, \u0022version\u0022: \u00223.4.2\u0022, \u0022codemirror_mode\u0022: \u0022r\u0022, \u0022mimetype\u0022: \u0022text/x-r-source\u0022, \u0022file_extension\u0022: \u0022.r\u0022, \u0022pygments_lexer\u0022: \u0022r\u0022}, \u0022kernelspec\u0022: {\u0022display_name\u0022: \u0022R\u0022, \u0022name\u0022: \u0022ir\u0022, \u0022language\u0022: \u0022R\u0022}}, \u0022nbformat\u0022: 4}","dateCreated":"2017-12-02T08:19:07.827Z"},"resources":null,"isolatorResults":"\u003cresults\u003e\u003cdisk_kb_free\u003e945244\u003c/disk_kb_free\u003e\u003cdocker_image_id\u003esha256:9ea6ab1a817a1c4f71202acf3ca1f13ed730b1ba200a9514ac3a2f628fd6cbca\u003c/docker_image_id\u003e\u003cdocker_image_name\u003egcr.io/kaggle-images/rstats\u003c/docker_image_name\u003e\u003cexit_code\u003e0\u003c/exit_code\u003e\u003cfailure_message /\u003e\u003cout_of_memory\u003eFalse\u003c/out_of_memory\u003e\u003crun_time_seconds\u003e1859.222414435\u003c/run_time_seconds\u003e\u003csucceeded\u003eTrue\u003c/succeeded\u003e\u003ctimeout_exceeded\u003eFalse\u003c/timeout_exceeded\u003e\u003cused_all_space\u003eFalse\u003c/used_all_space\u003e\u003cwas_killed\u003eFalse\u003c/was_killed\u003e\u003c/results\u003e","runInfo":{"dockerfileUrl":"https://github.com/Kaggle/docker-rstats/blob/master/Dockerfile","dockerHubUrl":"https://registry.hub.docker.com/u/kaggle/rstats/","dockerImageDigest":null,"dockerImageId":"sha256:9ea6ab1a817a1c4f71202acf3ca1f13ed730b1ba200a9514ac3a2f628fd6cbca","dockerImageName":"kaggle/rstats","diskKbFree":945244,"failureMessage":"","exitCode":0,"queuedSeconds":0,"outputSizeBytes":0,"runTimeSeconds":1859.222414435,"usedAllSpace":false,"timeoutExceeded":false,"isValidStatus":false,"wasGpuEnabled":false,"wasInternetEnabled":false,"outOfMemory":false,"invalidPathErrors":false,"succeeded":true,"wasKilled":false},"outputFilesTotalSizeBytes":1311353,"dockerImageVersionId":null,"usedCustomDockerImage":false,"dataSources":[{"sourceType":"Competition","sourceId":7559,"databundleVersionId":null,"mountSlug":""}]},"author":{"id":587388,"displayName":"Lingzhi","email":null,"editedEmail":null,"editedEmailCode":null,"userName":"vrtjso","thumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/587388-kg.jpg","profileUrl":"/vrtjso","registerDate":"0001-01-01T00:00:00Z","lastVisitDate":"0001-01-01T00:00:00Z","statusId":0,"performanceTier":3,"userRoles":null,"userLogins":null,"groupIds":null,"duplicateUsers":null,"hasPhoneVerifications":false,"failedNerdchas":0,"hasPendingNerdcha":false,"deleteRequests":null,"userAttributes":null,"isAdmin":false,"isTvc":false,"isKaggleBot":false,"isAdminOrTvc":false,"isAnonymous":false,"canAct":false,"canBeSeen":false,"thumbnailName":null,"activationCode":"00000000-0000-0000-0000-000000000000","isPhoneVerified":false},"baseUrl":"/vrtjso/mercari-eda-more-info-than-you-can-imagine","collaborators":{"owner":{"userId":587388,"groupId":null,"groupMemberCount":null,"profileUrl":"/vrtjso","thumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/587388-kg.jpg","name":"Lingzhi","slug":"vrtjso","userTier":3,"joinDate":null,"type":"owner","isUser":true,"isGroup":false},"collaborators":[]},"initialTab":null,"log":"[{\n  \u0022data\u0022: \u0022[NbConvertApp] Converting notebook __temp_notebook_source__.ipynb to html\\n\u0022,\n  \u0022stream_name\u0022: \u0022stderr\u0022,\n  \u0022time\u0022: 0.7485186420017271\n},{\n  \u0022data\u0022: \u0022/usr/local/lib/python2.7/dist-packages/nbconvert/filters/datatypefilter.py:41: UserWarning: Your element with mimetype(s) [] is not able to be represented.\\n  mimetypes=output.keys())\\n\u0022,\n  \u0022stream_name\u0022: \u0022stderr\u0022,\n  \u0022time\u0022: 1.2483699790027458\n},{\n  \u0022data\u0022: \u0022[NbConvertApp] Support files will be in __results___files/\\n[NbConvertApp] Making directory __results___files\\n[NbConvertApp] Making directory __results___files\\n[NbConvertApp] Writing 309792 bytes to __results__.html\\n\u0022,\n  \u0022stream_name\u0022: \u0022stderr\u0022,\n  \u0022time\u0022: 1.2833761669971864\n}{\n  \u0022data\u0022: \u0022[NbConvertApp] Converting notebook __temp_notebook_source__.ipynb to notebook\\n\u0022,\n  \u0022stream_name\u0022: \u0022stderr\u0022,\n  \u0022time\u0022: 0.5953043539993814\n},{\n  \u0022data\u0022: \u0022[NbConvertApp] Executing notebook with kernel: ir\\n\u0022,\n  \u0022stream_name\u0022: \u0022stderr\u0022,\n  \u0022time\u0022: 0.6745713689961121\n},{\n  \u0022data\u0022: \u0022[NbConvertApp] Writing 1362193 bytes to __notebook__.ipynb\\n\u0022,\n  \u0022stream_name\u0022: \u0022stderr\u0022,\n  \u0022time\u0022: 155.53829577099532\n}{\n  \u0022data\u0022: \u0022[NbConvertApp] Converting notebook __notebook__.ipynb to html\\n\u0022,\n  \u0022stream_name\u0022: \u0022stderr\u0022,\n  \u0022time\u0022: 0.6360377009987133\n},{\n  \u0022data\u0022: \u0022/usr/local/lib/python2.7/dist-packages/nbconvert/filters/datatypefilter.py:41: UserWarning: Your element with mimetype(s) [] is not able to be represented.\\n  mimetypes=output.keys())\\n\u0022,\n  \u0022stream_name\u0022: \u0022stderr\u0022,\n  \u0022time\u0022: 1.1823090949983452\n},{\n  \u0022data\u0022: \u0022[NbConvertApp] Support files will be in __results___files/\\n[NbConvertApp] Making directory __results___files\\n\u0022,\n  \u0022stream_name\u0022: \u0022stderr\u0022,\n  \u0022time\u0022: 1.2176315169999725\n},{\n  \u0022data\u0022: \u0022[NbConvertApp] Making directory __results___files\\n[NbConvertApp] Making directory __results___files\\n[NbConvertApp] Making directory __results___files\\n[NbConvertApp] Making directory __results___files\\n[NbConvertApp] Making directory __results___files\\n[NbConvertApp] Making directory __results___files\\n[NbConvertApp] Making directory __results___files\\n[NbConvertApp] Making directory __results___files\\n[NbConvertApp] Making directory __results___files\\n[NbConvertApp] Making directory __results___files\\n[NbConvertApp] Making directory __results___files\\n[NbConvertApp] Making directory __results___files\\n[NbConvertApp] Making directory __results___files\\n[NbConvertApp] Making directory __results___files\\n[NbConvertApp] Writing 320106 bytes to __results__.html\\n\u0022,\n  \u0022stream_name\u0022: \u0022stderr\u0022,\n  \u0022time\u0022: 1.250741003001167\n}","outputFiles":[{"ownerInfo":null,"kernelVersionOutputFileId":8769106,"kernelVersionId":1850284,"kernelId":446949,"size":0,"fullPath":"Rplot001.png","previewUrl":"/kernels/preview.json/1850284/d2bacebe-1bbe-e3bb-e6b1-b49f45585fb0/Rplot001.png","downloadUrl":"https://www.kaggleusercontent.com/kf/1850284/eyJhbGciOiJkaXIiLCJlbmMiOiJBMTI4Q0JDLUhTMjU2In0..fCj1cziyfuuu1yCRzIIEKQ.02RUhfGAPqidNyC_bAnb8iX9pUWVMIPnMmPAwhYH4eiSQdmKw1tvmkzaWq0X79BfDiWt6HJ1fM7nXai4nbUdKhyrFEFqi36ZAf3hb6GDyzFfdopDFkPekavYOFWffX8cJFJvqSSqSHHEfvHz3YBAAIDYk9U5LNtQ5jfraI2E6Wk.qPd8EDSN7-bivCtQUAtiOw/Rplot001.png","fileType":".png","contentLength":33603,"contentType":null,"contentMD5":null,"validationErrors":null,"type":"kernelOutputFile","collapsed":false,"info":{"metrics":null,"archiveInfo":null,"archiveInfoV2":null,"blobFileInfo":null,"convertCsvInfo":null,"kernelReference":null},"settings":{"csvSettings":null,"bigQuerySettings":null,"bigQueryMirrorSettings":null,"storageSettings":null,"remoteUrlSettings":null,"remoteGithubSettings":null},"render":null,"children":[],"firestorePath":null,"firestoreKey":null,"name":"Rplot001.png","description":null}],"outputFilesCropped":false,"ouputFilesOwnerInfo":{"databundleVersionId":0,"dataset":null,"competition":null,"kernel":{"kernelId":446949,"kernelVersionId":1850284,"dataviewToken":"eyJhbGciOiJkaXIiLCJlbmMiOiJBMTI4Q0JDLUhTMjU2In0..1ugtJNRopElzA8ErHoSKFA.Qr6j_vIw-TgqM0BbQMgjl2c8peY9ole73p5CguQUsG-g-eRnd3KUMOZdujauvRA8JpunwDOSWkrSk9uJTZuE5BJGCZA_aabtD9ZjecEQN_lC7kDyqH2qZwX6foL6RNTKm2HObPs4tdF2kuijC41xTn7t6CieNC6lPoG9hjNjlkKg5Xf58LNb7pmRXzgkTtjowOH1WFFAQqXyKNcXBKmzD4zQEmuGZMfMXs614nfL8mtYCefYEPRWfuifKWyU6fGrqTEIN6_4fQdI8S1da-YjbASl4VWChnUiR-CfSpgnfVxzq53O4VG6oLNHFj9rwPfoe9vJ0Avk4vDsVFGjlcc-Q-yi_DAmZQq8FzIaB34_BIZHHzG3SrV3xqB5l1PJHFPjPSQwc5IoKc76_3wRpvbrrAD8D5u0gORQ0khiBy8bbgyHHgtuNslsp8_cVeUDRb9j9sJBG92J02kzrZXHsjmuhpIKKiWqBPs2Lq5nahwyXkw.WNZ88rdzvTVh2OJWW7PyXQ","scope":"vrtjso/mercari-eda-more-info-than-you-can-imagine"},"previewsDisabled":false},"pageMessages":[],"dataSources":[{"imageUrl":"https://storage.googleapis.com/kaggle-competitions/kaggle/7559/logos/thumb76_76.png","sourceUrl":"/c/mercari-price-suggestion-challenge","slug":"mercari-price-suggestion-challenge","lastUpdated":"2017-11-21T15:55:06.957Z","overview":"Can you automatically suggest product prices to online sellers?","sourceType":"competition","sourceVersionType":null,"sourceId":7559,"sourceVersionNumber":null,"maxVersionNumber":null,"descriptionMimeType":"text/markdown","deleted":false,"private":false,"privateButVisible":false,"ownerInfo":{"databundleVersionId":44327,"dataset":null,"competition":{"competitionId":7559,"dataviewToken":null,"scope":"c/mercari-price-suggestion-challenge"},"kernel":null,"previewsDisabled":true},"mountSlug":"","type":"dataSource","collapsed":false,"info":{"metrics":null,"archiveInfo":null,"archiveInfoV2":null,"blobFileInfo":null,"convertCsvInfo":null,"kernelReference":null},"settings":{"csvSettings":null,"bigQuerySettings":null,"bigQueryMirrorSettings":null,"storageSettings":null,"remoteUrlSettings":null,"remoteGithubSettings":null},"render":null,"children":[{"id":113366,"blobFileId":391528,"databundleVersionId":44327,"databundleVersionObjectType":"file","url":null,"relativePath":"../input/sample_submission_stg2.csv","creationDate":"2018-02-21T20:04:05.572Z","isDummy":false,"size":4768384,"fullPath":"../input/sample_submission_stg2.csv","previewUrl":"kernels/competition-preview/7559?relativePath=sample_submission_stg2.csv","downloadUrl":"/c/mercari-price-suggestion-challenge/download/sample_submission_stg2.csv","fileType":".csv","contentLength":4768384,"contentType":"application/zip","contentMD5":"Bof6iQUhPtK/ykNJGNtq1A==","validationErrors":null,"type":"databundleVersionObject","collapsed":false,"info":{"metrics":{"tableMetrics":{"exception":null,"rowCount":3460725},"columnMetrics":[]},"archiveInfo":null,"archiveInfoV2":null,"blobFileInfo":null,"convertCsvInfo":null,"kernelReference":null},"settings":{"csvSettings":{"delimiter":",","includesHeader":true},"bigQuerySettings":null,"bigQueryMirrorSettings":{"projectId":"kaggle-161607","datasetId":"databundle_34608_44327","tableId":"sample_submission_stg2","verified":"2018-07-07T00:52:58.6903521Z"},"storageSettings":null,"remoteUrlSettings":null,"remoteGithubSettings":null},"render":null,"children":[{"columns":[{"order":0,"originalType":"","type":"numeric","extendedType":null,"isNullable":false,"isPrimaryKey":false,"isLabel":false,"info":null,"firestorePath":null,"firestoreKey":null,"name":"test_id","description":null},{"order":1,"originalType":"","type":"numeric","extendedType":null,"isNullable":false,"isPrimaryKey":false,"isLabel":false,"info":null,"firestorePath":null,"firestoreKey":null,"name":"price","description":null}],"totalRows":null,"type":"genericTable","collapsed":true,"info":{"metrics":null,"archiveInfo":null,"archiveInfoV2":null,"blobFileInfo":null,"convertCsvInfo":null,"kernelReference":null},"settings":{"csvSettings":null,"bigQuerySettings":null,"bigQueryMirrorSettings":null,"storageSettings":null,"remoteUrlSettings":null,"remoteGithubSettings":null},"render":null,"children":[],"firestorePath":null,"firestoreKey":null,"name":"","description":null}],"firestorePath":null,"firestoreKey":null,"name":"sample_submission_stg2.csv","description":""},{"id":113363,"blobFileId":350302,"databundleVersionId":44327,"databundleVersionObjectType":"file","url":null,"relativePath":"../input/sample_submission.csv.7z","creationDate":"2017-11-14T00:56:04Z","isDummy":false,"size":174228,"fullPath":"../input/sample_submission.csv.7z","previewUrl":"kernels/competition-preview/7559?relativePath=sample_submission.csv.7z","downloadUrl":"/c/mercari-price-suggestion-challenge/download/sample_submission.csv.7z","fileType":".7z","contentLength":174228,"contentType":"application/x-7z-compressed","contentMD5":"NUZpuCw8TWe8I05FJ6Jv/w==","validationErrors":null,"type":"databundleVersionObject","collapsed":false,"info":{"metrics":null,"archiveInfo":{"totalEntries":1,"entries":[]},"archiveInfoV2":null,"blobFileInfo":null,"convertCsvInfo":null,"kernelReference":null},"settings":{"csvSettings":null,"bigQuerySettings":null,"bigQueryMirrorSettings":null,"storageSettings":null,"remoteUrlSettings":null,"remoteGithubSettings":null},"render":null,"children":[{"directory":"","fullName":"sample_submission.csv","compressedSize":9595930,"uncompressedSize":9595930,"ownerDatabundleVersionObjectId":113363,"type":"archiveEntry","collapsed":true,"info":{"metrics":null,"archiveInfo":null,"archiveInfoV2":null,"blobFileInfo":null,"convertCsvInfo":null,"kernelReference":null},"settings":{"csvSettings":null,"bigQuerySettings":null,"bigQueryMirrorSettings":null,"storageSettings":null,"remoteUrlSettings":null,"remoteGithubSettings":null},"render":null,"children":[],"firestorePath":null,"firestoreKey":null,"name":"sample_submission.csv","description":null}],"firestorePath":null,"firestoreKey":null,"name":"sample_submission.csv.7z","description":""},{"id":113367,"blobFileId":391531,"databundleVersionId":44327,"databundleVersionObjectType":"file","url":null,"relativePath":"../input/test_stg2.tsv","creationDate":"2018-02-21T20:08:23.197Z","isDummy":false,"size":294835871,"fullPath":"../input/test_stg2.tsv","previewUrl":"kernels/competition-preview/7559?relativePath=test_stg2.tsv","downloadUrl":"/c/mercari-price-suggestion-challenge/download/test_stg2.tsv","fileType":".tsv","contentLength":294835871,"contentType":"application/zip","contentMD5":"c89ause/1JL2ey0OJSKeqA==","validationErrors":null,"type":"databundleVersionObject","collapsed":false,"info":{"metrics":{"tableMetrics":{"exception":null,"rowCount":3460725},"columnMetrics":[]},"archiveInfo":null,"archiveInfoV2":null,"blobFileInfo":null,"convertCsvInfo":null,"kernelReference":null},"settings":{"csvSettings":{"delimiter":"\t","includesHeader":true},"bigQuerySettings":null,"bigQueryMirrorSettings":null,"storageSettings":null,"remoteUrlSettings":null,"remoteGithubSettings":null},"render":null,"children":[{"columns":[{"order":0,"originalType":"","type":"numeric","extendedType":null,"isNullable":false,"isPrimaryKey":false,"isLabel":false,"info":null,"firestorePath":null,"firestoreKey":null,"name":"test_id","description":null},{"order":1,"originalType":"","type":"string","extendedType":null,"isNullable":false,"isPrimaryKey":false,"isLabel":false,"info":null,"firestorePath":null,"firestoreKey":null,"name":"name","description":null},{"order":2,"originalType":"","type":"numeric","extendedType":null,"isNullable":false,"isPrimaryKey":false,"isLabel":false,"info":null,"firestorePath":null,"firestoreKey":null,"name":"item_condition_id","description":null},{"order":3,"originalType":"","type":"string","extendedType":null,"isNullable":false,"isPrimaryKey":false,"isLabel":false,"info":null,"firestorePath":null,"firestoreKey":null,"name":"category_name","description":null},{"order":4,"originalType":"","type":"string","extendedType":null,"isNullable":false,"isPrimaryKey":false,"isLabel":false,"info":null,"firestorePath":null,"firestoreKey":null,"name":"brand_name","description":null},{"order":5,"originalType":"","type":"numeric","extendedType":null,"isNullable":false,"isPrimaryKey":false,"isLabel":false,"info":null,"firestorePath":null,"firestoreKey":null,"name":"shipping","description":null},{"order":6,"originalType":"","type":"string","extendedType":null,"isNullable":false,"isPrimaryKey":false,"isLabel":false,"info":null,"firestorePath":null,"firestoreKey":null,"name":"item_description","description":null}],"totalRows":null,"type":"genericTable","collapsed":true,"info":{"metrics":null,"archiveInfo":null,"archiveInfoV2":null,"blobFileInfo":null,"convertCsvInfo":null,"kernelReference":null},"settings":{"csvSettings":null,"bigQuerySettings":null,"bigQueryMirrorSettings":null,"storageSettings":null,"remoteUrlSettings":null,"remoteGithubSettings":null},"render":null,"children":[],"firestorePath":null,"firestoreKey":null,"name":"","description":null}],"firestorePath":null,"firestoreKey":null,"name":"test_stg2.tsv","description":""},{"id":113364,"blobFileId":350303,"databundleVersionId":44327,"databundleVersionObjectType":"file","url":null,"relativePath":"../input/test.tsv.7z","creationDate":"2017-11-14T00:56:07Z","isDummy":false,"size":35617013,"fullPath":"../input/test.tsv.7z","previewUrl":"kernels/competition-preview/7559?relativePath=test.tsv.7z","downloadUrl":"/c/mercari-price-suggestion-challenge/download/test.tsv.7z","fileType":".7z","contentLength":35617013,"contentType":"application/x-7z-compressed","contentMD5":"zBPBCWB+GZNCt6pL4LhEWg==","validationErrors":null,"type":"databundleVersionObject","collapsed":false,"info":{"metrics":null,"archiveInfo":{"totalEntries":1,"entries":[]},"archiveInfoV2":null,"blobFileInfo":null,"convertCsvInfo":null,"kernelReference":null},"settings":{"csvSettings":null,"bigQuerySettings":null,"bigQueryMirrorSettings":null,"storageSettings":null,"remoteUrlSettings":null,"remoteGithubSettings":null},"render":null,"children":[{"directory":"","fullName":"test.tsv","compressedSize":154222160,"uncompressedSize":154222160,"ownerDatabundleVersionObjectId":113364,"type":"archiveEntry","collapsed":true,"info":{"metrics":null,"archiveInfo":null,"archiveInfoV2":null,"blobFileInfo":null,"convertCsvInfo":null,"kernelReference":null},"settings":{"csvSettings":null,"bigQuerySettings":null,"bigQueryMirrorSettings":null,"storageSettings":null,"remoteUrlSettings":null,"remoteGithubSettings":null},"render":null,"children":[],"firestorePath":null,"firestoreKey":null,"name":"test.tsv","description":null}],"firestorePath":null,"firestoreKey":null,"name":"test.tsv.7z","description":""},{"id":113365,"blobFileId":350304,"databundleVersionId":44327,"databundleVersionObjectType":"file","url":null,"relativePath":"../input/train.tsv.7z","creationDate":"2017-11-14T00:56:13Z","isDummy":false,"size":77912192,"fullPath":"../input/train.tsv.7z","previewUrl":"kernels/competition-preview/7559?relativePath=train.tsv.7z","downloadUrl":"/c/mercari-price-suggestion-challenge/download/train.tsv.7z","fileType":".7z","contentLength":77912192,"contentType":"application/x-7z-compressed","contentMD5":"RRn6GtmR+EE3sLPy02CPPA==","validationErrors":null,"type":"databundleVersionObject","collapsed":false,"info":{"metrics":null,"archiveInfo":{"totalEntries":1,"entries":[]},"archiveInfoV2":null,"blobFileInfo":null,"convertCsvInfo":null,"kernelReference":null},"settings":{"csvSettings":null,"bigQuerySettings":null,"bigQueryMirrorSettings":null,"storageSettings":null,"remoteUrlSettings":null,"remoteGithubSettings":null},"render":null,"children":[{"directory":"","fullName":"train.tsv","compressedSize":337809843,"uncompressedSize":337809843,"ownerDatabundleVersionObjectId":113365,"type":"archiveEntry","collapsed":true,"info":{"metrics":null,"archiveInfo":null,"archiveInfoV2":null,"blobFileInfo":null,"convertCsvInfo":null,"kernelReference":null},"settings":{"csvSettings":null,"bigQuerySettings":null,"bigQueryMirrorSettings":null,"storageSettings":null,"remoteUrlSettings":null,"remoteGithubSettings":null},"render":null,"children":[],"firestorePath":null,"firestoreKey":null,"name":"train.tsv","description":null}],"firestorePath":null,"firestoreKey":null,"name":"train.tsv.7z","description":""}],"firestorePath":null,"firestoreKey":null,"name":"Mercari Price Suggestion Challenge","description":"In this competition, you will predict the sale price of a listing based on information a user provides for this listing. This is a Kernels-only competition, the files in this Data section are downloadable just for your reference in Stage 1. Stage 2 files will only be available in Kernels and not available for download here. \n\n\n#Data fields\n\n##train.tsv, test.tsv\n\nThe files consist of a list of product listings. These files are tab-delimited. \n\n- `train_id` or `test_id` - the id of the listing\n- `name` - the title of the listing. Note that we have cleaned the data to remove text that look like prices (e.g. $20) to avoid leakage. These removed prices are represented as `[rm]`\n- `item_condition_id` - the condition of the items provided by the seller\n- `category_name` - category of the listing\n- `brand_name`\n- `price` - the price that the item was sold for. This is the target variable that you will predict. The unit is USD. This column doesn\u0027t exist in `test.tsv` since that is what you will predict. \n- `shipping` - 1 if shipping fee is paid by seller and 0 by buyer\n- `item_description` - the full description of the item. Note that we have cleaned the data to remove text that look like prices (e.g. $20) to avoid leakage. These removed prices are represented as `[rm]`\n\nPlease note that in stage 1, all the test data will be calculated on the public leaderboard. In stage 2, we will swap the `test.tsv` file to the complete test dataset that includes the private leaderboard data. \n\n##sample_submission.csv\n\nA sample submission file in the correct format. \n\n- `test_id` - matches the `test_id` column in `test.tsv`\n- `price`\n\n\n# What will be available in the 2nd stage of the competition?\n\nIn the second stage of the competition, we will re-run your selected Kernels. The following files will be swapped with new data:\n\n- `test.tsv` - this will be swapped with the complete test dataset. You have ~700K rows in stage 1 test data, and will have ~3.5M rows in the stage 2 test data. The public leaderboard data remains the same. The file name will be the same (both `test.tsv`) to ensure that your code will run. \n- `sample_submission.csv` - similar to `test.tsv`, this will be changed from ~700K rows to ~3.5M rows. The file name will remain the same. \n\nEDIT: we uploaded stage 2 files after the competition ended, 2/21/2018. They are named `sample_submission_stg2.csv` and `test_stg2.tsv`. "}],"versions":[{"id":1850284,"kernelVersionId":null,"isForkParent":false,"isNotebook":true,"languageName":"R","lastRunTime":"2017-12-02T08:19:07.827Z","linesChangedFromPrevious":0,"linesDeletedFromPrevious":10,"linesInsertedFromPrevious":14,"outputFilesTotalSizeBytes":0,"runInfo":{"dockerfileUrl":"https://github.com/Kaggle/docker-rstats/blob/master/Dockerfile","dockerHubUrl":"https://registry.hub.docker.com/u/kaggle/rstats/","dockerImageId":"sha256:9ea6ab1a817a1c4f71202acf3ca1f13ed730b1ba200a9514ac3a2f628fd6cbca","dockerImageName":"gcr.io/kaggle-images/rstats","exitCode":0,"failureMessage":"","isValidStatus":true,"runTimeSeconds":1859.222414435,"succeeded":true,"timeoutExceeded":false,"usedAllSpace":false},"status":"complete","title":"Mercari EDA - More Info Than You Can Imagine","url":"/vrtjso/mercari-eda-more-info-than-you-can-imagine?scriptVersionId=1850284","versionNumber":16,"hasVersionNumber":true,"isRedacted":false,"versionAuthor":null},{"id":1829565,"kernelVersionId":null,"isForkParent":false,"isNotebook":true,"languageName":"R","lastRunTime":"2017-11-29T08:09:55.863Z","linesChangedFromPrevious":0,"linesDeletedFromPrevious":5,"linesInsertedFromPrevious":11,"outputFilesTotalSizeBytes":0,"runInfo":{"dockerfileUrl":"https://github.com/Kaggle/docker-rstats/blob/master/Dockerfile","dockerHubUrl":"https://registry.hub.docker.com/u/kaggle/rstats/","dockerImageId":"sha256:9ea6ab1a817a1c4f71202acf3ca1f13ed730b1ba200a9514ac3a2f628fd6cbca","dockerImageName":"gcr.io/kaggle-images/rstats","exitCode":0,"failureMessage":"","isValidStatus":true,"runTimeSeconds":1450.84252763004,"succeeded":true,"timeoutExceeded":false,"usedAllSpace":false},"status":"complete","title":"Mercari EDA - More Info Than You Can Imagine","url":"/vrtjso/mercari-eda-more-info-than-you-can-imagine?scriptVersionId=1829565","versionNumber":15,"hasVersionNumber":true,"isRedacted":false,"versionAuthor":null},{"id":1816350,"kernelVersionId":null,"isForkParent":false,"isNotebook":true,"languageName":"R","lastRunTime":"2017-11-27T09:25:48.85Z","linesChangedFromPrevious":0,"linesDeletedFromPrevious":6,"linesInsertedFromPrevious":5,"outputFilesTotalSizeBytes":0,"runInfo":{"dockerfileUrl":"https://github.com/Kaggle/docker-rstats/blob/master/Dockerfile","dockerHubUrl":"https://registry.hub.docker.com/u/kaggle/rstats/","dockerImageId":"sha256:9ea6ab1a817a1c4f71202acf3ca1f13ed730b1ba200a9514ac3a2f628fd6cbca","dockerImageName":"gcr.io/kaggle-images/rstats","exitCode":0,"failureMessage":"","isValidStatus":true,"runTimeSeconds":473.743084303045,"succeeded":true,"timeoutExceeded":false,"usedAllSpace":false},"status":"complete","title":"Mercari EDA - More Info Than You Can Imagine","url":"/vrtjso/mercari-eda-more-info-than-you-can-imagine?scriptVersionId=1816350","versionNumber":14,"hasVersionNumber":true,"isRedacted":false,"versionAuthor":null},{"id":1805272,"kernelVersionId":null,"isForkParent":false,"isNotebook":true,"languageName":"R","lastRunTime":"2017-11-25T07:50:40.523Z","linesChangedFromPrevious":0,"linesDeletedFromPrevious":3,"linesInsertedFromPrevious":6,"outputFilesTotalSizeBytes":0,"runInfo":{"dockerfileUrl":"https://github.com/Kaggle/docker-rstats/blob/master/Dockerfile","dockerHubUrl":"https://registry.hub.docker.com/u/kaggle/rstats/","dockerImageId":"sha256:9ea6ab1a817a1c4f71202acf3ca1f13ed730b1ba200a9514ac3a2f628fd6cbca","dockerImageName":"gcr.io/kaggle-images/rstats","exitCode":0,"failureMessage":"","isValidStatus":true,"runTimeSeconds":1213.16779628699,"succeeded":true,"timeoutExceeded":false,"usedAllSpace":false},"status":"complete","title":"Mercari EDA - More Info Than You Can Imagine","url":"/vrtjso/mercari-eda-more-info-than-you-can-imagine?scriptVersionId=1805272","versionNumber":13,"hasVersionNumber":true,"isRedacted":false,"versionAuthor":null},{"id":1804831,"kernelVersionId":null,"isForkParent":false,"isNotebook":true,"languageName":"R","lastRunTime":"2017-11-25T05:15:25.273Z","linesChangedFromPrevious":0,"linesDeletedFromPrevious":12,"linesInsertedFromPrevious":88,"outputFilesTotalSizeBytes":0,"runInfo":{"dockerfileUrl":"https://github.com/Kaggle/docker-rstats/blob/master/Dockerfile","dockerHubUrl":"https://registry.hub.docker.com/u/kaggle/rstats/","dockerImageId":"sha256:9ea6ab1a817a1c4f71202acf3ca1f13ed730b1ba200a9514ac3a2f628fd6cbca","dockerImageName":"gcr.io/kaggle-images/rstats","exitCode":0,"failureMessage":"","isValidStatus":true,"runTimeSeconds":7943.896383481,"succeeded":true,"timeoutExceeded":false,"usedAllSpace":false},"status":"complete","title":"Mercari EDA - More Info Than You Can Imagine","url":"/vrtjso/mercari-eda-more-info-than-you-can-imagine?scriptVersionId=1804831","versionNumber":12,"hasVersionNumber":true,"isRedacted":false,"versionAuthor":null},{"id":1796274,"kernelVersionId":null,"isForkParent":false,"isNotebook":true,"languageName":"R","lastRunTime":"2017-11-23T19:18:08.783Z","linesChangedFromPrevious":0,"linesDeletedFromPrevious":20,"linesInsertedFromPrevious":31,"outputFilesTotalSizeBytes":0,"runInfo":{"dockerfileUrl":"https://github.com/Kaggle/docker-rstats/blob/master/Dockerfile","dockerHubUrl":"https://registry.hub.docker.com/u/kaggle/rstats/","dockerImageId":"sha256:9ea6ab1a817a1c4f71202acf3ca1f13ed730b1ba200a9514ac3a2f628fd6cbca","dockerImageName":"gcr.io/kaggle-images/rstats","exitCode":0,"failureMessage":"","isValidStatus":true,"runTimeSeconds":3040.738017,"succeeded":true,"timeoutExceeded":false,"usedAllSpace":false},"status":"complete","title":"Mercari EDA","url":"/vrtjso/mercari-eda-more-info-than-you-can-imagine?scriptVersionId=1796274","versionNumber":11,"hasVersionNumber":true,"isRedacted":false,"versionAuthor":null},{"id":1795372,"kernelVersionId":null,"isForkParent":false,"isNotebook":true,"languageName":"R","lastRunTime":"2017-11-23T16:04:10.477Z","linesChangedFromPrevious":0,"linesDeletedFromPrevious":28,"linesInsertedFromPrevious":51,"outputFilesTotalSizeBytes":0,"runInfo":{"dockerfileUrl":"https://github.com/Kaggle/docker-rstats/blob/master/Dockerfile","dockerHubUrl":"https://registry.hub.docker.com/u/kaggle/rstats/","dockerImageId":"sha256:9ea6ab1a817a1c4f71202acf3ca1f13ed730b1ba200a9514ac3a2f628fd6cbca","dockerImageName":"gcr.io/kaggle-images/rstats","exitCode":0,"failureMessage":"","isValidStatus":true,"runTimeSeconds":2394.77873326,"succeeded":true,"timeoutExceeded":false,"usedAllSpace":false},"status":"complete","title":"Mercari EDA","url":"/vrtjso/mercari-eda-more-info-than-you-can-imagine?scriptVersionId=1795372","versionNumber":10,"hasVersionNumber":true,"isRedacted":false,"versionAuthor":null},{"id":1792819,"kernelVersionId":null,"isForkParent":false,"isNotebook":true,"languageName":"R","lastRunTime":"2017-11-23T08:23:41.897Z","linesChangedFromPrevious":0,"linesDeletedFromPrevious":5,"linesInsertedFromPrevious":54,"outputFilesTotalSizeBytes":0,"runInfo":{"dockerfileUrl":"https://github.com/Kaggle/docker-rstats/blob/master/Dockerfile","dockerHubUrl":"https://registry.hub.docker.com/u/kaggle/rstats/","dockerImageId":"sha256:9ea6ab1a817a1c4f71202acf3ca1f13ed730b1ba200a9514ac3a2f628fd6cbca","dockerImageName":"gcr.io/kaggle-images/rstats","exitCode":0,"failureMessage":"","isValidStatus":true,"runTimeSeconds":3552.105976613,"succeeded":true,"timeoutExceeded":false,"usedAllSpace":false},"status":"complete","title":"Mercari EDA","url":"/vrtjso/mercari-eda-more-info-than-you-can-imagine?scriptVersionId=1792819","versionNumber":9,"hasVersionNumber":true,"isRedacted":false,"versionAuthor":null},{"id":1792126,"kernelVersionId":null,"isForkParent":false,"isNotebook":true,"languageName":"R","lastRunTime":"2017-11-23T05:57:08.553Z","linesChangedFromPrevious":0,"linesDeletedFromPrevious":34,"linesInsertedFromPrevious":37,"outputFilesTotalSizeBytes":0,"runInfo":{"dockerfileUrl":"https://github.com/Kaggle/docker-rstats/blob/master/Dockerfile","dockerHubUrl":"https://registry.hub.docker.com/u/kaggle/rstats/","dockerImageId":"sha256:9ea6ab1a817a1c4f71202acf3ca1f13ed730b1ba200a9514ac3a2f628fd6cbca","dockerImageName":"gcr.io/kaggle-images/rstats","exitCode":0,"failureMessage":"","isValidStatus":true,"runTimeSeconds":1038.50278132223,"succeeded":true,"timeoutExceeded":false,"usedAllSpace":false},"status":"complete","title":"Mercari EDA","url":"/vrtjso/mercari-eda-more-info-than-you-can-imagine?scriptVersionId=1792126","versionNumber":8,"hasVersionNumber":true,"isRedacted":false,"versionAuthor":null},{"id":1791637,"kernelVersionId":null,"isForkParent":false,"isNotebook":true,"languageName":"R","lastRunTime":"2017-11-23T03:32:16.207Z","linesChangedFromPrevious":0,"linesDeletedFromPrevious":1,"linesInsertedFromPrevious":16,"outputFilesTotalSizeBytes":0,"runInfo":{"dockerfileUrl":"https://github.com/Kaggle/docker-rstats/blob/master/Dockerfile","dockerHubUrl":"https://registry.hub.docker.com/u/kaggle/rstats/","dockerImageId":"sha256:9ea6ab1a817a1c4f71202acf3ca1f13ed730b1ba200a9514ac3a2f628fd6cbca","dockerImageName":"gcr.io/kaggle-images/rstats","exitCode":0,"failureMessage":"","isValidStatus":true,"runTimeSeconds":6900.121127933,"succeeded":true,"timeoutExceeded":false,"usedAllSpace":false},"status":"complete","title":"Mercari EDA","url":"/vrtjso/mercari-eda-more-info-than-you-can-imagine?scriptVersionId=1791637","versionNumber":7,"hasVersionNumber":true,"isRedacted":false,"versionAuthor":null},{"id":1786969,"kernelVersionId":null,"isForkParent":false,"isNotebook":true,"languageName":"R","lastRunTime":"2017-11-22T08:18:08.36Z","linesChangedFromPrevious":0,"linesDeletedFromPrevious":2,"linesInsertedFromPrevious":1,"outputFilesTotalSizeBytes":0,"runInfo":{"dockerfileUrl":"https://github.com/Kaggle/docker-rstats/blob/master/Dockerfile","dockerHubUrl":"https://registry.hub.docker.com/u/kaggle/rstats/","dockerImageId":"sha256:9ea6ab1a817a1c4f71202acf3ca1f13ed730b1ba200a9514ac3a2f628fd6cbca","dockerImageName":"gcr.io/kaggle-images/rstats","exitCode":0,"failureMessage":"","isValidStatus":true,"runTimeSeconds":227.062689464015,"succeeded":true,"timeoutExceeded":false,"usedAllSpace":false},"status":"complete","title":"Mercari EDA","url":"/vrtjso/mercari-eda-more-info-than-you-can-imagine?scriptVersionId=1786969","versionNumber":6,"hasVersionNumber":true,"isRedacted":false,"versionAuthor":null},{"id":1786590,"kernelVersionId":null,"isForkParent":false,"isNotebook":true,"languageName":"R","lastRunTime":"2017-11-22T06:34:14.673Z","linesChangedFromPrevious":0,"linesDeletedFromPrevious":15,"linesInsertedFromPrevious":37,"outputFilesTotalSizeBytes":0,"runInfo":{"dockerfileUrl":"https://github.com/Kaggle/docker-rstats/blob/master/Dockerfile","dockerHubUrl":"https://registry.hub.docker.com/u/kaggle/rstats/","dockerImageId":"sha256:9ea6ab1a817a1c4f71202acf3ca1f13ed730b1ba200a9514ac3a2f628fd6cbca","dockerImageName":"gcr.io/kaggle-images/rstats","exitCode":0,"failureMessage":"","isValidStatus":true,"runTimeSeconds":4541.56368992105,"succeeded":true,"timeoutExceeded":false,"usedAllSpace":false},"status":"complete","title":"Mercari EDA","url":"/vrtjso/mercari-eda-more-info-than-you-can-imagine?scriptVersionId=1786590","versionNumber":5,"hasVersionNumber":true,"isRedacted":false,"versionAuthor":null},{"id":1785491,"kernelVersionId":null,"isForkParent":false,"isNotebook":true,"languageName":"R","lastRunTime":"2017-11-22T01:19:33.43Z","linesChangedFromPrevious":0,"linesDeletedFromPrevious":16,"linesInsertedFromPrevious":49,"outputFilesTotalSizeBytes":0,"runInfo":{"dockerfileUrl":"https://github.com/Kaggle/docker-rstats/blob/master/Dockerfile","dockerHubUrl":"https://registry.hub.docker.com/u/kaggle/rstats/","dockerImageId":"sha256:9ea6ab1a817a1c4f71202acf3ca1f13ed730b1ba200a9514ac3a2f628fd6cbca","dockerImageName":"gcr.io/kaggle-images/rstats","exitCode":0,"failureMessage":"","isValidStatus":true,"runTimeSeconds":5323.63856452005,"succeeded":true,"timeoutExceeded":false,"usedAllSpace":false},"status":"complete","title":"Mercari EDA","url":"/vrtjso/mercari-eda-more-info-than-you-can-imagine?scriptVersionId=1785491","versionNumber":4,"hasVersionNumber":true,"isRedacted":false,"versionAuthor":null},{"id":1784653,"kernelVersionId":null,"isForkParent":false,"isNotebook":true,"languageName":"R","lastRunTime":"2017-11-21T20:57:07.843Z","linesChangedFromPrevious":0,"linesDeletedFromPrevious":1,"linesInsertedFromPrevious":2,"outputFilesTotalSizeBytes":0,"runInfo":{"dockerfileUrl":"https://github.com/Kaggle/docker-rstats/blob/master/Dockerfile","dockerHubUrl":"https://registry.hub.docker.com/u/kaggle/rstats/","dockerImageId":"sha256:9ea6ab1a817a1c4f71202acf3ca1f13ed730b1ba200a9514ac3a2f628fd6cbca","dockerImageName":"gcr.io/kaggle-images/rstats","exitCode":0,"failureMessage":"","isValidStatus":true,"runTimeSeconds":8440.795503841,"succeeded":true,"timeoutExceeded":false,"usedAllSpace":false},"status":"complete","title":"Mercari EDA","url":"/vrtjso/mercari-eda-more-info-than-you-can-imagine?scriptVersionId=1784653","versionNumber":3,"hasVersionNumber":true,"isRedacted":false,"versionAuthor":null},{"id":1784217,"kernelVersionId":null,"isForkParent":false,"isNotebook":true,"languageName":"R","lastRunTime":"2017-11-21T19:18:31.623Z","linesChangedFromPrevious":0,"linesDeletedFromPrevious":15,"linesInsertedFromPrevious":28,"outputFilesTotalSizeBytes":0,"runInfo":{"dockerfileUrl":"https://github.com/Kaggle/docker-rstats/blob/master/Dockerfile","dockerHubUrl":"https://registry.hub.docker.com/u/kaggle/rstats/","dockerImageId":"sha256:9ea6ab1a817a1c4f71202acf3ca1f13ed730b1ba200a9514ac3a2f628fd6cbca","dockerImageName":"gcr.io/kaggle-images/rstats","exitCode":0,"failureMessage":"","isValidStatus":true,"runTimeSeconds":1741.17053413787,"succeeded":true,"timeoutExceeded":false,"usedAllSpace":false},"status":"complete","title":"Mercari EDA","url":"/vrtjso/mercari-eda-more-info-than-you-can-imagine?scriptVersionId=1784217","versionNumber":2,"hasVersionNumber":true,"isRedacted":false,"versionAuthor":null},{"id":1783908,"kernelVersionId":null,"isForkParent":false,"isNotebook":true,"languageName":"R","lastRunTime":"2017-11-21T18:22:39.96Z","linesChangedFromPrevious":0,"linesDeletedFromPrevious":0,"linesInsertedFromPrevious":70,"outputFilesTotalSizeBytes":0,"runInfo":{"dockerfileUrl":"https://github.com/Kaggle/docker-rstats/blob/master/Dockerfile","dockerHubUrl":"https://registry.hub.docker.com/u/kaggle/rstats/","dockerImageId":"sha256:9ea6ab1a817a1c4f71202acf3ca1f13ed730b1ba200a9514ac3a2f628fd6cbca","dockerImageName":"gcr.io/kaggle-images/rstats","exitCode":0,"failureMessage":"","isValidStatus":true,"runTimeSeconds":2648.88815198402,"succeeded":true,"timeoutExceeded":false,"usedAllSpace":false},"status":"complete","title":"Mercari EDA","url":"/vrtjso/mercari-eda-more-info-than-you-can-imagine?scriptVersionId=1783908","versionNumber":1,"hasVersionNumber":true,"isRedacted":false,"versionAuthor":null}],"categories":{"categories":[{"id":13102,"name":"beginner","displayName":"beginner","fullPath":"audience \u003e beginner","listingUrl":"/kernels?sortBy=relevance\u0026group=all\u0026search=tag%3A%27beginner%27","tagUrl":"/tags/beginner","fontAwesomeIcon":null,"description":null,"isInherited":false,"datasetCount":117,"competitionCount":1,"scriptCount":10820,"totalCount":10938},{"id":13208,"name":"data visualization","displayName":"data visualization","fullPath":"analysis \u003e data visualization","listingUrl":"/kernels?sortBy=relevance\u0026group=all\u0026search=tag%3A%27data visualization%27","tagUrl":"/tags/data-visualization","fontAwesomeIcon":null,"description":null,"isInherited":false,"datasetCount":170,"competitionCount":0,"scriptCount":7233,"totalCount":7403},{"id":13201,"name":"eda","displayName":"EDA","fullPath":"analysis \u003e eda","listingUrl":"/kernels?sortBy=relevance\u0026group=all\u0026search=tag%3A%27eda%27","tagUrl":"/tags/eda","fontAwesomeIcon":null,"description":null,"isInherited":false,"datasetCount":66,"competitionCount":0,"scriptCount":4159,"totalCount":4225}],"type":"script"},"submitToCompetitionInfo":null,"downloadAllFilesUrl":"/kernels/svzip/1850284","submission":null,"menuLinks":[{"href":"/vrtjso/mercari-eda-more-info-than-you-can-imagine/notebook","text":"Notebook","title":"Notebook","tab":"notebook","count":null,"showZeroCountExplicitly":false,"reportEventCategory":null,"reportEventType":null},{"href":"/vrtjso/mercari-eda-more-info-than-you-can-imagine/code","text":"Code","title":"Code","tab":"code","count":null,"showZeroCountExplicitly":false,"reportEventCategory":null,"reportEventType":null},{"href":"/vrtjso/mercari-eda-more-info-than-you-can-imagine/data","text":"Data","title":"Data","tab":"data","count":1,"showZeroCountExplicitly":false,"reportEventCategory":null,"reportEventType":null},{"href":"/vrtjso/mercari-eda-more-info-than-you-can-imagine/output","text":"Output","title":"Output","tab":"output","count":null,"showZeroCountExplicitly":false,"reportEventCategory":null,"reportEventType":null},{"href":"/vrtjso/mercari-eda-more-info-than-you-can-imagine/log","text":"Log","title":"Log","tab":"log","count":null,"showZeroCountExplicitly":false,"reportEventCategory":null,"reportEventType":null},{"href":"/vrtjso/mercari-eda-more-info-than-you-can-imagine/comments","text":"Comments","title":"Comments","tab":"comments","count":20,"showZeroCountExplicitly":true,"reportEventCategory":null,"reportEventType":null}],"rightMenuLinks":[],"callToAction":{"href":"/kernels/fork-version/1850284","text":"Fork Notebook","title":"Fork Notebook","tab":null,"count":null,"showZeroCountExplicitly":false,"reportEventCategory":"kernels","reportEventType":"anonymousKernelForkCreation"},"voteButton":{"totalVotes":139,"hasAlreadyVotedUp":false,"hasAlreadyVotedDown":false,"canUpvote":true,"canDownvote":false,"voteUpUrl":"/kernels/vote?id=446949","voteDownUrl":null,"voters":[{"avatarThumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/3258-gr.jpg","displayName":"William Cukierski","profileUrl":"/wcukierski","tier":"Staff","tierInt":5,"userId":3258,"userName":"wcukierski"},{"avatarThumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/4126-gr.jpg","displayName":"spinach","profileUrl":"/vspinu","tier":"Expert","tierInt":2,"userId":4126,"userName":"vspinu"},{"avatarThumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/60938-kg.png","displayName":"Andrey Vykhodtsev","profileUrl":"/vykhand","tier":"Expert","tierInt":2,"userId":60938,"userName":"vykhand"},{"avatarThumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/87114-fb.jpg","displayName":"Santiago Mota","profileUrl":"/santiagomota","tier":"Master","tierInt":3,"userId":87114,"userName":"santiagomota"},{"avatarThumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/89435-kg.png","displayName":"kxx","profileUrl":"/kailex","tier":"Master","tierInt":3,"userId":89435,"userName":"kailex"},{"avatarThumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/101136-kg.jpg","displayName":"Ceshine Lee","profileUrl":"/ceshine","tier":"Expert","tierInt":2,"userId":101136,"userName":"ceshine"},{"avatarThumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/103225-kg.jpg","displayName":"Bukun","profileUrl":"/ambarish","tier":"Master","tierInt":3,"userId":103225,"userName":"ambarish"},{"avatarThumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/default-thumb.png","displayName":"Minh Phan","profileUrl":"/minhphan0","tier":"Novice","tierInt":0,"userId":116652,"userName":"minhphan0"},{"avatarThumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/122713-kg.jpg","displayName":"RaPy","profileUrl":"/ram1angadala","tier":"Contributor","tierInt":1,"userId":122713,"userName":"ram1angadala"},{"avatarThumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/128750-fb.jpg","displayName":"Selfish Gene","profileUrl":"/selfishgene","tier":"Master","tierInt":3,"userId":128750,"userName":"selfishgene"},{"avatarThumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/137671-gp.jpg","displayName":"Gary Garrison","profileUrl":"/garrison","tier":"Contributor","tierInt":1,"userId":137671,"userName":"garrison"},{"avatarThumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/150338-kg.jpg","displayName":"Yifan Xie","profileUrl":"/yifanxie","tier":"Master","tierInt":3,"userId":150338,"userName":"yifanxie"},{"avatarThumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/168781-gp.jpg","displayName":"uha1","profileUrl":"/uha1168781","tier":"Novice","tierInt":0,"userId":168781,"userName":"uha1168781"},{"avatarThumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/170382-kg.jpg","displayName":"Akira Sasaki","profileUrl":"/hikomimo","tier":"Expert","tierInt":2,"userId":170382,"userName":"hikomimo"},{"avatarThumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/197449-kg.JPG","displayName":"Kariru","profileUrl":"/benybrahim","tier":"Contributor","tierInt":1,"userId":197449,"userName":"benybrahim"},{"avatarThumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/default-thumb.png","displayName":"[Deleted User]","profileUrl":"/del=df8f74683636a4d4","tier":"Novice","tierInt":0,"userId":199992,"userName":"del=df8f74683636a4d4"},{"avatarThumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/209449-fb.jpg","displayName":"Takashi  Kato","profileUrl":"/takashikato0","tier":"Novice","tierInt":0,"userId":209449,"userName":"takashikato0"},{"avatarThumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/276462-gr.jpg","displayName":"F.J.Martinez-de-Pison","profileUrl":"/jpison","tier":"Expert","tierInt":2,"userId":276462,"userName":"jpison"},{"avatarThumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/280325-fb.jpg","displayName":"幼儿园园长","profileUrl":"/doubii","tier":"Novice","tierInt":0,"userId":280325,"userName":"doubii"},{"avatarThumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/287058-kg.png","displayName":"sgw2017","profileUrl":"/sgwgao","tier":"Novice","tierInt":0,"userId":287058,"userName":"sgwgao"},{"avatarThumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/287764-kg.jpg","displayName":"gl335","profileUrl":"/guoqiangliang","tier":"Novice","tierInt":0,"userId":287764,"userName":"guoqiangliang"},{"avatarThumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/default-thumb.png","displayName":"Ethan","profileUrl":"/ethan15","tier":"Novice","tierInt":0,"userId":306722,"userName":"ethan15"},{"avatarThumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/default-thumb.png","displayName":"Peter Hahn","profileUrl":"/pehahn","tier":"Contributor","tierInt":1,"userId":316150,"userName":"pehahn"},{"avatarThumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/default-thumb.png","displayName":"12330424_郑卓彬_计应2班","profileUrl":"/user1233042421","tier":"Novice","tierInt":0,"userId":317008,"userName":"user1233042421"},{"avatarThumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/321384-kg.jpg","displayName":"JGeek","profileUrl":"/jackietseng","tier":"Novice","tierInt":0,"userId":321384,"userName":"jackietseng"},{"avatarThumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/329613-fb.jpg","displayName":"Khaled Fayed","profileUrl":"/khaledfayed","tier":"Novice","tierInt":0,"userId":329613,"userName":"khaledfayed"},{"avatarThumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/331718-kg.png","displayName":"Matt Motoki","profileUrl":"/mmotoki","tier":"Master","tierInt":3,"userId":331718,"userName":"mmotoki"},{"avatarThumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/default-thumb.png","displayName":"Amber Song","profileUrl":"/zizhensong","tier":"Novice","tierInt":0,"userId":334903,"userName":"zizhensong"},{"avatarThumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/default-thumb.png","displayName":"David.S","profileUrl":"/yuanwj3","tier":"Novice","tierInt":0,"userId":346674,"userName":"yuanwj3"},{"avatarThumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/default-thumb.png","displayName":"Mostafa","profileUrl":"/mtbb49","tier":"Novice","tierInt":0,"userId":367316,"userName":"mtbb49"},{"avatarThumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/default-thumb.png","displayName":"EugenyMelamud","profileUrl":"/eugenymelamud","tier":"Novice","tierInt":0,"userId":368704,"userName":"eugenymelamud"},{"avatarThumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/373227-kg.png","displayName":"datalover","profileUrl":"/kaggledmimi","tier":"Novice","tierInt":0,"userId":373227,"userName":"kaggledmimi"},{"avatarThumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/379860-fb.jpg","displayName":"Troy Walters","profileUrl":"/captcalculator","tier":"Master","tierInt":3,"userId":379860,"userName":"captcalculator"},{"avatarThumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/382794-gr.jpg","displayName":"Maverix","profileUrl":"/mohitmohan","tier":"Master","tierInt":3,"userId":382794,"userName":"mohitmohan"},{"avatarThumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/386999-gr.jpg","displayName":"RaviMandal","profileUrl":"/sitworld","tier":"Novice","tierInt":0,"userId":386999,"userName":"sitworld"},{"avatarThumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/default-thumb.png","displayName":"chujiaoli","profileUrl":"/lichujiao","tier":"Novice","tierInt":0,"userId":389471,"userName":"lichujiao"},{"avatarThumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/400057-gp.jpg","displayName":"Ingram2k","profileUrl":"/pphan85","tier":"Novice","tierInt":0,"userId":400057,"userName":"pphan85"},{"avatarThumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/400262-fb.jpg","displayName":"Alexandru Papiu","profileUrl":"/apapiu","tier":"Master","tierInt":3,"userId":400262,"userName":"apapiu"},{"avatarThumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/401063-gr.jpg","displayName":"rmikedown","profileUrl":"/rmikedown","tier":"Contributor","tierInt":1,"userId":401063,"userName":"rmikedown"},{"avatarThumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/401893-kg.jpg","displayName":"ldiperna","profileUrl":"/ldiperna","tier":"Contributor","tierInt":1,"userId":401893,"userName":"ldiperna"},{"avatarThumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/403588-gr.jpg","displayName":"RodneyRick","profileUrl":"/rodneyrick","tier":"Novice","tierInt":0,"userId":403588,"userName":"rodneyrick"},{"avatarThumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/417337-fb.jpg","displayName":"Bojan Tunguz","profileUrl":"/tunguz","tier":"Grandmaster","tierInt":4,"userId":417337,"userName":"tunguz"},{"avatarThumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/431785-kg.jpg","displayName":"RaiderX","profileUrl":"/raiderx","tier":"Contributor","tierInt":1,"userId":431785,"userName":"raiderx"},{"avatarThumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/456197-gp.jpg","displayName":"Mohammed Ali","profileUrl":"/mohammedali","tier":"Novice","tierInt":0,"userId":456197,"userName":"mohammedali"},{"avatarThumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/default-thumb.png","displayName":"moefasa","profileUrl":"/moefasa","tier":"Contributor","tierInt":1,"userId":471231,"userName":"moefasa"},{"avatarThumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/479917-gp.jpg","displayName":"chocolatelover","profileUrl":"/annshibithomas","tier":"Novice","tierInt":0,"userId":479917,"userName":"annshibithomas"},{"avatarThumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/488493-gp.jpg","displayName":"AkhileshR.Kumar","profileUrl":"/rakhilesh","tier":"Novice","tierInt":0,"userId":488493,"userName":"rakhilesh"},{"avatarThumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/509597-kg.jpg","displayName":"TienDuc Cao","profileUrl":"/duccao","tier":"Contributor","tierInt":1,"userId":509597,"userName":"duccao"},{"avatarThumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/516548-kg.jpg","displayName":"Alexander Kireev","profileUrl":"/alexanderkireev","tier":"Expert","tierInt":2,"userId":516548,"userName":"alexanderkireev"},{"avatarThumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/521568-fb.jpg","displayName":"JamesWillcox","profileUrl":"/analyticalaussie","tier":"Novice","tierInt":0,"userId":521568,"userName":"analyticalaussie"},{"avatarThumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/528630-gp.jpg","displayName":"HuyenNguyen","profileUrl":"/huyenvyvy","tier":"Expert","tierInt":2,"userId":528630,"userName":"huyenvyvy"},{"avatarThumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/569150-kg.jpg","displayName":"YudaiUshiro","profileUrl":"/behindkun","tier":"Expert","tierInt":2,"userId":569150,"userName":"behindkun"},{"avatarThumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/581494-kg.jpg","displayName":"PrinceThomas","profileUrl":"/princethomas","tier":"Expert","tierInt":2,"userId":581494,"userName":"princethomas"},{"avatarThumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/587388-kg.jpg","displayName":"Lingzhi","profileUrl":"/vrtjso","tier":"Master","tierInt":3,"userId":587388,"userName":"vrtjso"},{"avatarThumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/590653-fb.jpg","displayName":"Zeeshan-ul-hassan Usmani","profileUrl":"/zusmani","tier":"Expert","tierInt":2,"userId":590653,"userName":"zusmani"},{"avatarThumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/614100-gp.jpg","displayName":"phare0","profileUrl":"/phare0","tier":"Novice","tierInt":0,"userId":614100,"userName":"phare0"},{"avatarThumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/default-thumb.png","displayName":"Mileta","profileUrl":"/mileta1976","tier":"Contributor","tierInt":1,"userId":627288,"userName":"mileta1976"},{"avatarThumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/641277-kg.jpg","displayName":"Oleg Chislov","profileUrl":"/chislov","tier":"Expert","tierInt":2,"userId":641277,"userName":"chislov"},{"avatarThumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/654950-fb.jpg","displayName":"Hervind","profileUrl":"/hervind","tier":"Contributor","tierInt":1,"userId":654950,"userName":"hervind"},{"avatarThumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/662963-kg.jpg","displayName":"DSangeetha","profileUrl":"/devisangeetha","tier":"Expert","tierInt":2,"userId":662963,"userName":"devisangeetha"},{"avatarThumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/default-thumb.png","displayName":"NamwooPark","profileUrl":"/hipetz","tier":"Novice","tierInt":0,"userId":684757,"userName":"hipetz"},{"avatarThumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/693089-kg.jpg","displayName":"Vivek Yadav","profileUrl":"/vivekyadavofficial","tier":"Contributor","tierInt":1,"userId":693089,"userName":"vivekyadavofficial"},{"avatarThumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/694332-fb.jpg","displayName":"AnkitSingh","profileUrl":"/ankitsingh1209","tier":"Novice","tierInt":0,"userId":694332,"userName":"ankitsingh1209"},{"avatarThumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/704745-kg.jpg","displayName":"Yuichi Fujikawa","profileUrl":"/fujiyuu75","tier":"Expert","tierInt":2,"userId":704745,"userName":"fujiyuu75"},{"avatarThumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/727797-kg.jpg","displayName":"Anisotropic","profileUrl":"/arthurtok","tier":"Grandmaster","tierInt":4,"userId":727797,"userName":"arthurtok"},{"avatarThumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/735763-kg.jpg","displayName":"Nishan","profileUrl":"/nishan89","tier":"Novice","tierInt":0,"userId":735763,"userName":"nishan89"},{"avatarThumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/default-thumb.png","displayName":"Denys Kiriakov","profileUrl":"/denyskiriakov","tier":"Novice","tierInt":0,"userId":746566,"userName":"denyskiriakov"},{"avatarThumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/749078-fb.jpg","displayName":"AnılCorut","profileUrl":"/anilcorut","tier":"Novice","tierInt":0,"userId":749078,"userName":"anilcorut"},{"avatarThumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/763007-kg.jpg","displayName":"Rohit Agarwal","profileUrl":"/rohitagarwal","tier":"Contributor","tierInt":1,"userId":763007,"userName":"rohitagarwal"},{"avatarThumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/default-thumb.png","displayName":"Román","profileUrl":"/moshis","tier":"Novice","tierInt":0,"userId":763649,"userName":"moshis"},{"avatarThumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/768112-kg.jpg","displayName":"elkunah4","profileUrl":"/engant","tier":"Contributor","tierInt":1,"userId":768112,"userName":"engant"},{"avatarThumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/781435-kg.jpg","displayName":"tivoli2","profileUrl":"/tivoli2","tier":"Expert","tierInt":2,"userId":781435,"userName":"tivoli2"},{"avatarThumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/829491-kg.jpg","displayName":"MikeAltonji","profileUrl":"/maltonji","tier":"Contributor","tierInt":1,"userId":829491,"userName":"maltonji"},{"avatarThumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/840166-kg.jpg","displayName":"Jonathan Nathan","profileUrl":"/yonatan365","tier":"Contributor","tierInt":1,"userId":840166,"userName":"yonatan365"},{"avatarThumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/849992-kg.png","displayName":"jatin raina","profileUrl":"/jatinraina","tier":"Novice","tierInt":0,"userId":849992,"userName":"jatinraina"},{"avatarThumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/857124-gp.jpg","displayName":"ClémentDubois","profileUrl":"/clementd","tier":"Novice","tierInt":0,"userId":857124,"userName":"clementd"},{"avatarThumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/866788-kg.jpg","displayName":"nicapotato","profileUrl":"/nicapotato","tier":"Master","tierInt":3,"userId":866788,"userName":"nicapotato"},{"avatarThumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/884234-kg.jpg","displayName":"Gunny Liu","profileUrl":"/gunnyliu","tier":"Novice","tierInt":0,"userId":884234,"userName":"gunnyliu"},{"avatarThumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/default-thumb.png","displayName":"Erlich Bachman","profileUrl":"/manishsaraswat","tier":"Novice","tierInt":0,"userId":914002,"userName":"manishsaraswat"},{"avatarThumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/914033-gr.jpg","displayName":"Hakky","profileUrl":"/sthakky","tier":"Novice","tierInt":0,"userId":914033,"userName":"sthakky"},{"avatarThumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/default-thumb.png","displayName":"Gopala KR","profileUrl":"/gopalakr","tier":"Contributor","tierInt":1,"userId":922577,"userName":"gopalakr"},{"avatarThumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/default-thumb.png","displayName":"KohilaSaha","profileUrl":"/kohilas","tier":"Novice","tierInt":0,"userId":946018,"userName":"kohilas"},{"avatarThumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/953369-gr.jpg","displayName":"HimanshuDeo","profileUrl":"/hdeo1997","tier":"Novice","tierInt":0,"userId":953369,"userName":"hdeo1997"},{"avatarThumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/default-thumb.png","displayName":"xuqina","profileUrl":"/xuqina","tier":"Novice","tierInt":0,"userId":963774,"userName":"xuqina"},{"avatarThumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/974295-kg.jpg","displayName":"Serigne ","profileUrl":"/serigne","tier":"Master","tierInt":3,"userId":974295,"userName":"serigne"},{"avatarThumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/default-thumb.png","displayName":"Paul Yang","profileUrl":"/paulyangsz","tier":"Novice","tierInt":0,"userId":974589,"userName":"paulyangsz"},{"avatarThumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/979880-gp.jpg","displayName":"FabrizioFedericoni","profileUrl":"/ffedericoni","tier":"Contributor","tierInt":1,"userId":979880,"userName":"ffedericoni"},{"avatarThumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/985810-kg.jpg","displayName":"Bartek Bogacki","profileUrl":"/bartek80","tier":"Contributor","tierInt":1,"userId":985810,"userName":"bartek80"},{"avatarThumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/1014468-kg.jpg","displayName":"Heads or Tails","profileUrl":"/headsortails","tier":"Grandmaster","tierInt":4,"userId":1014468,"userName":"headsortails"},{"avatarThumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/1023778-gr.jpg","displayName":"Simone","profileUrl":"/simosound94","tier":"Novice","tierInt":0,"userId":1023778,"userName":"simosound94"},{"avatarThumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/1027588-gp.jpg","displayName":"Hemant Shinde","profileUrl":"/hemantshinde1811","tier":"Novice","tierInt":0,"userId":1027588,"userName":"hemantshinde1811"},{"avatarThumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/default-thumb.png","displayName":"Codepuree","profileUrl":"/codepuree","tier":"Novice","tierInt":0,"userId":1037841,"userName":"codepuree"},{"avatarThumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/1066362-gp.jpg","displayName":"AlexToussant","profileUrl":"/diggityhuka","tier":"Novice","tierInt":0,"userId":1066362,"userName":"diggityhuka"},{"avatarThumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/1068380-gp.jpg","displayName":"Jeremy Xia Hua","profileUrl":"/jeremyxiahua","tier":"Novice","tierInt":0,"userId":1068380,"userName":"jeremyxiahua"},{"avatarThumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/1091164-kg.jpg","displayName":"Gasimov Aydin","profileUrl":"/aydin1918","tier":"Expert","tierInt":2,"userId":1091164,"userName":"aydin1918"},{"avatarThumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/1091847-kg.png","displayName":"Chenxi_Ge","profileUrl":"/atlasgcx","tier":"Novice","tierInt":0,"userId":1091847,"userName":"atlasgcx"},{"avatarThumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/1096874-kg.jpg","displayName":"Patil","profileUrl":"/patil4444","tier":"Contributor","tierInt":1,"userId":1096874,"userName":"patil4444"},{"avatarThumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/1117455-kg.png","displayName":"ruczu ","profileUrl":"/lukaszruczynski","tier":"Novice","tierInt":0,"userId":1117455,"userName":"lukaszruczynski"},{"avatarThumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/default-thumb.png","displayName":"miller","profileUrl":"/panxiaoyu8129","tier":"Novice","tierInt":0,"userId":1125212,"userName":"panxiaoyu8129"},{"avatarThumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/1136196-fb.jpg","displayName":"Prince Grover","profileUrl":"/grroverpr","tier":"Contributor","tierInt":1,"userId":1136196,"userName":"grroverpr"},{"avatarThumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/1137318-kg.JPG","displayName":"Xinyu Liu","profileUrl":"/liuxy94","tier":"Novice","tierInt":0,"userId":1137318,"userName":"liuxy94"},{"avatarThumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/default-thumb.png","displayName":"Yakolle Zhang","profileUrl":"/yakolle","tier":"Master","tierInt":3,"userId":1139667,"userName":"yakolle"},{"avatarThumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/1141319-fb.jpg","displayName":"AugustinPottier","profileUrl":"/tspmsa","tier":"Contributor","tierInt":1,"userId":1141319,"userName":"tspmsa"},{"avatarThumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/default-thumb.png","displayName":"Divya Bansal","profileUrl":"/divban","tier":"Novice","tierInt":0,"userId":1170255,"userName":"divban"},{"avatarThumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/1173928-kg.jpg","displayName":"WJ","profileUrl":"/wendygao","tier":"Novice","tierInt":0,"userId":1173928,"userName":"wendygao"},{"avatarThumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/1175197-kg.jpg","displayName":"JuliaNolan","profileUrl":"/julianolan","tier":"Novice","tierInt":0,"userId":1175197,"userName":"julianolan"},{"avatarThumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/default-thumb.png","displayName":"Tran Nguyen","profileUrl":"/trannguyen98","tier":"Novice","tierInt":0,"userId":1176384,"userName":"trannguyen98"},{"avatarThumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/1191509-kg.jpg","displayName":"LeeYun","profileUrl":"/leeyun","tier":"Contributor","tierInt":1,"userId":1191509,"userName":"leeyun"},{"avatarThumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/1193622-kg.png","displayName":"(╹◡╹✿)","profileUrl":"/feiranji","tier":"Novice","tierInt":0,"userId":1193622,"userName":"feiranji"},{"avatarThumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/1219947-kg.jpg","displayName":"Jair Castruita","profileUrl":"/ghostpaladin","tier":"Novice","tierInt":0,"userId":1219947,"userName":"ghostpaladin"},{"avatarThumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/1223463-gr.jpg","displayName":"Triturus","profileUrl":"/triturus","tier":"Contributor","tierInt":1,"userId":1223463,"userName":"triturus"},{"avatarThumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/1235184-kg.png","displayName":"xiaopangzeng","profileUrl":"/xiaopangzeng","tier":"Contributor","tierInt":1,"userId":1235184,"userName":"xiaopangzeng"},{"avatarThumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/default-thumb.png","displayName":"ysumi","profileUrl":"/sumitomo","tier":"Novice","tierInt":0,"userId":1235688,"userName":"sumitomo"},{"avatarThumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/1247835-kg.jpg","displayName":"Marwan Mostafa","profileUrl":"/marwanelghitany","tier":"Contributor","tierInt":1,"userId":1247835,"userName":"marwanelghitany"},{"avatarThumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/1254130-kg.jpg","displayName":"Vladimir","profileUrl":"/silversurf","tier":"Novice","tierInt":0,"userId":1254130,"userName":"silversurf"},{"avatarThumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/1264580-kg.JPG","displayName":"Kun Hao Yeh","profileUrl":"/khyeh0719","tier":"Master","tierInt":3,"userId":1264580,"userName":"khyeh0719"},{"avatarThumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/1334582-gp.jpg","displayName":"Rajkiran Veldur","profileUrl":"/rveldur","tier":"Contributor","tierInt":1,"userId":1334582,"userName":"rveldur"},{"avatarThumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/default-thumb.png","displayName":"BeanLan","profileUrl":"/beanlan17","tier":"Novice","tierInt":0,"userId":1353568,"userName":"beanlan17"},{"avatarThumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/1354436-kg.jpg","displayName":"Stephen Barter","profileUrl":"/sbarter510","tier":"Novice","tierInt":0,"userId":1354436,"userName":"sbarter510"},{"avatarThumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/default-thumb.png","displayName":"shuwen","profileUrl":"/shuwenwu","tier":"Novice","tierInt":0,"userId":1355476,"userName":"shuwenwu"},{"avatarThumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/default-thumb.png","displayName":"ylan","profileUrl":"/lanyue","tier":"Novice","tierInt":0,"userId":1358467,"userName":"lanyue"},{"avatarThumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/1377603-kg.jpg","displayName":"Ruta Sakalauskaite","profileUrl":"/goomba16","tier":"Contributor","tierInt":1,"userId":1377603,"userName":"goomba16"},{"avatarThumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/1388693-gp.jpg","displayName":"aniket","profileUrl":"/aniketsawale","tier":"Novice","tierInt":0,"userId":1388693,"userName":"aniketsawale"},{"avatarThumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/1402026-kg.jpg","displayName":"wendygao","profileUrl":"/wendygaochi","tier":"Novice","tierInt":0,"userId":1402026,"userName":"wendygaochi"},{"avatarThumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/default-thumb.png","displayName":"Vyas","profileUrl":"/vedavyasv","tier":"Novice","tierInt":0,"userId":1428710,"userName":"vedavyasv"},{"avatarThumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/1431081-kg.JPG","displayName":"Lifan Zhang","profileUrl":"/zhanglifan","tier":"Contributor","tierInt":1,"userId":1431081,"userName":"zhanglifan"},{"avatarThumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/1433567-kg.jpg","displayName":"VG","profileUrl":"/vikramgovindan","tier":"Novice","tierInt":0,"userId":1433567,"userName":"vikramgovindan"},{"avatarThumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/1443533-fb.jpg","displayName":"Hiroshi Kuroda","profileUrl":"/quro164","tier":"Novice","tierInt":0,"userId":1443533,"userName":"quro164"},{"avatarThumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/1490291-kg.jpg","displayName":"Shanth","profileUrl":"/shanth84","tier":"Expert","tierInt":2,"userId":1490291,"userName":"shanth84"},{"avatarThumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/1504249-kg.jpg","displayName":"Miguel Brito","profileUrl":"/miguelcpsbrito","tier":"Contributor","tierInt":1,"userId":1504249,"userName":"miguelcpsbrito"},{"avatarThumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/default-thumb.png","displayName":"Rick Chen","profileUrl":"/ddongchen","tier":"Novice","tierInt":0,"userId":1532336,"userName":"ddongchen"},{"avatarThumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/default-thumb.png","displayName":"sprabhu","profileUrl":"/chowder9","tier":"Contributor","tierInt":1,"userId":1570969,"userName":"chowder9"},{"avatarThumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/default-thumb.png","displayName":"Lo1gr","profileUrl":"/lo1gr2","tier":"Novice","tierInt":0,"userId":1737425,"userName":"lo1gr2"},{"avatarThumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/default-thumb.png","displayName":"AlexWay","profileUrl":"/alexway","tier":"Novice","tierInt":0,"userId":1769390,"userName":"alexway"},{"avatarThumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/default-thumb.png","displayName":"Qtyan","profileUrl":"/qtyan0721","tier":"Novice","tierInt":0,"userId":2159640,"userName":"qtyan0721"},{"avatarThumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/default-thumb.png","displayName":"Tomcat47","profileUrl":"/kiiimakiii","tier":"Novice","tierInt":0,"userId":2187780,"userName":"kiiimakiii"},{"avatarThumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/default-thumb.png","displayName":"brtshkotoro","profileUrl":"/brtshkotoro","tier":"Novice","tierInt":0,"userId":2400792,"userName":"brtshkotoro"},{"avatarThumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/default-thumb.png","displayName":"Foram Javia","profileUrl":"/foramjavia","tier":"Novice","tierInt":0,"userId":2586363,"userName":"foramjavia"},{"avatarThumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/default-thumb.png","displayName":"Noname","profileUrl":"/notably","tier":"Novice","tierInt":0,"userId":2629168,"userName":"notably"}],"currentUserInfo":null,"showVoters":true,"alwaysShowVoters":true},"parentDataSource":null,"parentName":"Mercari Price Suggestion Challenge","parentUrl":"/c/mercari-price-suggestion-challenge","thumbnailImageUrl":"https://storage.googleapis.com/kaggle-competitions/kaggle/7559/logos/thumb76_76.png","canWrite":false,"canAdminister":false,"datasetHidden":false,"forkParentIsRedacted":false,"forkDiffLinesChanged":0,"forkDiffLinesDeleted":0,"forkDiffLinesInserted":0,"forkDiffUrl":null,"forkParentAuthorDisplayName":null,"forkParentAuthorUrl":null,"forkParentTitle":null,"forkParentUrl":null,"canSeeDataExplorerV2":true,"canSeeRevampedViewer":true,"canSeeInnerTableOfContents":true,"simplifiedViewer":false,"kernelOutputDataset":null});performance && performance.mark && performance.mark("KernelViewer.componentCouldBootstrap");</script><form action="/vrtjso/mercari-eda-more-info-than-you-can-imagine" id="__AjaxAntiForgeryForm" method="post"><input name="X-XSRF-TOKEN" type="hidden" value="CfDJ8LdUzqlsSWBPr4Ce3rb9VL8hMKm-HmikSJsoJdcBafwpBXFuBl3h7Q38j5_LjTczU7xc2sRgdpkUkmSJkiXlT5hTuBOxv4JQ1Sc4hIYMq7fRRSTYr2WRlS0Ug-Ytl9EpG6Lx6B6DpB0djgE9XBcWaas"></form>

<script type="text/x-mathjax-config">
    MathJax.Hub.Config({
        "HTML-CSS": {
            preferredFont: "TeX",
            availableFonts: ["STIX", "TeX"],
            linebreaks: {
                automatic: true
            },
            EqnChunk: (MathJax.Hub.Browser.isMobile ? 10 : 50)
        },
        tex2jax: {
            inlineMath: [["\\(", "\\)"], ["\\\\(", "\\\\)"]],
            displayMath: [["$$", "$$"], ["\\[", "\\]"]],
            processEscapes: true,
            ignoreClass: "tex2jax_ignore|dno"
        },
        TeX: {
            noUndefined: {
                attributes: {
                    mathcolor: "red",
                    mathbackground: "#FFEEEE",
                    mathsize: "90%"
                }
            }
        },
        Macros: {
            href: "{}"
        },
        skipStartupTypeset: true,
        messageStyle: "none"
    });
</script><script type="text/javascript" async crossorigin="anonymous" src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>
</div>

        <div class="site-layout__footer">
            <footer class="site-footer"><div class="site-footer__content">
        <div class="site-footer__copyright">
            <span>© 2019 Kaggle Inc</span>
        </div>
        <nav class="site-footer__nav"><a href="/team">Our Team</a>
            <a href="/terms">Terms</a>
            <a href="/privacy">Privacy</a>
            <a href="/contact">Contact/Support</a>
        </nav><nav class="site-footer__social"><div data-component-name="SocialIcons" style="display: flex; flex-direction: column; flex: 1 0 auto;"></div>
<script>var Kaggle=window.Kaggle||{};Kaggle.State=Kaggle.State||[];Kaggle.State.push();performance && performance.mark && performance.mark("SocialIcons.componentCouldBootstrap");</script></nav>
</div>
</footer>
</div>
</div>




    </main>
</body>
</html>
