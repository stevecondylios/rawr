<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta charset="utf-8" class="next-head">
<meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" class="next-head">
<meta name="viewport" content="width=device-width, initial-scale=1, user-scalable=no" class="next-head">
<meta name="google-site-verification" content="NXbTi7gyLQESV4NIskeE9Ka0Am8KjAtzg5gm8g38HbU" class="next-head">
<meta name="keywords" content="sentiment analysis R" class="next-head">
<meta name="description" content="Learn how to perform tidy sentiment analysis in R on Prince's songs, sentiment over time, song level sentiment, the impact of bigrams, and much more!" class="next-head">
<title class="next-head">Tidy Sentiment Analysis in R (article) - DataCamp</title>
<link rel="canonical" href="https://www.datacamp.com/community/tutorials/sentiment-analysis-R" class="next-head">
<link rel="author" href="https://plus.google.com/u/0/+Datacamp/" class="next-head">
<link rel="shortcut icon" type="image/x-icon" href="https://cdn.datacamp.com/main-app/assets/favicon-335cd0394b32102a39221d79e5fd7e51078e6d32a0c8aea59676a6869f84e9d8.ico" class="next-head">
<link rel="chrome-webstore-item" href="https://chrome.google.com/webstore/detail/lbbhbkehmgbndgfdbncbmikooblghdbi" class="next-head">
<meta property="og:title" content="Tidy Sentiment Analysis in R" class="next-head">
<meta property="og:image" content="https://s3.amazonaws.com/datacamp-community-prod/social-share-tutorials.jpg" class="next-head">
<meta property="og:url" content="https://www.datacamp.com/community/tutorials/sentiment-analysis-R" class="next-head">
<meta property="og:type" content="article" class="next-head">
<meta property="og:published_time" content="2018-03-29T10:00:00.000Z" class="next-head">
<meta property="og:author" content="Debbie Liske" class="next-head">
<meta property="og:description" content="Learn how to perform tidy sentiment analysis in R on Prince's songs, sentiment over time, song level sentiment, the impact of bigrams, and much more!" class="next-head">
<meta property="og:site_name" content="DataCamp Community" class="next-head">
<meta name="twitter:title" content="Tidy Sentiment Analysis in R" class="next-head">
<meta name="twitter:description" content="Learn how to perform tidy sentiment analysis in R on Prince's songs, sentiment over time, song level sentiment, the impact of bigrams, and much more!" class="next-head">
<meta name="twitter:card" content="summary" class="next-head">
<meta name="twitter:site" content="@DataCamp" class="next-head">
<meta name="twitter:creator" content="@DataCamp" class="next-head">
<meta name="twitter:domain" content="www.datacamp.com" class="next-head">
<meta name="twitter:image" content="https://s3.amazonaws.com/datacamp-community-prod/social-share-tutorials.jpg" class="next-head">
<meta name="twitter:image:width" content="1200" class="next-head">
<meta name="twitter:image:height" content="628" class="next-head">
<meta name="twitter:image:alt" content="Tidy Sentiment Analysis in R" class="next-head">
<meta name="article:publisher" content="https://www.facebook.com/DataCamp-726282547396228" class="next-head">
<meta name="fb:app_id" content="726282547396228" class="next-head">
<script async="" src="https://promo.datacamp.com/banner.js" class="next-head"></script><script class="next-head">
      (function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
      new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
      j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
      'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
      })(window,document,'script','dataLayer','GTM-TGGWB2P');
    </script><link rel="preload" href="/community/_next/5d9bc8f5-f0ca-4355-86d0-a48a793ca92f/page/community/tutorial.js" as="script">
<link rel="preload" href="/community/_next/5d9bc8f5-f0ca-4355-86d0-a48a793ca92f/page/_error.js" as="script">
<link rel="preload" href="/community/_next/a173c06dd865e57fcaacdeeaaa4ca63b/app.js" as="script">
<style id="__jsx-396080995">.Logo.jsx-396080995{-webkit-flex:1 1 auto;-ms-flex:1 1 auto;flex:1 1 auto;}
.Logo__image.jsx-396080995{display:block;width:122px;height:28px;margin-left:8px;}
.Logo__image.jsx-396080995 svg{fill:#FFFFFF;}
@media (min-width:800px){.Logo.jsx-396080995{height:59px;}.Logo__image.jsx-396080995{margin:17px auto 0;}}</style>
<style id="__jsx-499055511">.SidebarMenu.jsx-499055511{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;position:fixed;z-index:300;width:100vw;height:50px;background-image: linear-gradient(207deg, #2388B0, #33AACC);}
.Layout--banner .SidebarMenu.jsx-499055511{top:55px;}
.icon.jsx-499055511{text-align:right;}
.icon.jsx-499055511 svg{margin-right:9px;width:20px;height:20px;fill:#FFFFFF;}
@media (min-width:800px){.SidebarMenu.jsx-499055511{z-index:200;width:220px;top:0;left:0;background-image:none;}.Layout--banner .SidebarMenu.jsx-499055511{top:80px;}}</style>
<style id="__jsx-2769082546">.Menu.jsx-2769082546{-webkit-flex:1 1 auto;-ms-flex:1 1 auto;flex:1 1 auto;margin-top:50px;}
.Layout--banner .Menu.jsx-2769082546{margin-top:105px;}
.Layout--openMenu .Menu.jsx-2769082546{min-height:calc(100vh - 50px - 134px);}
.Layout--openMenu.Layout--banner .Menu.jsx-2769082546{min-height:calc(100vh - 105px - 134px);}
.section.jsx-2769082546{margin-bottom:20px;}
.section.jsx-2769082546 h5.jsx-2769082546{margin:0;padding-left:17px;font-size:13px;-webkit-letter-spacing:3.3px;-moz-letter-spacing:3.3px;-ms-letter-spacing:3.3px;letter-spacing:3.3px;line-height:36px;text-align:left;text-transform:uppercase;background-color:#195B73;color:#7ECCE2;}
.item.jsx-2769082546{margin-bottom:1px;padding-left:12px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-align-content:center;-ms-flex-line-pack:center;align-content:center;font-size:15px;-webkit-letter-spacing:0.2px;-moz-letter-spacing:0.2px;-ms-letter-spacing:0.2px;letter-spacing:0.2px;line-height:40px;text-decoration:none;color:#FFFFFF;}
.statusIcon.jsx-2769082546{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-self:center;-ms-flex-item-align:center;align-self:center;padding:10px;}
.active.jsx-2769082546{background-color:#55AECB;}
a.jsx-2769082546:hover{background-color:#55AECB;}
.image.jsx-2769082546{margin-top:2px;-webkit-flex:0 0 auto;-ms-flex:0 0 auto;flex:0 0 auto;width:30px;height:30px;text-align:center;}
.image.jsx-2769082546 svg{fill:#195B73;}
.active.jsx-2769082546 svg,a.jsx-2769082546:hover svg{fill:#FFFFFF;}
.text.jsx-2769082546{-webkit-flex:1 1 auto;-ms-flex:1 1 auto;flex:1 1 auto;}
.subMenu.jsx-2769082546{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}
@media (min-width:800px){.Menu.jsx-2769082546{position:fixed;width:220px;margin-top:50px;}.Layout--banner .Menu.jsx-2769082546{margin-top:130px;}.section.jsx-2769082546 h5.jsx-2769082546{padding-left:0;text-align:center;}}</style>
<style id="__jsx-1844558338">.Button.jsx-1844558338{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-flex:0 0 auto;-ms-flex:0 0 auto;flex:0 0 auto;height:33px;margin:auto 5px;padding:0 15px;font-size:13px;font-weight:bold;-webkit-letter-spacing:0.2px;-moz-letter-spacing:0.2px;-ms-letter-spacing:0.2px;letter-spacing:0.2px;white-space:nowrap;color:#3A3A3A;border:1px solid transparent;border-radius:4px;background-color:transparent;cursor:pointer;outline:none;}
.Button.jsx-1844558338::before,.Button.jsx-1844558338::after{content:'';-webkit-flex:1 0 auto;-ms-flex:1 0 auto;flex:1 0 auto;}
.icon.jsx-1844558338{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;min-height:20px;}
.icon.jsx-1844558338 svg{-webkit-flex:1 1 0;-ms-flex:1 1 0;flex:1 1 0;height:20px;-webkit-align-self:center;-ms-flex-item-align:center;align-self:center;fill:#33AACC;}
.greyIcon.jsx-1844558338 .icon.jsx-1844558338 svg{min-width:16px;min-height:16px;fill:#3A3A3A;}
.same.jsx-1844558338 .icon.jsx-1844558338{min-width:13px;height:13px;margin-right:5px;}
.same.jsx-1844558338 .icon.jsx-1844558338 svg{height:13px;}
.Button.jsx-1844558338:disabled,.Button.jsx-1844558338:hover.jsx-1844558338:disabled{color:#D1D3D8;background-color:#E6EAEB;}
.primary.jsx-1844558338{background-color:#FFC844;}
.primary.jsx-1844558338:hover{background-color:#FBE28D;}
.secondary.jsx-1844558338{color:#FFFFFF;background-color:#33AACC;}
.secondary.jsx-1844558338:hover{background-color:#7ECCE2;}
.red.jsx-1844558338{color:#FFFFFF;background-color:#FE5C5C;}
.green.jsx-1844558338{height:35px;color:#FFFFFF;background-color:#FFFFFF;}
.green.jsx-1844558338 .icon.jsx-1844558338 svg{fill:#36D57D;width:35px;height:35px;}
.grey.jsx-1844558338{color:#3D4251;background-color:#D1D3D8;}
.grey.jsx-1844558338:hover{color:#3D4251;background-color:#E6EAEB;}
.big.jsx-1844558338{font-size:15px;height:42px;}
.extra.jsx-1844558338{font-size:17px;height:45px;}
.border.jsx-1844558338{border:1px solid #E3E7E8;}
.border.jsx-1844558338:hover{border:1px solid #33AACC;}
.seeAll.jsx-1844558338{border:1px solid #33AACC;}
.seeAll.jsx-1844558338:hover{border:1px solid #FFC844;}
.iconButton.jsx-1844558338:hover{color:#33AACC;}
.minWidth.jsx-1844558338{min-width:85px;}
.noPadding.jsx-1844558338{padding:0;}
@media (min-width:800px){.icon.jsx-1844558338{min-width:13px;height:13px;margin-right:5px;}.icon.jsx-1844558338 svg{height:13px;}.big.jsx-1844558338 .icon.jsx-1844558338{min-width:15px;height:15px;}.big.jsx-1844558338 svg{height:15px;}.extra.jsx-1844558338 .icon.jsx-1844558338,.extraIcon.jsx-1844558338{min-width:17px;height:17px;}.extra.jsx-1844558338 svg,.extraIcon.jsx-1844558338 svg{height:17px;}.green.jsx-1844558338{padding:0 15px;color:#FFFFFF;background-color:#36D57D;}.green.jsx-1844558338 .icon.jsx-1844558338 svg{width:13px;height:13px;fill:#FFFFFF;}.forcePadding.jsx-1844558338{padding:0 15px;}}</style>
<style id="__jsx-3863678361">.ActionBarSearch.jsx-3863678361{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:start;-webkit-justify-content:flex-start;-ms-flex-pack:start;justify-content:flex-start;}</style>
<style id="__jsx-728636942">.SubmitAnArticleButton.jsx-728636942{margin-left:5px;}
.mobileButton.jsx-728636942{display:block !important;}
.mobileButton.jsx-728636942 svg{fill:#36D57D;width:35px;height:35px;}
.SubmitAnArticleButton.jsx-728636942 .desktopButton{display:none !important;}
@media (min-width:800px){.mobileButton.jsx-728636942{display:none !important;}.SubmitAnArticleButton.jsx-728636942 .desktopButton{display:-webkit-box !important;display:-webkit-flex !important;display:-ms-flexbox !important;display:flex !important;}}</style>
<style id="__jsx-3196442269">.ActionBarAuth.jsx-3196442269{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:end;-webkit-justify-content:flex-end;-ms-flex-pack:end;justify-content:flex-end;}
.wrapper.jsx-3196442269{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;cursor:pointer;}
.name.jsx-3196442269{margin-right:9px;font-size:13px;font-weight:bold;color:#3D4251;text-decoration:none;}
.name.jsx-3196442269:hover{color:#33AACC;}
.logout.jsx-3196442269{font-size:15px;padding:10px;color:#3D4251;display:inline-block;min-width:100px;}
.logout.jsx-3196442269:hover{background-color:#F0F4F5;border-bottom:solid 1px #E3E7E8;}
.menuList.jsx-3196442269 a.jsx-3196442269{display:block;}</style>
<style id="__jsx-2159026896">.ActionBar.jsx-2159026896{height:50px;margin-top:50px;padding:0 5px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;background-color:#FFFFFF;border-bottom:1px solid #E3E7E8;}
.authBlock.jsx-2159026896{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-fles-direction:row;-ms-fles-direction:row;fles-direction:row;}
.Page.content .ActionBar{margin-bottom:10px;}
@media (min-width:800px){.ActionBar.jsx-2159026896{width:calc(100% - 220px);height:50px;margin-top:0;margin-bottom:0;padding:0 25px;position:fixed;z-index:300;}}</style>
<style id="__jsx-3889859319">.Title.jsx-3889859319{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}
.Title.jsx-3889859319 .icon.jsx-3889859319{-webkit-flex:0 0 auto;-ms-flex:0 0 auto;flex:0 0 auto;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;min-width:18px;height:18px;}
.icon.jsx-3889859319 svg{-webkit-flex:1 1 0;-ms-flex:1 1 0;flex:1 1 0;height:18px;-webkit-align-self:center;-ms-flex-item-align:center;align-self:center;fill:#33AACC;}
.Title.jsx-3889859319 .h1.jsx-3889859319,.Title.jsx-3889859319 h1.jsx-3889859319{-webkit-flex:0 0 auto;-ms-flex:0 0 auto;flex:0 0 auto;margin:auto 0 auto 9px;font-size:22px;text-transform:capitalize;}
.Title.jsx-3889859319 .status.jsx-3889859319{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-self:center;-ms-flex-item-align:center;align-self:center;padding:10px;}</style>
<style id="__jsx-1514242801">.TitleBar.jsx-1514242801{height:50px;padding:0 5px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;line-height:50px;background-color:#FFFFFF;border-bottom:1px solid #E3E7E8;margin-bottom:65px;}
.filter.jsx-1514242801{-webkit-flex:1 1 auto;-ms-flex:1 1 auto;flex:1 1 auto;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;height:48px;}
.action.jsx-1514242801{-webkit-flex:0 0 auto;-ms-flex:0 0 auto;flex:0 0 auto;line-height:normal;}
.title.jsx-1514242801{height:65px;line-height:65px;-webkit-flex:0 0 100%;-ms-flex:0 0 100%;flex:0 0 100%;-webkit-order:1;-ms-flex-order:1;order:1;text-align:center;}
h1.jsx-1514242801{margin:0 0;}
.Page.content .TitleBar{display:none;}
@media (min-width:800px){.TitleBar.jsx-1514242801{height:50px;padding:0 25px;display:-webkit-box !important;display:-webkit-flex !important;display:-ms-flexbox !important;display:flex !important;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-bottom:29px;margin-top:50px;background-color:#FFFFFF;border-bottom:1px solid #E3E7E8;}.filter.jsx-1514242801{-webkit-flex:0 0 33%;-ms-flex:0 0 33%;flex:0 0 33%;line-height:normal;}.action.jsx-1514242801{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-pack:end;-webkit-justify-content:flex-end;-ms-flex-pack:end;justify-content:flex-end;line-height:normal;-webkit-flex:0 0 33%;-ms-flex:0 0 33%;flex:0 0 33%;}.action.jsx-1514242801 a{line-height:0;}.title.jsx-1514242801{-webkit-order:0;-ms-flex-order:0;order:0;-webkit-flex:1 1 auto;-ms-flex:1 1 auto;flex:1 1 auto;text-align:center;}h1.jsx-1514242801{margin:0 0;}}</style>
<style id="__jsx-3293774837">.CommentCounter.jsx-3293774837{width:54px;height:54px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;border-radius:4px;border:1px solid #E6EAEB;background-color:#F0F4F5;cursor:pointer;}
.CommentCounter.jsx-3293774837 .icon.jsx-3293774837{font-size:13px;line-height:0;color:#33AACC;}
.CommentCounter.jsx-3293774837 .icon.jsx-3293774837 svg{width:16px;height:16px;fill:#33AACC;}
.CommentCounter.jsx-3293774837 .count.jsx-3293774837{font-size:13px;font-weight:bold;-webkit-letter-spacing:0.2px;-moz-letter-spacing:0.2px;-ms-letter-spacing:0.2px;letter-spacing:0.2px;color:#686F75;}
.CommentCounter.jsx-3293774837:hover{background-color:#FFFFFF;}</style>
<style id="__jsx-1972554161">.Upvote.jsx-1972554161{position:relative;width:54px;height:54px;overflow:hidden;border-radius:4px;border:1px solid #E6EAEB;background-color:#F0F4F5;cursor:pointer;}
.Upvote.news.jsx-1972554161{width:45px;height:35px;border:none;background-color:transparent;}
.Upvote.comment.jsx-1972554161{width:45px;height:25px;border:none;background-color:transparent;}
.Upvote.jsx-1972554161>div.jsx-1972554161{position:absolute;top:0;-webkit-transition:all 0.15s ease-in-out;transition:all 0.15s ease-in-out;}
.Upvote.upvoted.jsx-1972554161>div.jsx-1972554161{top:-54px;}
.Upvote.upvoted.news.jsx-1972554161>div.jsx-1972554161{top:-35px;}
.Upvote.upvoted.comment.jsx-1972554161>div.jsx-1972554161{top:-25px;}
.Upvote.jsx-1972554161>div.jsx-1972554161>div.jsx-1972554161{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;width:54px;height:54px;}
.Upvote.news.jsx-1972554161>div.jsx-1972554161>div.jsx-1972554161{width:45px;height:35px;}
.Upvote.comment.jsx-1972554161>div.jsx-1972554161>div.jsx-1972554161{width:45px;height:25px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;}
.Upvote.jsx-1972554161 .icon.jsx-1972554161{font-size:13px;line-height:0;color:#33AACC;}
.Upvote.comment.jsx-1972554161 .icon.jsx-1972554161{padding-right:5px;}
.Upvote.comment.jsx-1972554161 .count.jsx-1972554161{padding-bottom:1px;}
.Upvote.jsx-1972554161 .icon.jsx-1972554161 svg{width:12px;height:12px;fill:#33AACC;}
.Upvote.jsx-1972554161 .count.jsx-1972554161{font-size:13px;font-weight:bold;-webkit-letter-spacing:0.2px;-moz-letter-spacing:0.2px;-ms-letter-spacing:0.2px;letter-spacing:0.2px;color:#686F75;}
.Upvote.jsx-1972554161:hover{background-color:#FFFFFF;}
.Upvote.news.jsx-1972554161:hover,.Upvote.comment.jsx-1972554161:hover{background-color:#EBF4F7;}
.Upvote.news.jsx-1972554161:hover .count.jsx-1972554161,.Upvote.comment.jsx-1972554161:hover .count.jsx-1972554161{color:#33AACC;}
.Upvote.jsx-1972554161 .voted.jsx-1972554161{background-color:#33AACC;border-color:#33AACC;}
.Upvote.news.jsx-1972554161 .voted.jsx-1972554161,.Upvote.comment.jsx-1972554161 .voted.jsx-1972554161{background-color:#FFFFFF;border:none;}
.Upvote.jsx-1972554161 .voted.jsx-1972554161 .icon.jsx-1972554161 svg{fill:#195B73;}
.Upvote.news.jsx-1972554161 .voted.jsx-1972554161 .icon.jsx-1972554161 svg,.Upvote.comment.jsx-1972554161 .voted.jsx-1972554161 .icon.jsx-1972554161 svg{fill:#36D57D;}
.Upvote.jsx-1972554161 .voted.jsx-1972554161 .count.jsx-1972554161{color:#FFFFFF;}
.Upvote.news.jsx-1972554161 .voted.jsx-1972554161 .count.jsx-1972554161,.Upvote.comment.jsx-1972554161 .voted.jsx-1972554161 .count.jsx-1972554161{color:#36D57D;}
@media (min-width:800px){.Upvote.news.jsx-1972554161{height:45px;}.Upvote.comment.jsx-1972554161{height:25px;}.Upvote.upvoted.news.jsx-1972554161>div.jsx-1972554161{top:-45px;}.Upvote.upvoted.comment.jsx-1972554161>div.jsx-1972554161{top:-25px;}.Upvote.news.jsx-1972554161>div.jsx-1972554161>div.jsx-1972554161{height:45px;}.Upvote.comment.jsx-1972554161>div.jsx-1972554161>div.jsx-1972554161{height:25px;}}</style>
<style id="__jsx-494086174">.Social.jsx-494086174{-webkit-flex:0 0 auto;-ms-flex:0 0 auto;flex:0 0 auto;}
.icons.jsx-494086174{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}
.icon.jsx-494086174{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;width:28px;height:28px;border:1px solid #E3E7E8;background-color:#FFFFFF;border-radius:50%;}
.icon.jsx-494086174:hover{background-color:#F0F4F5;}
.centerIcon.jsx-494086174{margin:0 10px;}
.icon.jsx-494086174 svg{fill:#686F75;-webkit-align-self:center;-ms-flex-item-align:center;align-self:center;-webkit-flex:1 1 auto;-ms-flex:1 1 auto;flex:1 1 auto;}
@media (min-width:800px){.Social.jsx-494086174{margin-top:18px;}.vertical.jsx-494086174{margin-top:10px;}.vertical.jsx-494086174 .icons.jsx-494086174{-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;}.vertical.jsx-494086174 .centerIcon.jsx-494086174{margin:10px 0;}}</style>
<style id="__jsx-3208234818">.Avatar.jsx-3208234818{display:inline-block;background-size:cover;background-color:#E6EAEB;background-repeat:no-repeat;}</style>
<style id="__jsx-566588255">.Author.jsx-566588255 a.jsx-566588255{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;cursor:pointer;}
.info.jsx-566588255{margin-left:9px;white-space:nowrap;}
.mirrored.jsx-566588255 .info.jsx-566588255{margin:0 9px 0 0;-webkit-order:-1;-ms-flex-order:-1;order:-1;}
.name.jsx-566588255{font-size:13px;font-weight:bold;-webkit-letter-spacing:0.2px;-moz-letter-spacing:0.2px;-ms-letter-spacing:0.2px;letter-spacing:0.2px;color:#3D4251;text-decoration:none;}
.name.jsx-566588255:hover{color:#33AACC;}
.date.jsx-566588255{font-size:11px;-webkit-letter-spacing:0.2px;-moz-letter-spacing:0.2px;-ms-letter-spacing:0.2px;letter-spacing:0.2px;color:#686F75;}</style>
<style id="__jsx-1764811326">.Tag.jsx-1764811326{display:inline-block;border-radius:4px;background-color:#F0F4F5;border:solid 1px #E6EAEB;-webkit-letter-spacing:0.2px;-moz-letter-spacing:0.2px;-ms-letter-spacing:0.2px;letter-spacing:0.2px;color:#686F75;cursor:default;}
.title.jsx-1764811326{line-height:20px;padding:0 8px;font-size:11px;text-transform:uppercase;}
.Tag.mustRead.jsx-1764811326{background-color:#AD86CE;border-color:#AD86CE;color:#FFFFFF;font-weight:bold;}
.Tag.jsx-1764811326:hover{background-color:#FFFFFF;}
.Tag.mustRead.jsx-1764811326:hover{background-color:#CEABEC;border-color:#CEABEC;}</style>
<style id="__jsx-1022557955">.more.jsx-1022557955{font-size:11px;cursor:default;color:#686F75;}
.more.jsx-1022557955:hover{text-decoration:underline;}</style>
<style id="__jsx-422934526">.tooltipInner .Tag{margin:4px;}
.rc-tooltip{position:absolute;z-index:200;display:block;visibility:visible;line-height:1.5;font-size:12px;border-radius:4px;}
.rc-tooltip-hidden{display:none;}
.rc-tooltip-inner{padding:12px;color:#333333;text-align:left;text-decoration:none;background-color:#ffffff;border-radius:4px;min-height:34px;border:1px solid #e3e7e8;}
.rc-tooltip-arrow,.rc-tooltip-arrow-inner{position:absolute;width:0;height:0;border-color:transparent;border-style:solid;}
.rc-tooltip-placement-top .rc-tooltip-arrow,.rc-tooltip-placement-topLeft .rc-tooltip-arrow,.rc-tooltip-placement-topRight .rc-tooltip-arrow{bottom:-5px;margin-left:-6px;border-width:6px 6px 0;border-top-color:#e3e7e8;}
.rc-tooltip-placement-top .rc-tooltip-arrow-inner,.rc-tooltip-placement-topLeft .rc-tooltip-arrow-inner,.rc-tooltip-placement-topRight .rc-tooltip-arrow-inner{bottom:1px;margin-left:-6px;border-width:6px 6px 0;border-top-color:#ffffff;}
.rc-tooltip-placement-top .rc-tooltip-arrow{left:50%;}
.rc-tooltip-placement-topLeft .rc-tooltip-arrow{left:15%;}
.rc-tooltip-placement-topRight .rc-tooltip-arrow{right:15%;}
.rc-tooltip-placement-right .rc-tooltip-arrow,.rc-tooltip-placement-rightTop .rc-tooltip-arrow,.rc-tooltip-placement-rightBottom .rc-tooltip-arrow{left:-5px;margin-top:-6px;border-width:6px 6px 6px 0;border-right-color:#e3e7e8;}
.rc-tooltip-placement-right .rc-tooltip-arrow-inner,.rc-tooltip-placement-rightTop .rc-tooltip-arrow-inner,.rc-tooltip-placement-rightBottom .rc-tooltip-arrow-inner{left:1px;margin-top:-6px;border-width:6px 6px 6px 0;border-right-color:#ffffff;}
.rc-tooltip-placement-right .rc-tooltip-arrow{top:50%;}
.rc-tooltip-placement-rightTop .rc-tooltip-arrow{top:15%;margin-top:0;}
.rc-tooltip-placement-rightBottom .rc-tooltip-arrow{bottom:15%;}
.rc-tooltip-placement-left .rc-tooltip-arrow,.rc-tooltip-placement-leftTop .rc-tooltip-arrow,.rc-tooltip-placement-leftBottom .rc-tooltip-arrow{right:-5px;margin-top:-6px;border-width:6px 0 6px 6px;border-left-color:#e3e7e8;}
.rc-tooltip-placement-left .rc-tooltip-arrow-inner,.rc-tooltip-placement-leftTop .rc-tooltip-arrow-inner,.rc-tooltip-placement-leftBottom .rc-tooltip-arrow-inner{right:1px;margin-top:-6px;border-width:6px 0 6px 6px;border-left-color:#ffffff;}
.rc-tooltip-placement-left .rc-tooltip-arrow{top:50%;}
.rc-tooltip-placement-leftTop .rc-tooltip-arrow{top:15%;margin-top:0;}
.rc-tooltip-placement-leftBottom .rc-tooltip-arrow{bottom:15%;}
.rc-tooltip-placement-bottom .rc-tooltip-arrow,.rc-tooltip-placement-bottomLeft .rc-tooltip-arrow,.rc-tooltip-placement-bottomRight .rc-tooltip-arrow{top:-5px;margin-left:-6px;border-width:0 6px 6px;border-bottom-color:#e3e7e8;}
.rc-tooltip-placement-bottom .rc-tooltip-arrow-inner,.rc-tooltip-placement-bottomLeft .rc-tooltip-arrow-inner,.rc-tooltip-placement-bottomRight .rc-tooltip-arrow-inner{top:1px;margin-left:-6px;border-width:0 6px 6px;border-bottom-color:#ffffff;}
.rc-tooltip-placement-bottom .rc-tooltip-arrow{left:50%;}
.rc-tooltip-placement-bottomLeft .rc-tooltip-arrow{left:15%;}
.rc-tooltip-placement-bottomRight .rc-tooltip-arrow{right:15%;}
.rc-tooltip.rc-tooltip-zoom-enter,.rc-tooltip.rc-tooltip-zoom-leave{display:block;}
.rc-tooltip-zoom-enter,.rc-tooltip-zoom-appear{opacity:0;-webkit-animation-duration:0.3s;-webkit-animation-duration:0.3s;animation-duration:0.3s;-webkit-animation-fill-mode:both;-webkit-animation-fill-mode:both;animation-fill-mode:both;-webkit-animation-timing-function:cubic-bezier(0.18,0.89,0.32,1.28);-webkit-animation-timing-function:cubic-bezier(0.18,0.89,0.32,1.28);animation-timing-function:cubic-bezier(0.18,0.89,0.32,1.28);-webkit-animation-play-state:paused;-webkit-animation-play-state:paused;animation-play-state:paused;}
.rc-tooltip-zoom-leave{-webkit-animation-duration:0.3s;-webkit-animation-duration:0.3s;animation-duration:0.3s;-webkit-animation-fill-mode:both;-webkit-animation-fill-mode:both;animation-fill-mode:both;-webkit-animation-timing-function:cubic-bezier(0.6,-0.3,0.74,0.05);-webkit-animation-timing-function:cubic-bezier(0.6,-0.3,0.74,0.05);animation-timing-function:cubic-bezier(0.6,-0.3,0.74,0.05);-webkit-animation-play-state:paused;-webkit-animation-play-state:paused;animation-play-state:paused;}
.rc-tooltip-zoom-enter.rc-tooltip-zoom-enter-active,.rc-tooltip-zoom-appear.rc-tooltip-zoom-appear-active{-webkit-animation-name:rcToolTipZoomIn;-webkit-animation-name:rcToolTipZoomIn;animation-name:rcToolTipZoomIn;-webkit-animation-play-state:running;-webkit-animation-play-state:running;animation-play-state:running;}
.rc-tooltip-zoom-leave.rc-tooltip-zoom-leave-active{-webkit-animation-name:rcToolTipZoomOut;-webkit-animation-name:rcToolTipZoomOut;animation-name:rcToolTipZoomOut;-webkit-animation-play-state:running;-webkit-animation-play-state:running;animation-play-state:running;}
@-webkit-keyframes rcToolTipZoomIn{0%{opacity:0;-webkit-transform-origin:50% 50%;-webkit-transform-origin:50% 50%;-ms-transform-origin:50% 50%;transform-origin:50% 50%;-webkit-transform:scale(0,0);-webkit-transform:scale(0,0);-ms-transform:scale(0,0);transform:scale(0,0);}100%{opacity:1;-webkit-transform-origin:50% 50%;-webkit-transform-origin:50% 50%;-ms-transform-origin:50% 50%;transform-origin:50% 50%;-webkit-transform:scale(1,1);-webkit-transform:scale(1,1);-ms-transform:scale(1,1);transform:scale(1,1);}}
@-webkit-keyframes rcToolTipZoomIn{0%{opacity:0;-webkit-transform-origin:50% 50%;-webkit-transform-origin:50% 50%;-ms-transform-origin:50% 50%;transform-origin:50% 50%;-webkit-transform:scale(0,0);-webkit-transform:scale(0,0);-ms-transform:scale(0,0);transform:scale(0,0);}100%{opacity:1;-webkit-transform-origin:50% 50%;-webkit-transform-origin:50% 50%;-ms-transform-origin:50% 50%;transform-origin:50% 50%;-webkit-transform:scale(1,1);-webkit-transform:scale(1,1);-ms-transform:scale(1,1);transform:scale(1,1);}}
@keyframes rcToolTipZoomIn{0%{opacity:0;-webkit-transform-origin:50% 50%;-webkit-transform-origin:50% 50%;-ms-transform-origin:50% 50%;transform-origin:50% 50%;-webkit-transform:scale(0,0);-webkit-transform:scale(0,0);-ms-transform:scale(0,0);transform:scale(0,0);}100%{opacity:1;-webkit-transform-origin:50% 50%;-webkit-transform-origin:50% 50%;-ms-transform-origin:50% 50%;transform-origin:50% 50%;-webkit-transform:scale(1,1);-webkit-transform:scale(1,1);-ms-transform:scale(1,1);transform:scale(1,1);}}
@-webkit-keyframes rcToolTipZoomOut{0%{opacity:1;-webkit-transform-origin:50% 50%;-webkit-transform-origin:50% 50%;-ms-transform-origin:50% 50%;transform-origin:50% 50%;-webkit-transform:scale(1,1);-webkit-transform:scale(1,1);-ms-transform:scale(1,1);transform:scale(1,1);}100%{opacity:0;-webkit-transform-origin:50% 50%;-webkit-transform-origin:50% 50%;-ms-transform-origin:50% 50%;transform-origin:50% 50%;-webkit-transform:scale(0,0);-webkit-transform:scale(0,0);-ms-transform:scale(0,0);transform:scale(0,0);}}
@-webkit-keyframes rcToolTipZoomOut{0%{opacity:1;-webkit-transform-origin:50% 50%;-webkit-transform-origin:50% 50%;-ms-transform-origin:50% 50%;transform-origin:50% 50%;-webkit-transform:scale(1,1);-webkit-transform:scale(1,1);-ms-transform:scale(1,1);transform:scale(1,1);}100%{opacity:0;-webkit-transform-origin:50% 50%;-webkit-transform-origin:50% 50%;-ms-transform-origin:50% 50%;transform-origin:50% 50%;-webkit-transform:scale(0,0);-webkit-transform:scale(0,0);-ms-transform:scale(0,0);transform:scale(0,0);}}
@keyframes rcToolTipZoomOut{0%{opacity:1;-webkit-transform-origin:50% 50%;-webkit-transform-origin:50% 50%;-ms-transform-origin:50% 50%;transform-origin:50% 50%;-webkit-transform:scale(1,1);-webkit-transform:scale(1,1);-ms-transform:scale(1,1);transform:scale(1,1);}100%{opacity:0;-webkit-transform-origin:50% 50%;-webkit-transform-origin:50% 50%;-ms-transform-origin:50% 50%;transform-origin:50% 50%;-webkit-transform:scale(0,0);-webkit-transform:scale(0,0);-ms-transform:scale(0,0);transform:scale(0,0);}}</style>
<style id="__jsx-2792531181">.TagLine.jsx-2792531181{display:inline-block;white-space:nowrap;}
.TagLine.jsx-2792531181>.Tag{margin-right:10px;}
.more.jsx-2792531181{font-size:11px;}</style>
<style id="__jsx-1091791248">.markdown{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:start;-webkit-justify-content:flex-start;-ms-flex-pack:start;justify-content:flex-start;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;font-family:'Lora',serif;font-size:16px;padding:1.5em;}
.markdown [data-datacamp-exercise]{overflow:hidden;}
.markdown>div{width:100%;}
.markdown div{outline:none;}
.markdown hr{border:0;border-bottom:1px solid #E6EAEB;margin:3em 0;}
.markdown div[data-type="mathjax"]{margin:1.5em 0;}
.markdown p{font-family:'Lora',serif;font-size:1em;line-height:1.8em;color:#3D4251;}
.markdown .powered-by-datacamp+p{margin-top:1.5em !important;}
.markdown p+p,.markdown p+img,.markdown p+div,.markdown p+table,.markdown p+ol,.markdown p+ul,.markdown p+nav,.markdown div+p,.markdown p+iframe,.markdown iframe+p,.markdown pre+img,.markdown pre+p{margin-top:1.5em !important;}
.markdown h2{font-family:'Lato',sans-serif;font-size:1.5em;font-weight:700;color:#3D4251;line-height:1.3em;margin:1.5em 0 0.5em;}
.markdown h3{font-family:'Lato',sans-serif;font-size:1.1em;font-weight:700;color:#3D4251;line-height:1.2em;margin:1.5em 0 0.5em;}
.markdown h4{font-family:'Lato',sans-serif;font-size:1em;font-weight:700;color:#3D4251;line-height:1.2em;margin:1.5em 0 0.5em;}
.markdown .videoWrapper{position:relative;padding-bottom:47.25%;padding-top:25px;height:0;margin-bottom:1.5em;}
.markdown .videoWrapper iframe{position:absolute;top:0;left:0;width:100%;height:100%;}
.markdown p code,.markdown li code{display:inline-block;padding:0 5px;border-radius:4px;font-family:'Roboto Mono',monospace;font-size:0.9em;line-height:1.6em;color:#3D4251;background-color:#E6EAEB;}
.markdown a code{color:#33AACC;}
.markdown pre{padding:1em 1.5em;font-family:'Roboto Mono',monospace;font-size:0.9em;background-color:#002B36 !important;border-radius:4px;overflow-x:auto;-webkit-overflow-scrolling:touch;}
.markdown pre code{padding:0;font-size:0.9em;line-height:2em;background-color:#002B36;overflow-x:visible;-webkit-overflow-scrolling:touch;}
.markdown img{display:block;-webkit-flex:1 1 auto;-ms-flex:1 1 auto;flex:1 1 auto;margin:auto;max-width:100%;height:auto !important;}
.markdown img+p{margin-top:1.5em !important;}
.markdown nav+p,.markdown nav+div{margin-top:1.5em !important;}
.markdown iframe{width:100%;}
.markdown ul,.markdown ol{font-family:'Lora',serif;color:#3D4251;padding:0 0 0 1em;}
.markdown ul+p,.markdown ol+p,.markdown ul+div,.markdown ol+div,.markdown ul+pre,.markdown ol+pre{margin-top:1.5em !important;}
.markdown div.datacamp-exercise ul,.markdown div.datacamp-exercise ol{background-color:initial;margin:initial;padding:initial;width:initial;list-style-position:initial;line-height:initial;}
.markdown ul.oneliner,.markdown ol.oneliner{padding:0;list-style-position:inside;line-height:1.5em;}
.markdown li{line-height:1.8em;}
.markdown li+li{margin-top:1em;}
.markdown div.datacamp-exercise li{padding-left:initial;background-color:initial;font-size:initial;font-weight:initial;line-height:initial;}
.markdown li p{margin:0;font-size:1em;line-height:1.8em;}
.markdown ul.oneliner li,.markdown ol.oneliner li{padding-left:0;white-space:nowrap;text-overflow:ellipsis;overflow:hidden;}
.markdown ul ul{margin:0;list-style:circle;}
.markdown ol ol{margin:0;}
.markdown ol ul,.markdown ul ol{margin:0;}
.markdown a{font-weight:400;text-decoration:none;color:#33AACC;}
.markdown a:hover{text-decoration:underline;}
.markdown div.datacamp-exercise a{font-weight:initial;text-decoration:initial;}
.markdown div.datacamp-exercise a:hover{text-decoration:initial;}
.markdown div.datacamp-exercise li+li{margin-top:unset;}
.markdown blockquote{margin:1.5em 0;font-family:'Lato',sans-serif;color:#3D4251;font-weight:300;font-size:1.5em;font-style:italic;line-height:2em;}
.markdown blockquote::before{display:block;margin-bottom:15px;width:35px;height:35px;font-family:'Lora',serif;font-size:36px;font-weight:bold;font-style:normal;line-height:60px;text-align:center;color:#33AACC;content:'“';border:1px solid #E3E7E8;border-radius:50%;}
.markdown table{width:100% !important;border:1px solid #E3E7E8;border-radius:4px;overflow:hidden;border-collapse:separate;border-spacing:0;}
.markdown table th,.markdown table td{padding:0.75em;}
.markdown table tr th,.markdown table tr td{border:1px solid #E3E7E8;vertical-align:middle;}
.markdown table thead tr th{font-family:'Lato',sans-serif;background-color:#F0F4F5;}
.markdown table tr:nth-child(even){background-color:#F0F4F5;}
.markdown table+p{margin-top:1.5em !important;}
.markdown table+img{margin-top:1.5em !important;}
.markdown table+div{margin-top:1.5em !important;}
.markdown .dcl-content--tab-body{margin-top:0 !important;}
@media (min-width:800px){.markdown{font-size:20px;padding:0;}.markdown h2,.markdown h3,.markdown h4{margin:1.5em 0 0.5em;}.markdown p{margin:0;}.markdown li p{font-size:inherit;line-height:inherit;}.markdown ul+p,.markdown ol+p,.markdown ul+div,.markdown ol+div,.markdown ul+pre,.markdown ol+pre{margin-top:1.5em !important;}.markdown blockquote{position:relative;margin:50px 55px;}.markdown blockquote::before{position:absolute;left:-55px;}}
.output_wrapper{overflow-x:auto;-webkit-overflow-scrolling:touch;}</style>
<style id="__jsx-3956319705">.PostAComment.jsx-3956319705{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;padding:0 0 60px;}</style>
<style id="__jsx-2506565400">.SidebarSocial.jsx-2506565400{-webkit-flex:1 1 auto;-ms-flex:1 1 auto;flex:1 1 auto;font-size:11px;font-weight:bold;}
.rss.jsx-2506565400{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;line-height:50px;}
.rss.jsx-2506565400 svg{padding-right:7px;fill:#FFC844;}
.rss.jsx-2506565400 a.jsx-2506565400{text-decoration:none;color:#FFFFFF;}
.rss.jsx-2506565400 a.jsx-2506565400:hover{text-decoration:none;color:#FFC844;}
.icons.jsx-2506565400{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}
.icon.jsx-2506565400{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin:0 7px;width:30px;height:30px;background-color:#195B73;border-radius:50%;}
.icon.jsx-2506565400 svg{fill:#7ECCE2;-webkit-align-self:center;-ms-flex-item-align:center;align-self:center;-webkit-flex:1 1 0;-ms-flex:1 1 0;flex:1 1 0;}
.icon.jsx-2506565400:hover svg{fill:#FFFFFF;}
.menu.jsx-2506565400{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;line-height:44px;}
.menuItem.jsx-2506565400{-webkit-flex:0 0 auto;-ms-flex:0 0 auto;flex:0 0 auto;padding:5px;text-decoration:none;color:#195B73;}
.menuItem--active.jsx-2506565400,a.jsx-2506565400:hover{color:#F0F4F5;}
@media (min-width:800px) and (min-height:585px){.SidebarSocial.jsx-2506565400{width:220px;position:fixed;bottom:0;left:0;}}</style>
<style id="__jsx-879378290">.BottomBar.jsx-879378290{position:fixed;bottom:0;width:100vw;padding:15px;z-index:300;background-color:#FFFFFF;box-shadow:0 -2px 26px 0 rgba(168,168,168,0.5);}
.BottomBar.editor.jsx-879378290{padding-top:5px;}
.barView.jsx-879378290{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-box-pack:start;-webkit-justify-content:flex-start;-ms-flex-pack:start;justify-content:flex-start;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}
.editor.jsx-879378290 .barView.jsx-879378290{display:none;}
.blueBar.jsx-879378290{-webkit-flex:1 1 auto;-ms-flex:1 1 auto;flex:1 1 auto;height:50px;margin-left:15px;padding:0 15px;color:#33AACC;line-height:50px;border-radius:4px;background-color:#ebf4f7;}
.editorView.jsx-879378290{-webkit-flex:1 1 auto;-ms-flex:1 1 auto;flex:1 1 auto;}
.editorView.jsx-879378290 .avatar{display:none;}
.bar.jsx-879378290 .editorView.jsx-879378290{display:none;}
.hideBar.jsx-879378290{display:none;}
@media (min-width:800px){.BottomBar.jsx-879378290{width:calc(100% - 220px);margin-left:220px;}.editorView.jsx-879378290 .avatar{display:block;}}</style>
<style id="__jsx-1028385822">.Layout.jsx-1028385822{-webkit-flex:1 1 auto;-ms-flex:1 1 auto;flex:1 1 auto;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:start;-webkit-justify-content:flex-start;-ms-flex-pack:start;justify-content:flex-start;-webkit-align-items:stretch;-webkit-box-align:stretch;-ms-flex-align:stretch;align-items:stretch;}
.Layout--openMenu.jsx-1028385822{min-height:100vh;}
.Main.jsx-1028385822{min-height:100vh;-webkit-flex:1 1 auto;-ms-flex:1 1 auto;flex:1 1 auto;background-color:#F0F4F5;}
.Layout--banner.jsx-1028385822 .Main.jsx-1028385822{margin-top:55px;min-height:calc(100vh - 55px);}
.Layout.bar.jsx-1028385822:not(.Layout--openMenu) .SidebarSocial{margin-bottom:90px;}
.Layout.editor.jsx-1028385822:not(.Layout--openMenu) .SidebarSocial{margin-bottom:300px;}
@media (min-width:800px){.Main.jsx-1028385822{margin-left:220px;}.Layout--banner.jsx-1028385822 .Main.jsx-1028385822{margin-top:80px;min-height:calc(100vh - 80px);}.Layout.bar.jsx-1028385822:not(.Layout--openMenu) .SidebarSocial,.Layout.editor.jsx-1028385822:not(.Layout--openMenu) .SidebarSocial{margin-bottom:0;}.Layout.bar.jsx-1028385822 .Main > div:last-child{margin-bottom:90px;}.Layout.editor.jsx-1028385822 .Main > div:last-child{margin-bottom:300px;}}</style>
<style id="__jsx-1464850800">.Tutorial.jsx-1464850800{margin:0 0px 30px;padding:20px 0 0;background-color:#FFFFFF;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;}
.preface.jsx-1464850800{margin:0 20px;}
.author.jsx-1464850800{margin-bottom:10px;}
h1.jsx-1464850800{margin-top:20px;}
.illustration.jsx-1464850800{margin-bottom:30px;}
.illustration.jsx-1464850800 img.jsx-1464850800{max-width:100%;}
.Tutorial.jsx-1464850800 .social__top .voteAndSocial,.social__bottom.jsx-1464850800 .voteAndSocial.jsx-1464850800{padding:40px 20px 20px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-align-items:flex-end;-webkit-box-align:flex-end;-ms-flex-align:flex-end;align-items:flex-end;}
.Tutorial.jsx-1464850800 .voteAndSocial.jsx-1464850800>div.jsx-1464850800{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-box-pack:start;-webkit-justify-content:flex-start;-ms-flex-pack:start;justify-content:flex-start;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}
.Tutorial.jsx-1464850800 .voteAndSocial.jsx-1464850800>div.jsx-1464850800 .CommentCounter{margin-left:10px;}
@media (min-width:800px){.Tutorial.jsx-1464850800{margin:0 auto 30px;padding:30px 100px 100px;max-width:1120px;border-radius:4px;border:1px solid #E3E7E8;}.preface.jsx-1464850800{margin:0;}.Tutorial.jsx-1464850800 .social__top{position:absolute;margin-top:220px;}.Tutorial.jsx-1464850800 .social__top .voteAndSocial{position:absolute;left:-100px;top:0;width:100px;height:auto;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:start;-webkit-justify-content:flex-start;-ms-flex-pack:start;justify-content:flex-start;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.Tutorial.jsx-1464850800 .voteAndSocial.jsx-1464850800>div.jsx-1464850800{-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;}.Tutorial.jsx-1464850800 .voteAndSocial > div .CommentCounter{margin-left:0;margin-bottom:10px;}}</style>
<style id="__jsx-2612661084">*{box-sizing:border-box;}
html,body{min-height:100vh;margin:0;padding:0;background-image: linear-gradient(207deg, #2388B0, #33AACC); background-size: 100vw 100vh; background-attachment: fixed; background-repeat: no-repeat;}
body.ReactModal__Body--open{overflow:hidden;}
.ReactModal__Content{width:100%;}
img{margin:auto;}
.mobileOnlyShow{display:block !important;}
.mobileOnlyHide{display:none !important;}
.mobileOnly{display:block !important;}
.desktopOnly{display:none !important;}
@media (min-width:800px){body{background-image: linear-gradient(207deg, #2388B0, #33AACC); background-size: 220px 100vh; background-attachment: fixed; background-repeat: no-repeat;}.ReactModal__Content{width:auto;}.mobileOnlyShow{display:block !important;}.mobileOnlyHide{display:block !important;}.mobileOnly{display:none !important;}.desktopOnly{display:block !important;}}</style>
<style id="__jsx-63629563">body,input,button,select,textarea{font-family:'Lato',sans-serif;color:#686F75;font-size:15px;}
h1,.h1,h2,h3,h4,h5{font-family:'Lato',sans-serif;}
.pageTitle{font-family:'Lato',sans-serif;font-size:32px;font-weight:bold;line-height:1.3em;margin-bottom:0.5em;}
.pageDescription{font-family:'Lora',serif;font-size:20.8px;line-height:1.5em;margin-bottom:1.4em;color:#3D4251;}
h1,.h1{font-size:29px;color:#3D4251;font-weight:bold;}
h2{font-size:20px;-webkit-letter-spacing:0.3px;-moz-letter-spacing:0.3px;-ms-letter-spacing:0.3px;letter-spacing:0.3px;line-height:1.33;font-weight:bold;margin:18px 0px;color:#3D4251;}
h2.blue{color:#33AACC;}
a{color:#33AACC;text-decoration:none;}
.blocText{font-size:15px;-webkit-letter-spacing:0.2px;-moz-letter-spacing:0.2px;-ms-letter-spacing:0.2px;letter-spacing:0.2px;line-height:1.47;color:#686F75;}
label{display:block;width:100%;margin-bottom:8px;font-size:13px;}
label span{float:right;font-weight:300;}
input,textarea{padding:15px;font-weight:300;color:#3D4251;background-color:#F0F4F5;border:1px solid transparent;border-radius:4px;outline-style:none;}
input:disabled,textarea:disabled{color:#686F75;background-color:#E6EAEB;}
input.error,textarea.error{border:1px solid #FE5C5C;}
input:focus,textarea:focus{border:1px solid #33AACC;-webkit-transition:border 150ms ease-out;transition:border 150ms ease-out;}
input::-webkit-input-placeholder,textarea::-webkit-input-placeholder{color:#33AACC;-webkit-transition:color 150ms ease-out;transition:color 150ms ease-out;}
input::-moz-placeholder,textarea::-moz-placeholder{color:#33AACC;-webkit-transition:color 150ms ease-out;transition:color 150ms ease-out;}
input:-ms-input-placeholder,textarea:-ms-input-placeholder{color:#33AACC;-webkit-transition:color 150ms ease-out;transition:color 150ms ease-out;}
input::placeholder,textarea::placeholder{color:#33AACC;-webkit-transition:color 150ms ease-out;transition:color 150ms ease-out;}
input:focus::-webkit-input-placeholder,textarea:focus::-webkit-input-placeholder{color:transparent;}
input:focus::-moz-placeholder,textarea:focus::-moz-placeholder{color:transparent;}
input:focus:-ms-input-placeholder,textarea:focus:-ms-input-placeholder{color:transparent;}
input:focus::placeholder,textarea:focus::placeholder{color:transparent;}
input.small,textarea.small{margin-bottom:19px;padding:8px 10px;font-size:13px;}
textarea.small{min-height:55px;}
@media (min-width:800px){h1,.h1{font-size:36px;}h2{font-size:32px;}.pageTitle{font-size:40px;}.pageDescription{font-size:26px;}}</style>
</head>
<body>
<div id="__next"><div data-reactroot=""><div class="Page content">
<div class="jsx-1028385822 Layout bar">
<div class="jsx-499055511 SidebarMenu">
<div class="jsx-396080995 Logo"><a href="https://www.datacamp.com" class="jsx-396080995 Logo__image"><svg xmlns="http://www.w3.org/2000/svg" viewbox="0 0 1367.47 306.77"><path d="M201.49 130.16c2.64-10.87 2.31-21.09-3.62-35.38 0 0 9.55 3.71 8.56-3.65S194.91 76 187 71.11c-3.48-2.17-12.89-6.79-25.52-9.6l2.36-5.32-.66-.32c-19.59-9.54-42.24-.89-42.47-.8l-.7.27 2.24 5.92a78 78 0 0 0-19 7.09C50 96.68 77 152 93.5 165.17s8.89 40 0 64.31H165c1-4.55.13 2.24 3.46-15.91s16.18-11.41 26.3-12 8.52-7.66 8.4-15.56c4.94-2.22 4.94-4.57 1.64-7.41 4.28-4 3.62-4 1.32-7.83s-.66-5.68-.66-5.68 6.92-1.35 7.9-5c.32-7.89-14.5-19.09-11.87-29.93zm-14.78-2.28l-10.59-3.6c-.56 1.45-6 14.9-13 17.27l-6.68-8.84c-3.21 2.51-10.54 4.72-14.07 3.69v-.32h-.19l.2 24.36c-14.05 1.45-30.84-7.06-38.88-18.77l-8.78 6.67c-10-12.07-11.51-26.62-11.62-35h11.77c0-9.27 3.62-21.34 8.72-28l9.23 6.52c.75-.93 7.72-9.27 17.05-12.28h.14l-6.67-17.64c14.09-4.06 24.44-4 35.7.19a3.87 3.87 0 0 1 1 .48l.18.13-1.99 5.26c.53.23 8 3.59 11.09 6.74l2.49-3.44a42.47 42.47 0 0 1 19 25.34L187 98v-.1a55.32 55.32 0 0 1-.28 29.98z"></path><path d="M141.69 95.69a11.77 11.77 0 1 0 11.76 11.77 11.78 11.78 0 0 0-11.76-11.77zM486.07 147.93a85.48 85.48 0 0 1-5.79 31.92 71.67 71.67 0 0 1-41.54 41.32 89 89 0 0 1-32.79 5.83h-60.24V68.9h60.23a88.33 88.33 0 0 1 32.79 5.85A74 74 0 0 1 464 91a72.76 72.76 0 0 1 16.29 25 85.49 85.49 0 0 1 5.78 31.93zm-30.17 0a73.61 73.61 0 0 0-3.44-23.34 48.4 48.4 0 0 0-9.95-17.49 43.45 43.45 0 0 0-15.74-11 54 54 0 0 0-20.82-3.83h-30.72v111.3h30.72a54 54 0 0 0 20.82-3.83 43.39 43.39 0 0 0 15.74-11 48.37 48.37 0 0 0 9.95-17.49 73.6 73.6 0 0 0 3.44-23.32zM505.36 130.44q19.35-17.71 46.57-17.71a45.54 45.54 0 0 1 17.6 3.22 37.21 37.21 0 0 1 13.12 9 38.4 38.4 0 0 1 8.14 13.72 52.72 52.72 0 0 1 2.79 17.49V227h-12.25a12.38 12.38 0 0 1-5.9-1.15q-2.08-1.15-3.28-4.65l-2.4-8.09a97.29 97.29 0 0 1-8.31 6.72 48.91 48.91 0 0 1-8.42 4.86 45.32 45.32 0 0 1-9.35 3 53.93 53.93 0 0 1-11 1 43.08 43.08 0 0 1-13.12-1.91 28.78 28.78 0 0 1-10.38-5.74 25.73 25.73 0 0 1-6.78-9.51 33.72 33.72 0 0 1-2.4-13.23 26.32 26.32 0 0 1 1.42-8.47 24.76 24.76 0 0 1 4.65-8 38.63 38.63 0 0 1 8.36-7.21 54.43 54.43 0 0 1 12.63-5.9 109.08 109.08 0 0 1 17.44-4.1 174.35 174.35 0 0 1 22.74-1.91v-6.56q0-11.26-4.81-16.67t-13.88-5.41a33 33 0 0 0-10.88 1.53 44.91 44.91 0 0 0-7.6 3.44q-3.28 1.91-6 3.44a11.78 11.78 0 0 1-6 1.53 7.79 7.79 0 0 1-4.81-1.48 12.33 12.33 0 0 1-3.17-3.44zm61.87 48.64a149.08 149.08 0 0 0-19.68 2 52.42 52.42 0 0 0-12.79 3.77 16.8 16.8 0 0 0-6.89 5.36 11.63 11.63 0 0 0-2.08 6.67q0 7.11 4.21 10.17t11 3.06a32 32 0 0 0 14.37-3 42.69 42.69 0 0 0 11.86-9.11zM657.79 228.72q-14.65 0-22.46-8.25t-7.82-22.79V135H616a5.26 5.26 0 0 1-3.72-1.42 5.53 5.53 0 0 1-1.53-4.26v-10.68l18-3 5.68-30.61a6 6 0 0 1 2.08-3.39 6.18 6.18 0 0 1 3.94-1.2h14v35.36h30V135h-30v60.78q0 5.25 2.57 8.2a8.85 8.85 0 0 0 7 3 12.7 12.7 0 0 0 4.21-.6 23 23 0 0 0 3-1.26q1.26-.66 2.24-1.26a3.75 3.75 0 0 1 2-.6 3.1 3.1 0 0 1 2 .6 9.23 9.23 0 0 1 1.64 1.8l8.09 13.12a40.87 40.87 0 0 1-13.55 7.43 50.47 50.47 0 0 1-15.86 2.51zM702.11 130.44q19.35-17.71 46.57-17.71a45.54 45.54 0 0 1 17.6 3.22 37.19 37.19 0 0 1 13.12 9 38.37 38.37 0 0 1 8.14 13.72 52.72 52.72 0 0 1 2.79 17.49V227h-12.25a12.37 12.37 0 0 1-5.9-1.15q-2.08-1.15-3.28-4.65l-2.4-8.09a97.21 97.21 0 0 1-8.31 6.72 49 49 0 0 1-8.42 4.86 45.33 45.33 0 0 1-9.35 3 53.92 53.92 0 0 1-11 1 43.08 43.08 0 0 1-13.12-1.91 28.78 28.78 0 0 1-10.38-5.74 25.74 25.74 0 0 1-6.78-9.51 33.72 33.72 0 0 1-2.4-13.23 26.31 26.31 0 0 1 1.42-8.47 24.76 24.76 0 0 1 4.65-8 38.66 38.66 0 0 1 8.36-7.21 54.45 54.45 0 0 1 12.63-5.9 109.07 109.07 0 0 1 17.44-4.1 174.32 174.32 0 0 1 22.76-1.93v-6.56q0-11.26-4.81-16.67t-13.88-5.41a33 33 0 0 0-10.88 1.53 44.89 44.89 0 0 0-7.6 3.44q-3.28 1.91-6 3.44a11.79 11.79 0 0 1-6 1.53 7.79 7.79 0 0 1-4.81-1.48 12.33 12.33 0 0 1-3.17-3.44zM764 179.09a149.06 149.06 0 0 0-19.68 2 52.43 52.43 0 0 0-12.79 3.77 16.81 16.81 0 0 0-6.89 5.36 11.63 11.63 0 0 0-2.08 6.67q0 7.11 4.21 10.17t11 3.06a32 32 0 0 0 14.37-3A42.68 42.68 0 0 0 764 198zM929.42 189.69a5.87 5.87 0 0 1 4.26 1.86l11.59 12.57a63.64 63.64 0 0 1-23.67 18.26q-14 6.34-33.72 6.34-17.6 0-31.65-6a69.71 69.71 0 0 1-24-16.73A73.19 73.19 0 0 1 817 180.4a96 96 0 0 1-5.3-32.47 90.36 90.36 0 0 1 5.68-32.63 75 75 0 0 1 16-25.52A72.5 72.5 0 0 1 858 73.11a81.77 81.77 0 0 1 31.7-6q17.27 0 30.66 5.68a73.08 73.08 0 0 1 22.83 14.91l-9.84 13.66a9 9 0 0 1-2.24 2.29 6.35 6.35 0 0 1-3.77 1 7.2 7.2 0 0 1-3.39-.93q-1.75-.93-3.83-2.29t-4.81-3a39.67 39.67 0 0 0-6.34-3 51.92 51.92 0 0 0-8.36-2.29 57.87 57.87 0 0 0-11-.93A48.74 48.74 0 0 0 870.23 96a42.16 42.16 0 0 0-15.14 10.93 50.38 50.38 0 0 0-9.84 17.49 73.27 73.27 0 0 0-3.5 23.56 69.25 69.25 0 0 0 3.77 23.72 52.12 52.12 0 0 0 10.22 17.49 43.61 43.61 0 0 0 15.2 10.81 47 47 0 0 0 18.8 3.77 81.89 81.89 0 0 0 10.88-.66 46.17 46.17 0 0 0 9-2.08 39.7 39.7 0 0 0 7.76-3.66 48.48 48.48 0 0 0 7.27-5.52 10.31 10.31 0 0 1 2.29-1.58 5.56 5.56 0 0 1 2.48-.58zM961.6 130.44q19.35-17.71 46.57-17.71a45.54 45.54 0 0 1 17.6 3.22 37.19 37.19 0 0 1 13.12 9 38.37 38.37 0 0 1 8.14 13.72 52.72 52.72 0 0 1 2.79 17.49V227h-12.24a12.37 12.37 0 0 1-5.9-1.15q-2.08-1.15-3.28-4.65l-2.4-8.09a97.21 97.21 0 0 1-8.31 6.72 49 49 0 0 1-8.42 4.86 45.33 45.33 0 0 1-9.35 3 53.92 53.92 0 0 1-11 1 43.08 43.08 0 0 1-13.12-1.91 28.78 28.78 0 0 1-10.38-5.74 25.74 25.74 0 0 1-6.78-9.51 33.73 33.73 0 0 1-2.4-13.23 26.31 26.31 0 0 1 1.42-8.47 24.76 24.76 0 0 1 4.65-8 38.66 38.66 0 0 1 8.36-7.21 54.45 54.45 0 0 1 12.63-5.9 109.07 109.07 0 0 1 17.44-4.1 174.32 174.32 0 0 1 22.74-1.91v-6.56q0-11.26-4.81-16.67t-13.88-5.41a33 33 0 0 0-10.88 1.53 44.89 44.89 0 0 0-7.6 3.44q-3.28 1.91-6 3.44a11.79 11.79 0 0 1-6 1.53 7.79 7.79 0 0 1-4.81-1.48 12.33 12.33 0 0 1-3.17-3.44zm61.87 48.64a149.06 149.06 0 0 0-19.68 2 52.43 52.43 0 0 0-12.79 3.8 16.81 16.81 0 0 0-6.89 5.36 11.63 11.63 0 0 0-2.08 6.67q0 7.11 4.21 10.17t11 3.06a32 32 0 0 0 14.37-3 42.68 42.68 0 0 0 11.86-9.13zM1078.18 227V114.81h16.51a6.63 6.63 0 0 1 6.89 4.92l1.75 8.31a63.82 63.82 0 0 1 6.18-6 39.66 39.66 0 0 1 6.89-4.7 37.29 37.29 0 0 1 7.87-3.12 35.05 35.05 0 0 1 9.24-1.15q10.6 0 17.43 5.74a34.56 34.56 0 0 1 10.22 15.25 34.23 34.23 0 0 1 6.56-9.57 35.9 35.9 0 0 1 8.63-6.5 39.77 39.77 0 0 1 10-3.72 48.07 48.07 0 0 1 10.66-1.2 44.82 44.82 0 0 1 16.51 2.84 31.69 31.69 0 0 1 12.13 8.31 36.63 36.63 0 0 1 7.49 13.34 58.1 58.1 0 0 1 2.57 18V227h-27v-71.41q0-10.71-4.7-16.12t-13.77-5.41a20.57 20.57 0 0 0-7.71 1.42 18.37 18.37 0 0 0-6.23 4.1 18.73 18.73 0 0 0-4.21 6.72 26.13 26.13 0 0 0-1.53 9.29V227h-27.11v-71.41q0-11.26-4.54-16.4t-13.28-5.14a21.83 21.83 0 0 0-11 2.9 36.66 36.66 0 0 0-9.46 7.92V227zM1289.85 130.12a58.51 58.51 0 0 1 15.63-12.57q8.74-4.81 20.55-4.81a36.79 36.79 0 0 1 16.78 3.83 37.68 37.68 0 0 1 13.12 11.09 53.26 53.26 0 0 1 8.53 17.93 90.21 90.21 0 0 1 3 24.43 76.84 76.84 0 0 1-3.39 23.28 57 57 0 0 1-9.67 18.58 44.72 44.72 0 0 1-15.19 12.3 44.22 44.22 0 0 1-19.95 4.43 40.23 40.23 0 0 1-16.07-2.9 39.23 39.23 0 0 1-11.92-8v45.91h-27V114.81h16.51a6.63 6.63 0 0 1 6.89 4.92zm1.42 67.77a26.57 26.57 0 0 0 10 7.87 29.76 29.76 0 0 0 11.75 2.3 25.79 25.79 0 0 0 11-2.3 21.63 21.63 0 0 0 8.36-7 34.62 34.62 0 0 0 5.3-11.86 67.79 67.79 0 0 0 1.86-16.89 75 75 0 0 0-1.58-16.67 32.22 32.22 0 0 0-4.54-11.09 17.92 17.92 0 0 0-7.16-6.23 22.34 22.34 0 0 0-9.57-2 27.28 27.28 0 0 0-14.32 3.55 43.46 43.46 0 0 0-11.15 10z"></path><path d="M144.06 306.77a9.83 9.83 0 0 1-4.72-1.21L23.79 242a9.82 9.82 0 0 1-5-7.56L.06 57.52a9.77 9.77 0 0 1 6.5-10.29L139.37.55a9.88 9.88 0 0 1 6.43 0L281.5 47.2a9.86 9.86 0 0 1 6.5 10.47L266.47 234.6a9.85 9.85 0 0 1-4.91 7.35l-112.68 63.56a9.84 9.84 0 0 1-4.82 1.26zm-110-77l110 60.49 107.22-60.48L271.89 60.5 142.64 16 16.15 60.5z"></path></svg></a></div>
<div class="jsx-499055511 icon mobileOnly"><svg xmlns="http://www.w3.org/2000/svg" viewbox="0 0 80 70"><path d="M6 1a6 6 0 1 0 0 12h68a6 6 0 0 0 0-12H6zm0 28a6 6 0 1 0 0 12h68a6 6 0 0 0 0-12H6zm0 28a6 6 0 1 0 0 12h68a6 6 0 0 0 0-12H6z"></path></svg></div>
</div>
<div class="jsx-2769082546 Menu mobileOnlyHide">
<div class="jsx-2769082546 section">
<h5 class="jsx-2769082546">community</h5>
<nav class="jsx-2769082546"><div><a target="_self" class="jsx-2769082546 item" href="/community"><div class="jsx-2769082546 image"><svg height="14" xmlns="http://www.w3.org/2000/svg" viewbox="0 0 23 23"><path id="a" d="M2 4.5h20a1.5 1.5 0 0 1 0 3H2a1.5 1.5 0 0 1 0-3zm0 6h14a1.5 1.5 0 0 1 0 3H2a1.5 1.5 0 0 1 0-3zm0 6h20a1.5 1.5 0 0 1 0 3H2a1.5 1.5 0 0 1 0-3z"></path></svg></div>
<div class="jsx-2769082546 text">News</div>
<div class="jsx-2769082546 statusIcon"><svg height="20" xmlns="http://www.w3.org/2000/svg" width="40" viewbox="0 0 40 20"><g fill="none" fill-rule="evenodd"><rect width="40" height="20" fill="#FFC844" rx="4"></rect><text fill="#3D4251" font-family="Lato-Bold, Lato" font-size="11" font-weight="bold" letter-spacing=".5"><tspan x="5" y="14">BETA</tspan></text></g></svg></div></a></div>
<div><a target="_self" class="jsx-2769082546 item" href="https://www.datacamp.com/resources"><div class="jsx-2769082546 image"><svg height="14" xmlns="http://www.w3.org/2000/svg" viewbox="0 0 21.75 29.76"><path d="M15.56 22.57a1.5 1.5 0 0 1-1.5-1.5 7.66 7.66 0 0 1 2.47-5.29 7.38 7.38 0 0 0 2.21-5.31A7.48 7.48 0 0 0 11.28 3h-.82a7.47 7.47 0 0 0-5.2 12.83 7.63 7.63 0 0 1 2.42 5.23 1.5 1.5 0 0 1-3 0 4.65 4.65 0 0 0-1.45-3A10.47 10.47 0 0 1 10.47 0h.82a10.47 10.47 0 0 1 7.28 18 4.68 4.68 0 0 0-1.5 3.08 1.5 1.5 0 0 1-1.51 1.49zM16.5 24.26a5.5 5.5 0 0 1-11 0"></path><path d="M10.89 22.56a1.5 1.5 0 0 1-1.5-1.5v-8.84a1.5 1.5 0 0 1 3 0v8.84a1.5 1.5 0 0 1-1.5 1.5z"></path></svg></div>
<div class="jsx-2769082546 text">Resource Center</div></a></div>
<div><a target="_self" class="jsx-2769082546 item active" href="/community/tutorials"><div class="jsx-2769082546 image"><svg height="14" xmlns="http://www.w3.org/2000/svg" viewbox="0 0 32 24.22"><path d="M16.23 24.22a2 2 0 0 1-.73-.14L7 20.79a2 2 0 0 1-1.29-1.88v-4a1.5 1.5 0 0 1 3 0v3.36l7.54 2.92 7.54-2.92v-3.45a1.5 1.5 0 0 1 3 0v4.09a2 2 0 0 1-1.29 1.88L17 24.08a2 2 0 0 1-.77.14zm-.35-2.94zm.7 0z"></path><path d="M16.23 13.35a2 2 0 0 1-.62-.1C9.17 11.16 2.36 9 1.61 8.76a2 2 0 0 1-.25-3.87l14-4.78a2 2 0 0 1 1.3 0l14 4.78a2 2 0 0 1 0 3.81l-13.8 4.55a2 2 0 0 1-.63.1zm-.31-3zM5.21 6.74c3.49 1.11 9.07 2.92 11 3.56l10.68-3.53L16 3.05z"></path></svg></div>
<div class="jsx-2769082546 text">Tutorials</div></a></div>
<div><a target="_self" class="jsx-2769082546 item" href="/community/data-science-cheatsheets"><div class="jsx-2769082546 image"><svg height="14" xmlns="http://www.w3.org/2000/svg" viewbox="0 0 24 26"><path d="M18.5 26h-13A5.51 5.51 0 0 1 0 20.5v-15A5.51 5.51 0 0 1 5.5 0h13A5.51 5.51 0 0 1 24 5.5v15a5.51 5.51 0 0 1-5.5 5.5zM5.5 3A2.5 2.5 0 0 0 3 5.5v15A2.5 2.5 0 0 0 5.5 23h13a2.5 2.5 0 0 0 2.5-2.5v-15A2.5 2.5 0 0 0 18.5 3z"></path><path d="M16 11H8a1.5 1.5 0 0 1 0-3h8a1.5 1.5 0 0 1 0 3zM16 18H8a1.5 1.5 0 0 1 0-3h8a1.5 1.5 0 0 1 0 3z"></path></svg></div>
<div class="jsx-2769082546 text">Cheat Sheets</div></a></div>
<div><a target="_self" class="jsx-2769082546 item" href="/community/open-courses"><div class="jsx-2769082546 image"><svg height="14" xmlns="http://www.w3.org/2000/svg" viewbox="0 0 34 26"><path d="M28.5 26h-23A5.51 5.51 0 0 1 0 20.5v-15A5.51 5.51 0 0 1 5.5 0h23A5.51 5.51 0 0 1 34 5.5v15a5.51 5.51 0 0 1-5.5 5.5zM5.5 3A2.5 2.5 0 0 0 3 5.5v15A2.5 2.5 0 0 0 5.5 23h23a2.5 2.5 0 0 0 2.5-2.5v-15A2.5 2.5 0 0 0 28.5 3z"></path><path d="M13.5 26a1.5 1.5 0 0 1-1.5-1.5v-22a1.5 1.5 0 0 1 3 0v22a1.5 1.5 0 0 1-1.5 1.5zM27 11h-8a1.5 1.5 0 0 1 0-3h8a1.5 1.5 0 0 1 0 3zM27 18h-8a1.5 1.5 0 0 1 0-3h8a1.5 1.5 0 0 1 0 3z"></path></svg></div>
<div class="jsx-2769082546 text">Open Courses</div></a></div>
<div><a target="_self" class="jsx-2769082546 item" href="/community/podcast"><div class="jsx-2769082546 image"><svg height="14" xmlns="http://www.w3.org/2000/svg" width="18" viewbox="0 0 18 18"><path d="M9.415 11.077h-.369a2.777 2.777 0 0 1-2.769-2.77V2.77A2.777 2.777 0 0 1 9.047 0h.368a2.777 2.777 0 0 1 2.77 2.77v5.538a2.777 2.777 0 0 1-2.77 2.769zm5.008-7.615c.573 0 1.039.464 1.039 1.038v3.462c0 3.08-2.25 5.64-5.193 6.136v1.825h2.077a1.038 1.038 0 1 1 0 2.077h-6.23a1.038 1.038 0 1 1 0-2.077h2.076v-1.825C5.25 13.602 3 11.042 3 7.962V4.5a1.038 1.038 0 1 1 2.077 0v3.462a4.158 4.158 0 0 0 4.154 4.153 4.158 4.158 0 0 0 4.154-4.153V4.5c0-.574.465-1.038 1.038-1.038z"></path></svg></div>
<div class="jsx-2769082546 text">Podcast - DataFramed</div></a></div>
<div><a target="_self" class="jsx-2769082546 item" href="/community/chat"><div class="jsx-2769082546 image"><svg height="14" xmlns="http://www.w3.org/2000/svg" viewbox="0 0 18 16"><g transform="translate(0 -1)"><path id="path-1" d="M12.595 13.364c.01-.111.02-.197.028-.251.058-.405.372-.702.74-.702h1.257c1.035-.002 1.875-.934 1.88-2.082V4.764c-.001-1.155-.842-2.092-1.878-2.094H3.38c-1.034.002-1.873.931-1.88 2.076v5.565c.001 1.156.842 2.092 1.878 2.094h6.626c.292 0 .557.189.68.484.408.977 1.07 1.576 1.94 1.85a6.004 6.004 0 0 1-.03-1.375h.001zm1.51 1.119c.048.314.136.521.235.606.566.487.258 1.497-.458 1.497-1.87 0-3.423-.785-4.33-2.51H3.376C1.513 14.07.004 12.39 0 10.311V4.74C.014 2.673 1.52 1.004 3.378 1h11.245c1.864.004 3.373 1.686 3.377 3.763v5.57c-.01 2.07-1.518 3.744-3.378 3.748h-.551c.004.138.016.273.035.402h-.001zm-8.423-5.81a1.115 1.115 0 1 0 0-2.229 1.115 1.115 0 0 0 0 2.229zm3.268 0a1.115 1.115 0 1 0 0-2.229 1.115 1.115 0 0 0 0 2.229zm3.318 0a1.114 1.114 0 1 0 0-2.229 1.114 1.114 0 0 0 0 2.229z"></path></g></svg></div>
<div class="jsx-2769082546 text">Chat</div>
<div class="jsx-2769082546 statusIcon"><svg height="20" xmlns="http://www.w3.org/2000/svg" width="40" viewbox="0 0 40 17"><g fill="none" fill-rule="evenodd"><rect width="40" height="17" fill="#36D57D" rx="4"></rect><text fill="#FFF" font-family="Lato-Bold, Lato" font-size="12" font-weight="bold" letter-spacing=".4"><tspan x="5" y="13">NEW</tspan></text></g></svg></div></a></div></nav>
</div>
<div class="jsx-2769082546 section">
<h5 class="jsx-2769082546">datacamp</h5>
<nav class="jsx-2769082546"><div><a target="_self" class="jsx-2769082546 item" href="/community/blog"><div class="jsx-2769082546 image"><svg height="14" id="Réteg_1" xmlns="http://www.w3.org/2000/svg" viewbox="0 0 17 18"><path id="path-1_1_" d="M12.3 9.8s-.1.1 0 .4c.1.2.2.2-.1.5.2.2.2.3-.1.5 0 .5.1.9-.5 1-.6 0-1.4-.4-1.7.8-.2 1.1-.2.7-.2 1H5.3c.6-1.5 1-3.2 0-4-1.1-1-2.7-4.4.6-6.2.4-.2.8-.3 1.2-.4L6.9 3s1.4-.5 2.7.1v.2c.8.2 1.4.5 1.6.6.5.3 1.2.8 1.2 1.3.1.5-.5.2-.5.2.4.9.4 1.5.2 2.2-.2.7.8 1.4.7 1.9-.1.3-.5.3-.5.3m4.2-7L8.6 0h-.4L.4 2.8c-.3.1-.4.3-.4.6l1.1 10.4c0 .2.1.4.3.4l6.8 3.7c.2.1.4.1.6 0l6.6-3.7c.2-.1.3-.3.3-.4L17 3.4c-.1-.3-.2-.5-.5-.6M8.3 7c-.4 0-.7-.4-.7-.8s.3-.7.7-.7c.4 0 .7.3.7.7 0 .4-.3.8-.7.8zm2.9-1.4l.2-.1c-.3-1-1.2-1.5-1.2-1.5l-.2.2c-.1-.2-.6-.4-.7-.5l.1-.3h-.1c-.6-.3-1.3-.3-2.1 0l.4 1.1c-.6.2-1.1.7-1.1.7l-.6-.4c-.3.5-.5 1.2-.5 1.8h-.8c0 .5.1 1.4.7 2.2l.6-.4c.5.7 1.6 1.3 2.4 1.2V8.1c.3 0 .7-.1.9-.3l.4.6c.4-.1.8-1 .8-1.1l.7.2c.2-.6.2-1.3.1-1.9z"></path></svg></div>
<div class="jsx-2769082546 text">Official Blog</div></a></div></nav>
</div>
</div>
<main class="jsx-1028385822 Main"><div class="jsx-2159026896 ActionBar">
<div><div class="jsx-3863678361 ActionBarSearch"><button style="font-weight:normal" class="jsx-1844558338 Button extra noPadding"><div class="jsx-1844558338 icon"><svg xmlns="http://www.w3.org/2000/svg" viewbox="0 0 20.03 23"><path d="M10.39 19.29A9.65 9.65 0 1 1 20 9.65a9.66 9.66 0 0 1-9.61 9.64zm0-17.06a7.42 7.42 0 1 0 7.42 7.42 7.43 7.43 0 0 0-7.42-7.42z"></path><path d="M1.11 23a1.11 1.11 0 0 1-.89-1.78l4.1-5.47a1.11 1.11 0 1 1 1.78 1.34L2 22.56a1.11 1.11 0 0 1-.89.44z"></path></svg></div>
<div class="jsx-1844558338 desktopOnly">Search</div></button></div></div>
<div class="jsx-2159026896 authBlock">
<div></div>
<div class="jsx-3196442269 ActionBarAuth">
<div class="jsx-3196442269">
<a href="https://www.datacamp.com/users/sign_in?redirect=https://www.datacamp.com/community" class="jsx-3196442269"><button class="jsx-1844558338 Button border minWidth"><div class="jsx-1844558338 ">Log in</div></button></a><button class="jsx-1844558338 Button primary"><div class="jsx-1844558338 ">Create Account</div></button>
</div>
<div class="jsx-728636942 SubmitAnArticleButton">
<button class="jsx-1844558338 Button desktopButton green noPadding"><div class="jsx-1844558338 icon"><svg id="Layer_1" xmlns="http://www.w3.org/2000/svg" viewbox="-90 92 18 18"><path id="a" d="M-80.4 100.4V97c0-.3-.3-.6-.6-.6s-.6.3-.6.6v3.4H-85c-.3 0-.6.3-.6.6s.3.6.6.6h3.4v3.4c0 .3.3.6.6.6s.6-.3.6-.6v-3.4h3.4c.3 0 .6-.3.6-.6s-.3-.6-.6-.6h-3.4zM-81 92c5 0 9 4 9 9s-4 9-9 9-9-4-9-9 4-9 9-9z"></path></svg></div>
<div class="jsx-1844558338 desktopOnly">Share an Article</div></button><div class="jsx-728636942 mobileButton"><svg xmlns="http://www.w3.org/2000/svg" width="40" height="40" viewbox="0 0 40 40"><path d="M20.86 19.15v-4.822c0-.47-.385-.851-.86-.851s-.86.38-.86.85v4.822h-4.878c-.475 0-.86.381-.86.851s.385.85.86.85h4.877v4.822c0 .47.386.851.861.851s.86-.38.86-.85V20.85h4.878c.475 0 .86-.381.86-.851s-.385-.85-.86-.85h-4.877zM20 0c11.045 0 20 8.953 20 20 0 11.045-8.955 20-20 20C8.953 40 0 31.045 0 20 0 8.953 8.953 0 20 0z"></path></svg></div>
</div>
</div>
</div>
</div>
<div class="jsx-1514242801 TitleBar">
<div class="jsx-1514242801 filter"><button class="jsx-1844558338 Button iconButton noPadding"><div class="jsx-1844558338 icon"><svg id="Réteg_1" xmlns="http://www.w3.org/2000/svg" viewbox="0 0 7 12"><path id="path-1_1_" d="M5.9 0c.4 0 .9.3 1 .7s.1.9-.2 1.2L2.7 6l4 4.1c.3.5.3 1.1-.1 1.6s-1.1.4-1.5.1l-4.8-5c-.4-.4-.4-1.2 0-1.6L5.1.3c.2-.2.5-.3.8-.3z"></path></svg></div>
<div class="jsx-1844558338 desktopOnly">Back to Tutorials</div></button></div>
<div class="jsx-1514242801 title"><div class="jsx-3889859319 Title">
<div class="jsx-3889859319 icon"><svg xmlns="http://www.w3.org/2000/svg" viewbox="0 0 32 24.22"><path d="M16.23 24.22a2 2 0 0 1-.73-.14L7 20.79a2 2 0 0 1-1.29-1.88v-4a1.5 1.5 0 0 1 3 0v3.36l7.54 2.92 7.54-2.92v-3.45a1.5 1.5 0 0 1 3 0v4.09a2 2 0 0 1-1.29 1.88L17 24.08a2 2 0 0 1-.77.14zm-.35-2.94zm.7 0z"></path><path d="M16.23 13.35a2 2 0 0 1-.62-.1C9.17 11.16 2.36 9 1.61 8.76a2 2 0 0 1-.25-3.87l14-4.78a2 2 0 0 1 1.3 0l14 4.78a2 2 0 0 1 0 3.81l-13.8 4.55a2 2 0 0 1-.63.1zm-.31-3zM5.21 6.74c3.49 1.11 9.07 2.92 11 3.56l10.68-3.53L16 3.05z"></path></svg></div>
<div class="jsx-3889859319 h1">Tutorials</div>
</div></div>
<div class="jsx-1514242801 action"></div>
</div>
<div class="jsx-1464850800 Tutorial"><div>
<div>
<div></div>
<div class="jsx-undefined social__top desktopOnly"><div class="jsx-undefined voteAndSocial">
<div class="jsx-undefined">
<a href="#comments" class="jsx-3293774837 CommentCounter"><span class="jsx-3293774837 icon"><svg xmlns="http://www.w3.org/2000/svg" viewbox="0 0 18 18"><path d="M12.595 13.364c.01-.111.02-.197.028-.251.058-.405.372-.702.74-.702h1.257c1.035-.002 1.875-.934 1.88-2.082V4.764c-.001-1.155-.842-2.092-1.878-2.094H3.38c-1.034.002-1.873.931-1.88 2.076v5.565c.001 1.156.842 2.092 1.878 2.094h6.626c.292 0 .557.189.68.484.408.977 1.07 1.576 1.94 1.85a6.004 6.004 0 0 1-.03-1.375zm1.51 1.119c.048.314.136.521.235.606.566.487.258 1.497-.458 1.497-1.87 0-3.423-.785-4.33-2.51H3.376C1.513 14.07.004 12.39 0 10.311V4.74C.014 2.673 1.52 1.004 3.378 1h11.245c1.864.004 3.373 1.686 3.377 3.763v5.57c-.01 2.07-1.518 3.744-3.378 3.748h-.551c.004.138.016.273.035.402zm-8.423-5.81a1.114 1.114 0 1 0 0-2.229 1.114 1.114 0 0 0 0 2.229zm3.268 0a1.114 1.114 0 1 0 0-2.229 1.114 1.114 0 0 0 0 2.229zm3.318 0a1.114 1.114 0 1 0 0-2.229 1.114 1.114 0 0 0 0 2.229z"></path></svg></span><span class="jsx-3293774837 count">0</span></a><div class="jsx-1972554161 Upvote"><div class="jsx-1972554161">
<div class="jsx-1972554161 normal">
<span class="jsx-1972554161 icon"><svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" viewbox="0 0 12 12"><path d="M1 10L6 0l5 10z"></path></svg></span><span class="jsx-1972554161 count">98</span>
</div>
<div class="jsx-1972554161 voted">
<span class="jsx-1972554161 icon"><svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" viewbox="0 0 12 12"><path d="M1 10L6 0l5 10z"></path></svg></span><span class="jsx-1972554161 count">98</span>
</div>
</div></div>
</div>
<div class="jsx-494086174 Social vertical"><div class="jsx-494086174 icons">
<a href="https://www.facebook.com/sharer.php?u=https://www.datacamp.com/community/tutorials/sentiment-analysis-R" target="_blank" rel="noopener noreferrer" class="jsx-494086174 icon"><svg height="12" xmlns="http://www.w3.org/2000/svg" viewbox="0 0 11.73 22.58"><path d="M7.61 22.58v-10.3h3.46l.52-4h-4V5.7c0-1.16.32-2 2-2h2.13V.16A28.47 28.47 0 0 0 8.63 0C5.56 0 3.47 1.87 3.47 5.31v3H0v4h3.47v10.3h4.14z"></path></svg></a><a href="https://twitter.com/intent/tweet?url=https://www.datacamp.com/community/tutorials/sentiment-analysis-R" target="_blank" rel="noopener noreferrer" class="jsx-494086174 icon centerIcon"><svg height="10" xmlns="http://www.w3.org/2000/svg" viewbox="0 0 20.42 16.67"><path d="M10 5.18c0-.28-.06-.53-.07-.78a4 4 0 0 1 .73-2.57A4.08 4.08 0 0 1 13.93 0 4 4 0 0 1 17 1.15a.43.43 0 0 0 .46.12 8.68 8.68 0 0 0 2.2-.84l.2-.1a4.36 4.36 0 0 1-1.75 2.28A9 9 0 0 0 20.42 2l-.21.3a3.83 3.83 0 0 1-.23.3A8.45 8.45 0 0 1 18.5 4a.28.28 0 0 0-.13.27A12 12 0 0 1 17 10.18a11.8 11.8 0 0 1-3.37 4.11 11.17 11.17 0 0 1-4.39 2.06 12.53 12.53 0 0 1-4.44.22 11.87 11.87 0 0 1-4.74-1.73L0 14.79a8.6 8.6 0 0 0 6.16-1.74 4.28 4.28 0 0 1-3.91-2.91h.95a6.18 6.18 0 0 0 .89-.12A4.2 4.2 0 0 1 .8 5.88a4 4 0 0 0 1.81.49 4.23 4.23 0 0 1-1.78-3A4.07 4.07 0 0 1 1.38.79 12.06 12.06 0 0 0 10 5.18z" id="iOjKBC.tif"></path></svg></a><a href="https://www.linkedin.com/cws/share?url=https://www.datacamp.com/community/tutorials/sentiment-analysis-R" target="_blank" rel="noopener noreferrer" class="jsx-494086174 icon"><svg height="10" xmlns="http://www.w3.org/2000/svg" viewbox="0 0 16.99 17"><path d="M3.85 17H.34V5.67h3.51zM2.07 4.18a2.09 2.09 0 1 1 2.08-2.09 2.08 2.08 0 0 1-2.08 2.09zM17 17h-3.5v-5.95c0-1.63-.62-2.54-1.91-2.54s-2.14.95-2.14 2.54V17H6.09V5.67h3.36v1.52a4 4 0 0 1 3.42-1.87c2.4 0 4.12 1.47 4.12 4.5V17z"></path></svg></a>
</div></div>
</div></div>
</div>
<div class="jsx-1464850800 preface">
<div class="jsx-1464850800 author"><div class="jsx-566588255 Author"><a href="/profile/debbieliskefa5156febfc047aeb79dee6c802d3d04" target="_blank" class="jsx-566588255"><div style="background-image:url(https://res.cloudinary.com/dyd911kmh/image/fetch/t_avatar_thumbnail/https://assets.datacamp.com/users/avatars/000/713/170/square/debprofile.jpg?1517605205);border-radius:20px;min-width:40px;min-height:40px" class="jsx-3208234818 Avatar"></div>
<div class="jsx-566588255 info">
<div class="jsx-566588255 name">Debbie Liske</div>
<div class="jsx-566588255 date"><span>March 29th, 2018</span></div>
</div></a></div></div>
<div class="jsx-1464850800 tags"><div class="jsx-2792531181 TagLine">
<div class="jsx-1764811326 Tag mustRead"><span class="jsx-1764811326 title">must read</span></div>
<div class="jsx-1764811326 Tag"><span class="jsx-1764811326 title">fun</span></div>
<a class="jsx-1022557955 more">+<!-- -->3</a>
</div></div>
<h1 class="jsx-1464850800 pageTitle">Tidy Sentiment Analysis in R</h1>
<div class="jsx-1464850800 description pageDescription">Learn how to perform tidy sentiment analysis in R on Prince's songs, sentiment over time, song level sentiment, the impact of bigrams, and much more!</div>
</div>
<div class="markdown">
<div>
<p>Take a Sentimental Journey through the life and times of Prince, The Artist, in part Two-A of a three part tutorial series using sentiment analysis with R to shed insight on The Artist's career and societal influence. The three tutorials cover the following:   </p>
<ul>
<li><a href="https://www.datacamp.com/community/tutorials/R-nlp-machine-learning" target="_blank">Part One: Text Mining and Exploratory Analysis  </a></li>
<li>Part Two: Sentiment Analysis and Topic Modeling with NLP  </li>
<li>Part Three: Predictive Analytics using Machine Learning  </li>
</ul>
<p>If you would like to learn more about sentiment analysis, be sure to take a look at our <a href="https://www.datacamp.com/courses/sentiment-analysis-in-r-the-tidy-way" target="_blank">Sentiment Analysis in R: The Tidy Way</a> course.</p>
<p>Did you know that Prince predicted 9/11, on stage, three years before it happened? He may have also predicted his own death. Could this be true? Wouldn't it be interesting to examine his lyrics and make an educated judgment call on your own? On April 21, 1985, he recorded "Sometimes It Snows In April". He died exactly 31 years later on April 21, 2016. Take a look at his choice of words in the sentiment analysis of this song:</p>
<p><figure><center>
  <img src="http://res.cloudinary.com/dyd911kmh/image/upload/f_auto,q_auto:best/v1520597619/snowsinapril_ccmwmx.bmp" alt="Sometimes It Snows In April" align="middle" width="100%"><figcaption><b>Sentiment Analysis of "Sometimes It Snows In April"
  </b></figcaption>
</center></figure><br></p>
<p>This gives new meaning to <em>Predictive</em> Analytics!</p>
<p>Content:</p>
<ul>
<li><a href="#introduction">Introduction</a></li>
<li><a href="#prepwork">Prep Work</a></li>
<li><a href="#descriptivestatistics">Descriptive Statistics</a></li>
<li><a href="#lexiconsandlyrics">Lexicons and Lyrics</a></li>
<li><a href="#analysis">Detailed Analysis</a></li>
<li><a href="#conclusion">Conclusion</a></li>
</ul>
<p>Structure:</p>
<p>Each piece of code is followed by an insight that is typically subjective in nature. Feel free to move from section to section making your own assumptions if you prefer! I recommend reading the following introduction, but if you would like to jump straight to the code, click <a href="#prepwork">here</a>. If you already understand the concept behind lexicons, you can take the fast track by going directly to the <a href="#analysis">detailed analysis section</a>.</p>
<p><a id="introduction"></a></p>
<h2 id="introduction">Introduction</h2>
<h3 id="triplets-three-part-summary">Triplets: Three-Part Summary</h3>
<p>I just rescued two kittens and a puppy, so I think in threes now. Plus, the <em>rule of three</em> is a writing principle that suggests that things that come in threes are inherently funnier, more satisfying, or more effective than other numbers or things - which is why I broke this up into three parts... So, in <a href="https://www.datacamp.com/community/tutorials/R-nlp-machine-learning" target="_blank">Part One</a>, you were introduced to text mining and exploratory analysis using a dataset of hundreds of song lyrics by the legendary artist, Prince. In Part Two, you will focus on sentiment analysis (Two-A) and topic modeling (Two-B) with NLP. Part Three will conclude with additional predictive analytic tasks using machine learning techniques addressing questions such as whether or not it is possible to determine what decade a song was released, or more interestingly, predict whether a song will hit the Billboard charts based on its lyrics. Throughout these tutorials, you will utilize different machine learning algorithms - each highlighted in red in the graphic below.</p>
<p><figure><center>
  <img src="http://res.cloudinary.com/dyd911kmh/image/upload/f_auto,q_auto:best/v1520597618/MLImage_bw1dlm.jpg" alt="Machine Leaning Techniques" align="middle" width="75%"><figcaption>Adapted from the graphic presented <a href="https://hackbrightacademy.com/content/uploads/2014/05/ml_algorithms.png" target="_blank">here</a>. Note that the different aspects of modeling and machine learning techniques do not necessarily fit into a single box as shown above. This is just to give you an idea of what to expect.</figcaption>
</center></figure><br></p>
<p><a id="breakingup"></a></p>
<h3 id="breaking-up-is-hard-to-do">Breaking Up Is Hard To Do</h3>
<p>Yes, I committed to just three parts, but I decided to break up Part Two into Two-A (Sentiment Analysis) and Two-B (Topic Modeling - soon to follow), resulting in four distinct tutorials. There are many great articles and <a href="https://www.datacamp.com/courses/" target="_blank">courses</a> on the process behind sentiment analysis, so the goal in Part Two-A is to focus on deriving insights from the analysis - not just writing the code. You'll use Prince's lyrics as an example, but you can apply the steps to your own favorite artist. Your journey through the complete tutorial series will hopefully fuel a sense of wonder about the opportunities offered by lyrical analysis while being introduced to Natural Language Processing (NLP) and machine learning techniques.</p>
<p><a id="prerequisites"></a></p>
<h3 id="prerequisites">Prerequisites</h3>
<p>Part Two-A of this tutorial series requires a basic understanding of <a href="https://www.tidyverse.org/" target="_blank">tidy</a> data - specifically packages such as <code>dplyr</code> for data transformation, <code>ggplot2</code> for visualizations, and the <code>%&gt;%</code> pipe operator (originally from the <code>magrittr</code> package). You will notice that several steps are typically combined using the <code>%&gt;%</code> operator to keep the code compact and reusable.</p>
<p>As this tutorial is also a case study, it is densely packed with visualizations beyond the commonly used graphs and charts. As a result, another prerequisite is to be able to install new packages in your own environment. In order to focus on capturing insights, I have included code that is designed to be reused on your own dataset, but detailed explanation will require further investigation on your part. Supporting links will be provided for each package. This will expose you to new tools while focusing on their application.</p>
<p><strong>Tip</strong>: read <a href="https://www.datacamp.com/community/tutorials/R-nlp-machine-learning" target="_blank">Part One</a> first in order to have a foundation for the tutorial series and insight into the <em>dense</em> and <em>diverse</em> vocabulary of Prince's lyrics.</p>
<p><a id="overview"></a></p>
<h3 id="sentiment-analysis-overview">Sentiment Analysis Overview</h3>
<ul>
<li>
<p><em>Methods:</em> Sentiment analysis is a type of text mining which aims to determine the opinion and subjectivity of its content. When applied to lyrics, the results can be representative of not only the artist's attitudes, but can also reveal pervasive, cultural influences. There are different methods used for sentiment analysis, including training a known dataset, creating your own classifiers with rules, and using predefined lexical dictionaries (lexicons). In this tutorial, you will use the lexicon-based approach, but I would encourage you to investigate the other methods as well as their associated trade-offs.    </p>
</li>
<li>
<p><em>Levels:</em> Just as there are different methods used for sentiment analysis, there are also different <em>levels</em> of analysis based on the text. These levels are typically identified as <strong>document</strong>, <strong>sentence</strong>, and <strong>word</strong>. In lyrics, the <em>document</em> could be defined as sentiment per decade, year, chart-level, or song. The sentence level is not usually an option with lyrics as punctuation can detract from rhymes and patterns. Word level analysis exposes detailed information and can be used as foundational knowledge for more advanced practices in topic modeling.</p>
</li>
</ul>
<p><a id="goalsandquestions"></a></p>
<h3 id="prepare-your-questions-">Prepare Your Questions!</h3>
<p>Every data science project needs to have a set of questions to explore. Here are a few to keep in mind as you work through this tutorial: is it possible to write a program to determine the mood expressed in lyrics? Are predefined lexicons sufficient? How much data preparation is necessary? Can you link your results to real-life events? Does sentiment change over time? Are hit songs more positive or negative than uncharted songs? What words stand out in the lyrics during the year Prince was said to predict 9/11? Did he predict his own death?</p>
<p><strong>Tip</strong>: lyrical analysis is very different and typically more complex than speeches or books, making it difficult to capture insights, so remember to be cautious of all assumptions! I will propose more questions than answers in this tutorial, so be prepared to think outside of the quadrilateral parallelogram!</p>
<p><a id="prepwork"></a></p>
<h2 id="prep-work">Prep Work</h2>
<h3 id="libraries-and-functions">Libraries and Functions</h3>
<p>To get started analyzing Prince's lyrics, load the libraries below. These may seem daunting at first, but most of them are simply for graphs and charts. Given the frequent use of visuals, it's preferable to define a standard color scheme for consistency. I've created a list using specific ANSI color codes. The <code>theme()</code> function from <code>ggplot2</code> allows customization of individual graphs, so you will also create your own function, <code>theme_lyrics()</code>, that will modify the default settings. The <code>knitr</code> package is an engine for dynamic report generation with R. Use it along with <code>kableExtra</code> and <code>formattable</code> to create attractive text tables with color. Again create your own function, <code>my_kable_styling()</code> to standardize the resulting output of these libraries. I will mention the other packages as they are utilized.</p>
<pre><code class="lang-r">library(dplyr) #Data manipulation (also included in the tidyverse package)
library(tidytext) #Text mining
library(tidyr) #Spread, separate, unite, text mining (also included in the tidyverse package)
library(widyr) #Use for pairwise correlation

#Visualizations!
library(ggplot2) #Visualizations (also included in the tidyverse package)
library(ggrepel) #`geom_label_repel`
library(gridExtra) #`grid.arrange()` for multi-graphs
library(knitr) #Create nicely formatted output tables
library(kableExtra) #Create nicely formatted output tables
library(formattable) #For the color_tile function
library(circlize) #Visualizations - chord diagram
library(memery) #Memes - images with plots
library(magick) #Memes - images with plots (image_read)
library(yarrr)  #Pirate plot
library(radarchart) #Visualizations
library(igraph) #ngram network diagrams
library(ggraph) #ngram network diagrams

#Define some colors to use throughout
my_colors &lt;- c("#E69F00", "#56B4E9", "#009E73", "#CC79A7", "#D55E00", "#D65E00")

#Customize ggplot2's default theme settings
#This tutorial doesn't actually pass any parameters, but you may use it again in future tutorials so it's nice to have the options
theme_lyrics &lt;- function(aticks = element_blank(),
                         pgminor = element_blank(),
                         lt = element_blank(),
                         lp = "none")
{
  theme(plot.title = element_text(hjust = 0.5), #Center the title
        axis.ticks = aticks, #Set axis ticks to on or off
        panel.grid.minor = pgminor, #Turn the minor grid lines on or off
        legend.title = lt, #Turn the legend title on or off
        legend.position = lp) #Turn the legend on or off
}

#Customize the text tables for consistency using HTML formatting
my_kable_styling &lt;- function(dat, caption) {
  kable(dat, "html", escape = FALSE, caption = caption) %&gt;%
  kable_styling(bootstrap_options = c("striped", "condensed", "bordered"),
                full_width = FALSE)
}
</code></pre>
<h3 id="sushi-data">Sushi Data</h3>
<p>As always, you'll start by reading the raw data into a data frame. In <a href="https://www.datacamp.com/community/tutorials/R-nlp-machine-learning" target="_blank">Part One</a>, you performed some data conditioning on the original dataset, such as expanding contractions, removing escape sequences, and converting text to lower case. You saved that clean dataset to a CSV file for use in this tutorial. Use <code>read.csv()</code> to create <code>prince_data</code> and keep in mind that you want your lyrics to be character strings, so make sure to set <code>stringsAsFactors = FALSE</code>. Since you don't need the rows numbered, set <code>row.names = 1</code>.</p>
<p><strong>Note</strong> that you could avoid these parameters by reading this into a modern data frame called a <a href="http://tibble.tidyverse.org/" target="_blank">tibble</a>, using <code>read_csv()</code>, but for consistency with <a href="https://www.datacamp.com/community/tutorials/R-nlp-machine-learning" target="_blank">Part One</a>, <code>read.csv()</code> is used instead.</p>
<pre><code class="lang-r">prince_data &lt;- read.csv('prince_new.csv', stringsAsFactors = FALSE, row.names = 1)
</code></pre>
<p>Take a quick peek at the data:</p>
<pre><code class="lang-r">glimpse(prince_data) #Transposed version of `print()`
</code></pre>
<pre><code>## Observations: 824
## Variables: 10
## $ lyrics      &lt;chr&gt; "all 7 and we will watch them fall they stand in t...
## $ song        &lt;chr&gt; "7", "319", "1999", "2020", "3121", "7779311", "u"...
## $ year        &lt;int&gt; 1992, NA, 1982, NA, 2006, NA, NA, NA, NA, NA, NA, ...
## $ album       &lt;chr&gt; "Symbol", NA, "1999", "Other Songs", "3121", NA, N...
## $ peak        &lt;int&gt; 3, NA, 2, NA, 1, NA, NA, NA, NA, NA, NA, NA, NA, N...
## $ us_pop      &lt;chr&gt; "7", NA, "12", NA, "1", NA, NA, NA, NA, NA, NA, NA...
## $ us_rnb      &lt;chr&gt; "61", NA, "4", NA, "1", NA, NA, NA, NA, NA, NA, NA...
## $ decade      &lt;chr&gt; "1990s", NA, "1980s", NA, "2000s", NA, NA, NA, NA,...
## $ chart_level &lt;chr&gt; "Top 10", "Uncharted", "Top 10", "Uncharted", "Top...
## $ charted     &lt;chr&gt; "Charted", "Uncharted", "Charted", "Uncharted", "C...
</code></pre>
<p>You can see that <code>prince_data</code> is a data frame of 824 songs and 10 columns. This means that a <em>record</em> is a <em>song</em>, literally!</p>
<h3 id="good-clean-fun-prince_tidy-">Good Clean Fun: <code>prince_tidy</code>
</h3>
<p>Here are a few remaining data wrangling steps:  </p>
<ul>
<li>Remove undesirable words (manual list of unnecessary words)    </li>
<li>Remove stop words (overly common words such as "and", "the", "a", "of", etc.)  </li>
<li>Remove words with fewer than three characters (often used for phonetic effect in music)  </li>
<li>Split the lyrics into individual words  </li>
</ul>
<p>In order to turn your raw data into a <em>tidy</em> format, use <code>unnest_tokens()</code> from <code>tidytext</code> to create <code>prince_tidy</code> which breaks out the lyrics into individual words with one word per row. Then, you can use <code>anti_join()</code> and <code>filter()</code> from <code>dplyr</code> for the remaining cleaning steps. <em>(See <a href="https://www.datacamp.com/community/tutorials/R-nlp-machine-learning" target="_blank">Part One</a> for a detailed explanation.)</em></p>
<pre><code class="lang-r">#Created in the first tutorial
undesirable_words &lt;- c("prince", "chorus", "repeat", "lyrics",
                       "theres", "bridge", "fe0f", "yeah", "baby",
                       "alright", "wanna", "gonna", "chorus", "verse",
                       "whoa", "gotta", "make", "miscellaneous", "2",
                       "4", "ooh", "uurh", "pheromone", "poompoom", "3121",
                       "matic", " ai ", " ca ", " la ", "hey", " na ",
                       " da ", " uh ", " tin ", "  ll", "transcription",
                       "repeats", "la", "da", "uh", "ah")

#Create tidy text format: Unnested, Unsummarized, -Undesirables, Stop and Short words
prince_tidy &lt;- prince_data %&gt;%
  unnest_tokens(word, lyrics) %&gt;% #Break the lyrics into individual words
  filter(!word %in% undesirable_words) %&gt;% #Remove undesirables
  filter(!nchar(word) &lt; 3) %&gt;% #Words like "ah" or "oo" used in music
  anti_join(stop_words) #Data provided by the tidytext package
</code></pre>
<pre><code class="lang-r">glimpse(prince_tidy) #From `dplyr`, better than `str()`.
</code></pre>
<pre><code>## Observations: 76,116
## Variables: 10
## $ song        &lt;chr&gt; "7", "7", "7", "7", "7", "7", "7", "7", "7", "7", ...
## $ year        &lt;int&gt; 1992, 1992, 1992, 1992, 1992, 1992, 1992, 1992, 19...
## $ album       &lt;chr&gt; "Symbol", "Symbol", "Symbol", "Symbol", "Symbol", ...
## $ peak        &lt;int&gt; 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,...
## $ us_pop      &lt;chr&gt; "7", "7", "7", "7", "7", "7", "7", "7", "7", "7", ...
## $ us_rnb      &lt;chr&gt; "61", "61", "61", "61", "61", "61", "61", "61", "6...
## $ decade      &lt;chr&gt; "1990s", "1990s", "1990s", "1990s", "1990s", "1990...
## $ chart_level &lt;chr&gt; "Top 10", "Top 10", "Top 10", "Top 10", "Top 10", ...
## $ charted     &lt;chr&gt; "Charted", "Charted", "Charted", "Charted", "Chart...
## $ word        &lt;chr&gt; "watch", "fall", "stand", "love", "smoke", "intell...
</code></pre>
<p>Your new dataset, <code>prince_tidy</code>, is now in a <em>tokenized</em> format with one word per row along with the song from which it came. You now have a data frame of 76116 words and 10 columns.</p>
<p><a id="descriptivestatistics"></a></p>
<h2 id="descriptive-statistics">Descriptive Statistics</h2>
<p>If you haven't read <a href="https://www.datacamp.com/community/tutorials/R-nlp-machine-learning" target="_blank">Part One</a>, you may need to take a quick look at a few summary graphs of the full dataset. You'll do this using creative graphs from the <code>ggplot2</code>, <code>circlize</code>, and <code>yarrr</code> packages.</p>
<h3 id="shipshape-word-count-per-song">Shipshape: Word Count Per Song</h3>
<p>A pirate would say <em>shipshape</em> when everything is in good order, tidy and clean. So here is an interesting view of the clean and tidy data showing the lexical <em>diversity</em>, or, in other words, vocabulary, of the lyrics over time. A <em>pirate plot</em> is an advanced method of plotting a continuous dependent variable, such as the word count, as a function of a categorical independent variable, like decade. This combines raw data points, descriptive and inferential statistics into a single effective plot. Check out <a href="https://www.r-bloggers.com/the-pirate-plot-an-r-pirates-favorite-plot/" target="_blank">this great blog</a> for more details about <code>pirateplot()</code> from the <code>yarrr</code> package.</p>
<p>Create the <code>word_summary</code> data frame that calculates the distinct word count per song. The more diverse the lyrics, the larger the vocabulary. Thinking about the data in this way gets you ready for <em>word level</em> analysis. Reset the decade field to contain the value <code>"NONE"</code> for songs without a release date and relabel those fields with cleaner labels using <code>select()</code>.</p>
<pre><code class="lang-r">word_summary &lt;- prince_tidy %&gt;%
  mutate(decade = ifelse(is.na(decade),"NONE", decade)) %&gt;%
  group_by(decade, song) %&gt;%
  mutate(word_count = n_distinct(word)) %&gt;%
  select(song, Released = decade, Charted = charted, word_count) %&gt;%
  distinct() %&gt;% #To obtain one record per song
  ungroup()

pirateplot(formula =  word_count ~ Released + Charted, #Formula
   data = word_summary, #Data frame
   xlab = NULL, ylab = "Song Distinct Word Count", #Axis labels
   main = "Lexical Diversity Per Decade", #Plot title
   pal = "google", #Color scheme
   point.o = .2, #Points
   avg.line.o = 1, #Turn on the Average/Mean line
   theme = 0, #Theme
   point.pch = 16, #Point `pch` type
   point.cex = 1.5, #Point size
   jitter.val = .1, #Turn on jitter to see the songs better
   cex.lab = .9, cex.names = .7) #Axis label size
</code></pre>
<p><img src="http://res.cloudinary.com/dyd911kmh/image/upload/f_auto,q_auto:best/v1520597736/unnamed-chunk-5-1_w9siyy.png"></p>
<p>Every colored circle in this pirate plot represents a song. The dense red area with the <code>"NONE</code>" value shows that a large number of songs in the dataset do not have a release date. There is a slight upward trend in the unique number of words per song in the early decades: the solid horizontal line shows the mean word count for that decade. This is important to know when you begin to analyze the sentiment over time. The words become more illuminating throughout Prince's career.</p>
<p>I would challenge you to explore pirate plots in more detail as you've only touched the surface with this one!</p>
<h3 id="all-year-round-song-count-per-year">All Year Round: Song Count Per Year</h3>
<p>Circular graphs are a unique way to visualize complicated (or simple!) relationships among several categories. (Plus, albums used to be round!). The graph below is simply a circular bar chart using <code>coord_polar()</code> from <code>ggplot2</code> that shows the relative number of songs per year. It's a ton of code to produce such a simple graph, but it's totally worth it. A similar example can be found in more detail in the R Graph Gallery <a href="https://www.r-graph-gallery.com/296-add-labels-to-circular-barplot/" target="_blank">here</a>. As with pirate plots, this is only an introduction to what you can do with <a href="http://circos.ca/images/samples/" target="_blank">circular plots</a>.</p>
<p></p>
<center><b>Song Count Per Year</b></center>
<br><pre><code class="lang-r">songs_year &lt;- prince_data %&gt;%
  select(song, year) %&gt;%
  group_by(year) %&gt;%
  summarise(song_count = n())

id &lt;- seq_len(nrow(songs_year))
songs_year &lt;- cbind(songs_year, id)
label_data = songs_year
number_of_bar = nrow(label_data) #Calculate the ANGLE of the labels
angle = 90 - 360 * (label_data$id - 0.5) / number_of_bar #Center things
label_data$hjust &lt;- ifelse(angle &lt; -90, 1, 0) #Align label
label_data$angle &lt;- ifelse(angle &lt; -90, angle + 180, angle) #Flip angle
ggplot(songs_year, aes(x = as.factor(id), y = song_count)) +
  geom_bar(stat = "identity", fill = alpha("purple", 0.7)) +
  geom_text(data = label_data, aes(x = id, y = song_count + 10, label = year, hjust = hjust), color = "black", alpha = 0.6, size = 3, angle =  label_data$angle, inherit.aes = FALSE ) +
  coord_polar(start = 0) +
  ylim(-20, 150) + #Size of the circle
  theme_minimal() +
  theme(axis.text = element_blank(),
        axis.title = element_blank(),
        panel.grid = element_blank(),
        plot.margin = unit(rep(-4,4), "in"),
        plot.title = element_text(margin = margin(t = 10, b = -10)))
</code></pre>
<p><img src="http://res.cloudinary.com/dyd911kmh/image/upload/f_auto,q_auto:best/v1520597737/unnamed-chunk-6-1_o9efzl.png"><br></p>
<p>See the gap at the very top? This is an indicator of the hundreds of songs without release dates you identified in the pirate plot. With such a large number of unreleased songs, the chart would not be useful if they were included. The missing years indicate those where no songs were released. The most prolific years were 1996 and 1998.</p>
<p>Do you want to know why? Keep reading!</p>
<h3 id="chords-charted-songs-by-decade">Chords: Charted Songs By Decade</h3>
<p>The following graph shows the relationship between the decade a song was released and whether or not it hit the Billboard charts. Using a <code>chordDiagram()</code> for musical analysis just seemed appropriate! This graphical tool is from the beautiful <a href="https://cran.r-project.org/web/packages/circlize/circlize.pdf" target="_blank"><code>circlize</code></a> package by Zuguang Gu. The graph is split into two categories: charted (top), and decade (bottom). The two categories are separated by wide gaps, with smaller gaps between the values. The high-level comments in the code below can be supplemented with more detail <a href="https://www.r-graph-gallery.com/chord-diagram/" target="_blank">here</a>.</p>
<pre><code class="lang-r">decade_chart &lt;-  prince_data %&gt;%
  filter(decade != "NA") %&gt;% #Remove songs without release dates
  count(decade, charted)  #Get SONG count per chart level per decade. Order determines top or bottom.

circos.clear() #Very important - Reset the circular layout parameters!
grid.col = c("1970s" = my_colors[1], "1980s" = my_colors[2], "1990s" = my_colors[3], "2000s" = my_colors[4], "2010s" = my_colors[5], "Charted" = "grey", "Uncharted" = "grey") #assign chord colors
# Set the global parameters for the circular layout. Specifically the gap size
circos.par(gap.after = c(rep(5, length(unique(decade_chart[[1]])) - 1), 15,
                         rep(5, length(unique(decade_chart[[2]])) - 1), 15))

chordDiagram(decade_chart, grid.col = grid.col, transparency = .2)
title("Relationship Between Chart and Decade")
</code></pre>
<p><img src="http://res.cloudinary.com/dyd911kmh/image/upload/f_auto,q_auto:best/v1520597737/unnamed-chunk-7-1_djmg1v.png"></p>
<p>The above circle graph may seem complex at first glance, but it nicely illustrates the counts of songs per decade, per chart level. You can see that Prince began his career in the 1970s with only a few releases, some of which charted. If you compare the 1980s to the 1990s, you'll find that more songs were released in the 1990s, but more songs charted in the 1980s. There were only a few commercially successful songs in the 2000s and in the 2010s there were no hit songs.</p>
<p><a id="lexiconsandlyrics"></a></p>
<h2 id="lexicons-and-lyrics">Lexicons and Lyrics</h2>
<p>In this section you will:</p>
<ul>
<li>Explore the sentiment lexicons and their word counts</li>
<li>Identify how many words from the lyrics exist in the lexicons</li>
<li>Look at specific words and word forms</li>
<li>Consider additional data conditioning</li>
</ul>
<p><a id="explore"></a></p>
<h3 id="explore-sentiment-lexicons">Explore Sentiment Lexicons</h3>
<p>The <code>tidytext</code> package includes a dataset called <code>sentiments</code> which provides several distinct lexicons. These lexicons are dictionaries of words with an assigned sentiment category or value. <code>tidytext</code> provides three general purpose lexicons:</p>
<ul>
<li>
<strong>AFINN:</strong> assigns words with a score that runs between -5 and 5, with negative scores indicating negative sentiment and positive scores indicating positive sentiment</li>
<li>
<strong>Bing:</strong> assigns words into positive and negative categories</li>
<li>
<strong>NRC:</strong> assigns words into one or more of the following ten categories: positive, negative, anger, anticipation, disgust, fear, joy, sadness, surprise, and trust</li>
</ul>
<p>In order to examine the lexicons, create a data frame called <code>new_sentiments</code>. Filter out a financial lexicon, create a binary (also described as <em>polar</em>) sentiment field for the AFINN lexicon by converting the numerical score to <em>positive</em> or <em>negative</em>, and add a field that holds the distinct word count for each lexicon.</p>
<p><code>new_sentiments</code> has one column with the different sentiment categories, so for a better view of the word counts per lexicon, per category, use <code>spread()</code> from <code>tidyr</code> to pivot those categories into separate fields. Take advantage of the <code>knitr</code> and <code>kableExtra</code> packages in the <code>my_kable_styling()</code> function you created earlier. Add color to your chart using <code>color_tile()</code> and <code>color_bar()</code> from <code>formattable</code> to create a nicely <a href="https://cran.r-project.org/web/packages/formattable/vignettes/formattable-data-frame.html" target="_blank">formatted table</a>. Print your table and examine the differences between each lexicon.</p>
<pre><code class="lang-r">new_sentiments &lt;- sentiments %&gt;% #From the tidytext package
  filter(lexicon != "loughran") %&gt;% #Remove the finance lexicon
  mutate( sentiment = ifelse(lexicon == "AFINN" &amp; score &gt;= 0, "positive",
                              ifelse(lexicon == "AFINN" &amp; score &lt; 0,
                                     "negative", sentiment))) %&gt;%
  group_by(lexicon) %&gt;%
  mutate(words_in_lexicon = n_distinct(word)) %&gt;%
  ungroup()

new_sentiments %&gt;%
  group_by(lexicon, sentiment, words_in_lexicon) %&gt;%
  summarise(distinct_words = n_distinct(word)) %&gt;%
  ungroup() %&gt;%
  spread(sentiment, distinct_words) %&gt;%
  mutate(lexicon = color_tile("lightblue", "lightblue")(lexicon),
         words_in_lexicon = color_bar("lightpink")(words_in_lexicon)) %&gt;%
  my_kable_styling(caption = "Word Counts Per Lexicon")
</code></pre>
<div class="output_wrapper">
<table class="table table-striped table-condensed table-bordered" style="width:auto;margin-left:auto;margin-right:auto;">
<caption>Word Counts Per Lexicon</caption>
 <thead><tr>
<th style="text-align:left;"> lexicon </th>
   <th style="text-align:left;"> words_in_lexicon </th>
   <th style="text-align:right;"> anger </th>
   <th style="text-align:right;"> anticipation </th>
   <th style="text-align:right;"> disgust </th>
   <th style="text-align:right;"> fear </th>
   <th style="text-align:right;"> joy </th>
   <th style="text-align:right;"> negative </th>
   <th style="text-align:right;"> positive </th>
   <th style="text-align:right;"> sadness </th>
   <th style="text-align:right;"> surprise </th>
   <th style="text-align:right;"> trust </th>
  </tr></thead>
<tbody>
<tr>
<td style="text-align:left;"> <span style="display:block;padding:0 4px;border-radius:4px;background-color:#add8e6;">AFINN</span> </td>
   <td style="text-align:left;"> <span style="display:inline-block;direction:rtl;border-radius:4px;padding-right:2px;background-color:lightpink;width:36.49%;">2476</span> </td>
   <td style="text-align:right;"> NA </td>
   <td style="text-align:right;"> NA </td>
   <td style="text-align:right;"> NA </td>
   <td style="text-align:right;"> NA </td>
   <td style="text-align:right;"> NA </td>
   <td style="text-align:right;"> 1597 </td>
   <td style="text-align:right;"> 879 </td>
   <td style="text-align:right;"> NA </td>
   <td style="text-align:right;"> NA </td>
   <td style="text-align:right;"> NA </td>
  </tr>
<tr>
<td style="text-align:left;"> <span style="display:block;padding:0 4px;border-radius:4px;background-color:#add8e6;">bing </span> </td>
   <td style="text-align:left;"> <span style="display:inline-block;direction:rtl;border-radius:4px;padding-right:2px;background-color:lightpink;width:100.00%;">6785</span> </td>
   <td style="text-align:right;"> NA </td>
   <td style="text-align:right;"> NA </td>
   <td style="text-align:right;"> NA </td>
   <td style="text-align:right;"> NA </td>
   <td style="text-align:right;"> NA </td>
   <td style="text-align:right;"> 4782 </td>
   <td style="text-align:right;"> 2006 </td>
   <td style="text-align:right;"> NA </td>
   <td style="text-align:right;"> NA </td>
   <td style="text-align:right;"> NA </td>
  </tr>
<tr>
<td style="text-align:left;"> <span style="display:block;padding:0 4px;border-radius:4px;background-color:#add8e6;">nrc  </span> </td>
   <td style="text-align:left;"> <span style="display:inline-block;direction:rtl;border-radius:4px;padding-right:2px;background-color:lightpink;width:95.33%;">6468</span> </td>
   <td style="text-align:right;"> 1247 </td>
   <td style="text-align:right;"> 839 </td>
   <td style="text-align:right;"> 1058 </td>
   <td style="text-align:right;"> 1476 </td>
   <td style="text-align:right;"> 689 </td>
   <td style="text-align:right;"> 3324 </td>
   <td style="text-align:right;"> 2312 </td>
   <td style="text-align:right;"> 1191 </td>
   <td style="text-align:right;"> 534 </td>
   <td style="text-align:right;"> 1231 </td>
  </tr>
</tbody>
</table>
</div>

<p>The table above gives you an idea of the size and structure of each lexicon.</p>
<h3 id="match-dot-common">Match Dot Common</h3>
<p>In order to determine which lexicon is more applicable to the lyrics, you'll want to look at the match ratio of words that are common to both the lexicon and the lyrics. As a reminder, there are 76116 total words and 7851 distinct words in <code>prince_tidy</code>.</p>
<p>So how many of those words are actually in the lexicons?</p>
<p>Use an <code>inner_join()</code> between <code>prince_tidy</code> and <code>new_sentiments</code> and then group by lexicon. The NRC lexicon has 10 different categories, and a word may appear in more than one category: that is, words can be negative and sad. That means that you'll want to use <code>n_distinct()</code> in <code>summarise()</code> to get the distinct word count per lexicon.</p>
<pre><code class="lang-r">prince_tidy %&gt;%
  mutate(words_in_lyrics = n_distinct(word)) %&gt;%
  inner_join(new_sentiments) %&gt;%
  group_by(lexicon, words_in_lyrics, words_in_lexicon) %&gt;%
  summarise(lex_match_words = n_distinct(word)) %&gt;%
  ungroup() %&gt;%
  mutate(total_match_words = sum(lex_match_words), #Not used but good to have
         match_ratio = lex_match_words / words_in_lyrics) %&gt;%
  select(lexicon, lex_match_words,  words_in_lyrics, match_ratio) %&gt;%
  mutate(lex_match_words = color_bar("lightpink")(lex_match_words),
         lexicon = color_tile("lightgreen", "lightgreen")(lexicon)) %&gt;%
  my_kable_styling(caption = "Lyrics Found In Lexicons")
</code></pre>
<div class="output_wrapper">
<table class="table table-striped table-condensed table-bordered" style="width:auto;margin-left:auto;margin-right:auto;">
<caption>Lyrics Found In Lexicons</caption>
 <thead><tr>
<th style="text-align:left;"> lexicon </th>
   <th style="text-align:left;"> lex_match_words </th>
   <th style="text-align:right;"> words_in_lyrics </th>
   <th style="text-align:right;"> match_ratio </th>
  </tr></thead>
<tbody>
<tr>
<td style="text-align:left;"> <span style="display:block;padding:0 4px;border-radius:4px;background-color:#90ee90;">AFINN</span> </td>
   <td style="text-align:left;"> <span style="display:inline-block;direction:rtl;border-radius:4px;padding-right:2px;background-color:lightpink;width:45.89%;">770</span> </td>
   <td style="text-align:right;"> 7851 </td>
   <td style="text-align:right;"> 0.0980767 </td>
  </tr>
<tr>
<td style="text-align:left;"> <span style="display:block;padding:0 4px;border-radius:4px;background-color:#90ee90;">bing </span> </td>
   <td style="text-align:left;"> <span style="display:inline-block;direction:rtl;border-radius:4px;padding-right:2px;background-color:lightpink;width:70.62%;">1185</span> </td>
   <td style="text-align:right;"> 7851 </td>
   <td style="text-align:right;"> 0.1509362 </td>
  </tr>
<tr>
<td style="text-align:left;"> <span style="display:block;padding:0 4px;border-radius:4px;background-color:#90ee90;">nrc  </span> </td>
   <td style="text-align:left;"> <span style="display:inline-block;direction:rtl;border-radius:4px;padding-right:2px;background-color:lightpink;width:100.00%;">1678</span> </td>
   <td style="text-align:right;"> 7851 </td>
   <td style="text-align:right;"> 0.2137307 </td>
  </tr>
</tbody>
</table>
</div>

<p>The NRC lexicon has more of the distinct words from the lyrics than AFINN or Bing. Notice the sum of the match ratios is low. No lexicon could have all words, nor should they. Many words are considered neutral and would not have an associated sentiment. For example, <em>2000</em> is typically a neutral word, and therefore does not exist in the lexicons. However, if you remember, people predicted planes would fall out of the sky and computers would just stop working during that year. So there is an associated fear that exists in the song but is not captured in sentiment analysis using typical lexicons.</p>
<p>Here are a few reasons that a word may not appear in a lexicon:</p>
<ul>
<li>Not every word has a sentiment.  </li>
<li>The lexicons were created for other types of text, so not for lyrics.</li>
<li>The actual <em>form</em> of the word may not appear. For example, <strong>strong</strong> may appear, but <strong>strongly</strong> may not. There could be more cleaning needed on the data! (This is touched on in a later section.)</li>
</ul>
<h3 id="don-t-take-my-word-for-it">Don't Take My Word For It</h3>
<p>Take a look at some specific words from Prince's lyrics which seem like they would have an impact on sentiment. Are they in all lexicons?</p>
<pre><code class="lang-r">new_sentiments %&gt;%
  filter(word %in% c("dark", "controversy", "gangster",
                     "discouraged", "race")) %&gt;%
  arrange(word) %&gt;% #sort
  select(-score) %&gt;% #remove this field
  mutate(word = color_tile("lightblue", "lightblue")(word),
         words_in_lexicon = color_bar("lightpink")(words_in_lexicon),
         lexicon = color_tile("lightgreen", "lightgreen")(lexicon)) %&gt;%
  my_kable_styling(caption = "Specific Words")
</code></pre>
<div class="output_wrapper">
<table class="table table-striped table-condensed table-bordered" style="width:auto;margin-left:auto;margin-right:auto;">
<caption>Specific Words</caption>
 <thead><tr>
<th style="text-align:left;"> word </th>
   <th style="text-align:left;"> sentiment </th>
   <th style="text-align:left;"> lexicon </th>
   <th style="text-align:left;"> words_in_lexicon </th>
  </tr></thead>
<tbody>
<tr>
<td style="text-align:left;"> <span style="display:block;padding:0 4px;border-radius:4px;background-color:#add8e6;">controversy</span> </td>
   <td style="text-align:left;"> negative </td>
   <td style="text-align:left;"> <span style="display:block;padding:0 4px;border-radius:4px;background-color:#90ee90;">nrc  </span> </td>
   <td style="text-align:left;"> <span style="display:inline-block;direction:rtl;border-radius:4px;padding-right:2px;background-color:lightpink;width:95.33%;">6468</span> </td>
  </tr>
<tr>
<td style="text-align:left;"> <span style="display:block;padding:0 4px;border-radius:4px;background-color:#add8e6;">controversy</span> </td>
   <td style="text-align:left;"> negative </td>
   <td style="text-align:left;"> <span style="display:block;padding:0 4px;border-radius:4px;background-color:#90ee90;">bing </span> </td>
   <td style="text-align:left;"> <span style="display:inline-block;direction:rtl;border-radius:4px;padding-right:2px;background-color:lightpink;width:100.00%;">6785</span> </td>
  </tr>
<tr>
<td style="text-align:left;"> <span style="display:block;padding:0 4px;border-radius:4px;background-color:#add8e6;">dark       </span> </td>
   <td style="text-align:left;"> sadness </td>
   <td style="text-align:left;"> <span style="display:block;padding:0 4px;border-radius:4px;background-color:#90ee90;">nrc  </span> </td>
   <td style="text-align:left;"> <span style="display:inline-block;direction:rtl;border-radius:4px;padding-right:2px;background-color:lightpink;width:95.33%;">6468</span> </td>
  </tr>
<tr>
<td style="text-align:left;"> <span style="display:block;padding:0 4px;border-radius:4px;background-color:#add8e6;">dark       </span> </td>
   <td style="text-align:left;"> negative </td>
   <td style="text-align:left;"> <span style="display:block;padding:0 4px;border-radius:4px;background-color:#90ee90;">bing </span> </td>
   <td style="text-align:left;"> <span style="display:inline-block;direction:rtl;border-radius:4px;padding-right:2px;background-color:lightpink;width:100.00%;">6785</span> </td>
  </tr>
<tr>
<td style="text-align:left;"> <span style="display:block;padding:0 4px;border-radius:4px;background-color:#add8e6;">discouraged</span> </td>
   <td style="text-align:left;"> negative </td>
   <td style="text-align:left;"> <span style="display:block;padding:0 4px;border-radius:4px;background-color:#90ee90;">AFINN</span> </td>
   <td style="text-align:left;"> <span style="display:inline-block;direction:rtl;border-radius:4px;padding-right:2px;background-color:lightpink;width:36.49%;">2476</span> </td>
  </tr>
<tr>
<td style="text-align:left;"> <span style="display:block;padding:0 4px;border-radius:4px;background-color:#add8e6;">gangster   </span> </td>
   <td style="text-align:left;"> negative </td>
   <td style="text-align:left;"> <span style="display:block;padding:0 4px;border-radius:4px;background-color:#90ee90;">bing </span> </td>
   <td style="text-align:left;"> <span style="display:inline-block;direction:rtl;border-radius:4px;padding-right:2px;background-color:lightpink;width:100.00%;">6785</span> </td>
  </tr>
</tbody>
</table>
</div>

<p><em>Controversy</em> and <em>dark</em> appear in NRC and Bing, but <em>gangster</em> only appears in Bing. <em>Race</em> doesn't appear at all and is a critical topic in Prince's lyrics. But is it easily associated with a sentiment? Note that AFINN is much smaller and only has one of these words.</p>
<h3 id="word-forms">Word Forms</h3>
<p>Now look at a more complicated example. Sexuality is a common theme in Prince's music. How will sentiment analysis based on predefined lexicons be affected by different forms of a word? For example, here are all the references to the root word <em>sex</em> in the lyrics. Compare these to Bing and NRC and see where there are matches.</p>
<pre><code class="lang-r">my_word_list &lt;- prince_data %&gt;%
  unnest_tokens(word, lyrics) %&gt;%
  filter(grepl("sex", word)) %&gt;% #Use `grepl()` to find the substring `"sex"`
  count(word) %&gt;%
  select(myword = word, n) %&gt;% #Rename word
  arrange(desc(n))

new_sentiments %&gt;%
  #Right join gets all words in `my_word_list` to show nulls
  right_join(my_word_list, by = c("word" = "myword")) %&gt;%
  filter(word %in% my_word_list$myword) %&gt;%
  mutate(word = color_tile("lightblue", "lightblue")(word),
          instances = color_tile("lightpink", "lightpink")(n),
          lexicon = color_tile("lightgreen", "lightgreen")(lexicon)) %&gt;%
  select(-score, -n) %&gt;% #Remove these fields
  my_kable_styling(caption = "Dependency on Word Form")
</code></pre>
<div class="output_wrapper">
<table class="table table-striped table-condensed table-bordered" style="width:auto;margin-left:auto;margin-right:auto;">
<caption>Dependency on Word Form</caption>
 <thead><tr>
<th style="text-align:left;"> word </th>
   <th style="text-align:left;"> sentiment </th>
   <th style="text-align:left;"> lexicon </th>
   <th style="text-align:right;"> words_in_lexicon </th>
   <th style="text-align:left;"> instances </th>
  </tr></thead>
<tbody>
<tr>
<td style="text-align:left;"> <span style="display:block;padding:0 4px;border-radius:4px;background-color:#add8e6;">sexy                    </span> </td>
   <td style="text-align:left;"> positive </td>
   <td style="text-align:left;"> <span style="display:block;padding:0 4px;border-radius:4px;background-color:#90ee90;">bing </span> </td>
   <td style="text-align:right;"> 6785 </td>
   <td style="text-align:left;"> <span style="display:block;padding:0 4px;border-radius:4px;background-color:#ffb6c1;">220</span> </td>
  </tr>
<tr>
<td style="text-align:left;"> <span style="display:block;padding:0 4px;border-radius:4px;background-color:#add8e6;">sexy                    </span> </td>
   <td style="text-align:left;"> positive </td>
   <td style="text-align:left;"> <span style="display:block;padding:0 4px;border-radius:4px;background-color:#90ee90;">AFINN</span> </td>
   <td style="text-align:right;"> 2476 </td>
   <td style="text-align:left;"> <span style="display:block;padding:0 4px;border-radius:4px;background-color:#ffb6c1;">220</span> </td>
  </tr>
<tr>
<td style="text-align:left;"> <span style="display:block;padding:0 4px;border-radius:4px;background-color:#add8e6;">sex                     </span> </td>
   <td style="text-align:left;"> anticipation </td>
   <td style="text-align:left;"> <span style="display:block;padding:0 4px;border-radius:4px;background-color:#90ee90;">nrc  </span> </td>
   <td style="text-align:right;"> 6468 </td>
   <td style="text-align:left;"> <span style="display:block;padding:0 4px;border-radius:4px;background-color:#ffb6c1;">185</span> </td>
  </tr>
<tr>
<td style="text-align:left;"> <span style="display:block;padding:0 4px;border-radius:4px;background-color:#add8e6;">sex                     </span> </td>
   <td style="text-align:left;"> joy </td>
   <td style="text-align:left;"> <span style="display:block;padding:0 4px;border-radius:4px;background-color:#90ee90;">nrc  </span> </td>
   <td style="text-align:right;"> 6468 </td>
   <td style="text-align:left;"> <span style="display:block;padding:0 4px;border-radius:4px;background-color:#ffb6c1;">185</span> </td>
  </tr>
<tr>
<td style="text-align:left;"> <span style="display:block;padding:0 4px;border-radius:4px;background-color:#add8e6;">sex                     </span> </td>
   <td style="text-align:left;"> positive </td>
   <td style="text-align:left;"> <span style="display:block;padding:0 4px;border-radius:4px;background-color:#90ee90;">nrc  </span> </td>
   <td style="text-align:right;"> 6468 </td>
   <td style="text-align:left;"> <span style="display:block;padding:0 4px;border-radius:4px;background-color:#ffb6c1;">185</span> </td>
  </tr>
<tr>
<td style="text-align:left;"> <span style="display:block;padding:0 4px;border-radius:4px;background-color:#add8e6;">sex                     </span> </td>
   <td style="text-align:left;"> trust </td>
   <td style="text-align:left;"> <span style="display:block;padding:0 4px;border-radius:4px;background-color:#90ee90;">nrc  </span> </td>
   <td style="text-align:right;"> 6468 </td>
   <td style="text-align:left;"> <span style="display:block;padding:0 4px;border-radius:4px;background-color:#ffb6c1;">185</span> </td>
  </tr>
<tr>
<td style="text-align:left;"> <span style="display:block;padding:0 4px;border-radius:4px;background-color:#add8e6;">superfunkycalifragisexy </span> </td>
   <td style="text-align:left;"> NA </td>
   <td style="text-align:left;"> <span style="display:block;padding:0 4px;border-radius:4px;background-color:#90ee90;">NA   </span> </td>
   <td style="text-align:right;"> NA </td>
   <td style="text-align:left;"> <span style="display:block;padding:0 4px;border-radius:4px;background-color:#ffb6c1;">19</span> </td>
  </tr>
<tr>
<td style="text-align:left;"> <span style="display:block;padding:0 4px;border-radius:4px;background-color:#add8e6;">lovesexy                </span> </td>
   <td style="text-align:left;"> NA </td>
   <td style="text-align:left;"> <span style="display:block;padding:0 4px;border-radius:4px;background-color:#90ee90;">NA   </span> </td>
   <td style="text-align:right;"> NA </td>
   <td style="text-align:left;"> <span style="display:block;padding:0 4px;border-radius:4px;background-color:#ffb6c1;">16</span> </td>
  </tr>
<tr>
<td style="text-align:left;"> <span style="display:block;padding:0 4px;border-radius:4px;background-color:#add8e6;">sexual                  </span> </td>
   <td style="text-align:left;"> NA </td>
   <td style="text-align:left;"> <span style="display:block;padding:0 4px;border-radius:4px;background-color:#90ee90;">NA   </span> </td>
   <td style="text-align:right;"> NA </td>
   <td style="text-align:left;"> <span style="display:block;padding:0 4px;border-radius:4px;background-color:#ffb6c1;">11</span> </td>
  </tr>
<tr>
<td style="text-align:left;"> <span style="display:block;padding:0 4px;border-radius:4px;background-color:#add8e6;">sexuality               </span> </td>
   <td style="text-align:left;"> NA </td>
   <td style="text-align:left;"> <span style="display:block;padding:0 4px;border-radius:4px;background-color:#90ee90;">NA   </span> </td>
   <td style="text-align:right;"> NA </td>
   <td style="text-align:left;"> <span style="display:block;padding:0 4px;border-radius:4px;background-color:#ffb6c1;">11</span> </td>
  </tr>
<tr>
<td style="text-align:left;"> <span style="display:block;padding:0 4px;border-radius:4px;background-color:#add8e6;">sexiness                </span> </td>
   <td style="text-align:left;"> NA </td>
   <td style="text-align:left;"> <span style="display:block;padding:0 4px;border-radius:4px;background-color:#90ee90;">NA   </span> </td>
   <td style="text-align:right;"> NA </td>
   <td style="text-align:left;"> <span style="display:block;padding:0 4px;border-radius:4px;background-color:#ffb6c1;">2</span> </td>
  </tr>
<tr>
<td style="text-align:left;"> <span style="display:block;padding:0 4px;border-radius:4px;background-color:#add8e6;">sexually                </span> </td>
   <td style="text-align:left;"> NA </td>
   <td style="text-align:left;"> <span style="display:block;padding:0 4px;border-radius:4px;background-color:#90ee90;">NA   </span> </td>
   <td style="text-align:right;"> NA </td>
   <td style="text-align:left;"> <span style="display:block;padding:0 4px;border-radius:4px;background-color:#ffb6c1;">2</span> </td>
  </tr>
<tr>
<td style="text-align:left;"> <span style="display:block;padding:0 4px;border-radius:4px;background-color:#add8e6;">sexe                    </span> </td>
   <td style="text-align:left;"> NA </td>
   <td style="text-align:left;"> <span style="display:block;padding:0 4px;border-radius:4px;background-color:#90ee90;">NA   </span> </td>
   <td style="text-align:right;"> NA </td>
   <td style="text-align:left;"> <span style="display:block;padding:0 4px;border-radius:4px;background-color:#ffb6c1;">1</span> </td>
  </tr>
<tr>
<td style="text-align:left;"> <span style="display:block;padding:0 4px;border-radius:4px;background-color:#add8e6;">sexed                   </span> </td>
   <td style="text-align:left;"> NA </td>
   <td style="text-align:left;"> <span style="display:block;padding:0 4px;border-radius:4px;background-color:#90ee90;">NA   </span> </td>
   <td style="text-align:right;"> NA </td>
   <td style="text-align:left;"> <span style="display:block;padding:0 4px;border-radius:4px;background-color:#ffb6c1;">1</span> </td>
  </tr>
<tr>
<td style="text-align:left;"> <span style="display:block;padding:0 4px;border-radius:4px;background-color:#add8e6;">sexier                  </span> </td>
   <td style="text-align:left;"> NA </td>
   <td style="text-align:left;"> <span style="display:block;padding:0 4px;border-radius:4px;background-color:#90ee90;">NA   </span> </td>
   <td style="text-align:right;"> NA </td>
   <td style="text-align:left;"> <span style="display:block;padding:0 4px;border-radius:4px;background-color:#ffb6c1;">1</span> </td>
  </tr>
<tr>
<td style="text-align:left;"> <span style="display:block;padding:0 4px;border-radius:4px;background-color:#add8e6;">superfunkycalifraagisexy</span> </td>
   <td style="text-align:left;"> NA </td>
   <td style="text-align:left;"> <span style="display:block;padding:0 4px;border-radius:4px;background-color:#90ee90;">NA   </span> </td>
   <td style="text-align:right;"> NA </td>
   <td style="text-align:left;"> <span style="display:block;padding:0 4px;border-radius:4px;background-color:#ffb6c1;">1</span> </td>
  </tr>
<tr>
<td style="text-align:left;"> <span style="display:block;padding:0 4px;border-radius:4px;background-color:#add8e6;">superfunkycalifragisexi </span> </td>
   <td style="text-align:left;"> NA </td>
   <td style="text-align:left;"> <span style="display:block;padding:0 4px;border-radius:4px;background-color:#90ee90;">NA   </span> </td>
   <td style="text-align:right;"> NA </td>
   <td style="text-align:left;"> <span style="display:block;padding:0 4px;border-radius:4px;background-color:#ffb6c1;">1</span> </td>
  </tr>
</tbody>
</table>
</div>

<p>Notice that Prince uses <em>sexy</em> frequently, but it doesn't exist in this form in NRC. The word <em>sex</em> is found in NRC but not in Bing. What if you looked at the <strong>stems</strong> or <strong>roots</strong> of words, would that help? What a conundrum! Your text could contain a past tense, a plural, or an adverb of a root word, but it may not exist in any lexicon. How do you deal with this?</p>
<h3 id="more-data-preparation-">More Data Preparation?</h3>
<p>It may be the case that you need a few more data preparation steps. Here are three techniques to <em>consider</em> before performing sentiment analysis:  </p>
<ul>
<li>Stemming: generally refers to removing suffixes from words to get the common origin  </li>
<li>Lemmatization: reducing inflected (or sometimes derived) words to their word stem, base or root form   </li>
<li>Word replacement: replace words with more frequently used synonyms  </li>
</ul>
<p>An advanced concept in sentiment analysis is that of synonym (semantically similar peer) and hypernym (a common parent) replacement. These are words that are more frequently used than the related word in the lyric, and actually <em>do</em> appear in a lexicon, thus giving a higher match percentage. There is not enough space in this tutorial to address additional data preparation, but it's definitely something to consider!</p>
<p><strong>Challenge</strong>: do a little research on lexicons and how they are created. Is there already one that exists that is better suited to musical lyrics? If you're really interested, maybe consider what it would take to build your own lexicon. What is the difference between classifier-based sentiment analysis and lexicon-based sentiment analysis?</p>
<p><a id="analysis"></a></p>
<h2 id="detailed-analysis">Detailed Analysis</h2>
<p>Now that you have a foundational understanding of the dataset and the lexicons, you can apply that knowledge by joining them together for analysis. Here are the high-level steps you'll take:</p>
<ul>
<li>Create lexicon-specific datasets</li>
<li>Look at <em>polar</em> sentiment across all songs</li>
<li>Examine sentiment change over time</li>
<li>Validate your results against specific events in Prince's life</li>
<li>Study song level sentiment</li>
<li>Review how pairs of words affect sentiment</li>
</ul>
<h3 id="create-sentiment-datasets">Create Sentiment Datasets</h3>
<p>Start off by creating Prince sentiment datasets for each of the lexicons by performing an <code>inner_join()</code> on the <code>get_sentiments()</code> function. Pass the name of the lexicon for each call. For this exercise, use Bing for binary and NRC for categorical sentiments. Since words can appear in multiple categories in NRC, such as Negative/Fear or Positive/Joy, you'll also create a subset without the <em>positive</em> and <em>negative</em> categories to use later on.</p>
<pre><code class="lang-r">prince_bing &lt;- prince_tidy %&gt;%
  inner_join(get_sentiments("bing"))
</code></pre>
<pre><code class="lang-r">prince_nrc &lt;- prince_tidy %&gt;%
  inner_join(get_sentiments("nrc"))
</code></pre>
<pre><code class="lang-r">prince_nrc_sub &lt;- prince_tidy %&gt;%
  inner_join(get_sentiments("nrc")) %&gt;%
  filter(!sentiment %in% c("positive", "negative"))
</code></pre>
<h3 id="in-the-mood-overall-sentiment">In The Mood: Overall Sentiment</h3>
<p>In the detailed analysis of the lyrics, you'll want to examine the different <em>levels</em> of text, such as <em>all songs</em>, <em>chart level</em>, <em>decade level</em> and <em>word level</em>. Start by graphing the NRC sentiment analysis of the entire dataset.</p>
<p>(Just for fun, I used the <a href="https://cran.r-project.org/web/packages/memery/memery.pdf" target="_blank"><code>memery</code></a> and <a href="https://cran.r-project.org/web/packages/magick/vignettes/intro.html" target="_blank"><code>magick</code></a> packages to add images <a href="https://www.r-bloggers.com/mix-ggplot2-graphs-with-your-favorite-memes-memery-0-4-2-released/" target="_blank">(memes)</a> to the graphs.)</p>
<pre><code class="lang-r">nrc_plot &lt;- prince_nrc %&gt;%
  group_by(sentiment) %&gt;%
  summarise(word_count = n()) %&gt;%
  ungroup() %&gt;%
  mutate(sentiment = reorder(sentiment, word_count)) %&gt;%
  #Use `fill = -word_count` to make the larger bars darker
  ggplot(aes(sentiment, word_count, fill = -word_count)) +
  geom_col() +
  guides(fill = FALSE) + #Turn off the legend
  theme_lyrics() +
  labs(x = NULL, y = "Word Count") +
  scale_y_continuous(limits = c(0, 15000)) + #Hard code the axis limit
  ggtitle("Prince NRC Sentiment") +
  coord_flip()

img &lt;- "prince_background2.jpg" #Load the background image
lab &lt;- ""  #Turn off the label
#Overlay the plot on the image and create the meme file
meme(img, lab, "meme_nrc.jpg", inset = nrc_plot)
#Read the file back in and display it!
nrc_meme &lt;- image_read("meme_nrc.jpg")
plot(nrc_meme)
</code></pre>
<p><img src="http://res.cloudinary.com/dyd911kmh/image/upload/f_auto,q_auto:best/v1520597738/unnamed-chunk-13-1_ru5mr8.png"></p>
<p>It appears that for Prince's lyrics, NRC strongly favors the <em>positive</em>. But are all words with a sentiment of <em>disgust</em> or <em>anger</em> also in the <em>negative</em> category as well? It may be worth checking out.</p>
<p>Now take a look at Bing overall sentiment. Of the 1185 distinct words from Prince's lyrics that appear in the Bing lexicon, how many are positive and how many are negative?</p>
<pre><code class="lang-r">bing_plot &lt;- prince_bing %&gt;%
  group_by(sentiment) %&gt;%
  summarise(word_count = n()) %&gt;%
  ungroup() %&gt;%
  mutate(sentiment = reorder(sentiment, word_count)) %&gt;%
  ggplot(aes(sentiment, word_count, fill = sentiment)) +
  geom_col() +
  guides(fill = FALSE) +
  theme_lyrics() +
  labs(x = NULL, y = "Word Count") +
  scale_y_continuous(limits = c(0, 8000)) +
  ggtitle("Prince Bing Sentiment") +
  coord_flip()

img1 &lt;- "prince_background1.jpg"
lab1 &lt;- ""
meme(img1, lab1, "meme_bing.jpg", inset = bing_plot)
x &lt;- image_read("meme_bing.jpg")
plot(x)
</code></pre>
<p><img src="http://res.cloudinary.com/dyd911kmh/image/upload/f_auto,q_auto:best/v1520597738/unnamed-chunk-14-1_cgq4i7.png"></p>
<p>Could it be the case that for Bing, there appears to be equal <em>positive</em> and <em>negative</em> sentiment in Prince's music? Does overall sentiment <em>cancel itself out</em> when looking at a dataset that is too large? It's hard to know, but try looking at it in chunks and see what happens.</p>
<p>In acoustics, there is something called <em>phase cancellation</em> where the frequency of two instances of the same wave are exactly out of phase and cancel each other out, for example, when you're recording a drum with two mics and it takes the sound longer to get to one mic than the other. This results in total silence at that frequency! How may this apply to sentiment analysis of large datasets? Give it some thought.</p>
<blockquote>
<p>Linguistic Professor: "In English, a double negative forms a positive. In Russian, a double negative is still a negative. However, there is no language wherein a double positive can form a negative." Disagreeing student: "Yeah, right."</p>
</blockquote>
<h3 id="crank-it-up-chart-level">Crank It Up: Chart Level</h3>
<p>Turn up the volume on your analysis by breaking it down to the chart level using the Bing lexicon. Create a graph of the <em>polar</em> sentiment per chart level. Use <code>spread()</code> to separate the sentiments into columns and <code>mutate()</code> to create a <em>polarity</em> (positive - negative) field and a <em>percent_positive</em> field ($positive / total sentiment * 100$), for a different perspective. For the polarity graph, add a <code>yintercept</code> with <code>geom_hline()</code>. Plot the graphs side by side with <code>grid.arrange()</code>.</p>
<pre><code class="lang-r">prince_polarity_chart &lt;- prince_bing %&gt;%
  count(sentiment, chart_level) %&gt;%
  spread(sentiment, n, fill = 0) %&gt;%
  mutate(polarity = positive - negative,
    percent_positive = positive / (positive + negative) * 100)

#Polarity by chart
plot1 &lt;- prince_polarity_chart %&gt;%
  ggplot( aes(chart_level, polarity, fill = chart_level)) +
  geom_col() +
  scale_fill_manual(values = my_colors[3:5]) +
  geom_hline(yintercept = 0, color = "red") +
  theme_lyrics() + theme(plot.title = element_text(size = 11)) +
  xlab(NULL) + ylab(NULL) +
  ggtitle("Polarity By Chart Level")

#Percent positive by chart
plot2 &lt;- prince_polarity_chart %&gt;%
  ggplot( aes(chart_level, percent_positive, fill = chart_level)) +
  geom_col() +
  scale_fill_manual(values = c(my_colors[3:5])) +
  geom_hline(yintercept = 0, color = "red") +
  theme_lyrics() + theme(plot.title = element_text(size = 11)) +
  xlab(NULL) + ylab(NULL) +
  ggtitle("Percent Positive By Chart Level")

grid.arrange(plot1, plot2, ncol = 2)
</code></pre>
<p><img src="http://res.cloudinary.com/dyd911kmh/image/upload/f_auto,q_auto:best/v1520597737/unnamed-chunk-15-1_fd9rrc.png"></p>
<p>Does this say that charted songs are typically more positive than negative? If so, what does this tell you about what society wants to hear? Can you even make these assumptions? Looking at the positive sentiment relative to total sentiment, it seems like the charted songs are just slightly more positive than the negative. This is interesting given that the Bing lexicon itself has more negative than positive words.</p>
<h3 id="polar-melting-so-blue">Polar Melting: So Blue</h3>
<p>Since you're looking at sentiment from a <em>polar</em> perspective, you might want to see <em>weather</em> or not it changes over time (geek humor). This time use <code>geom_smooth()</code> with the <code>loess</code> method for a smoother curve and another <code>geom_smooth()</code> with method = <code>lm</code> for a linear smooth curve.  </p>
<pre><code class="lang-r">prince_polarity_year &lt;- prince_bing %&gt;%
  count(sentiment, year) %&gt;%
  spread(sentiment, n, fill = 0) %&gt;%
  mutate(polarity = positive - negative,
    percent_positive = positive / (positive + negative) * 100)

polarity_over_time &lt;- prince_polarity_year %&gt;%
  ggplot(aes(year, polarity, color = ifelse(polarity &gt;= 0,my_colors[5],my_colors[4]))) +
  geom_col() +
  geom_smooth(method = "loess", se = FALSE) +
  geom_smooth(method = "lm", se = FALSE, aes(color = my_colors[1])) +
  theme_lyrics() + theme(plot.title = element_text(size = 11)) +
  xlab(NULL) + ylab(NULL) +
  ggtitle("Polarity Over Time")

relative_polarity_over_time &lt;- prince_polarity_year %&gt;%
  ggplot(aes(year, percent_positive , color = ifelse(polarity &gt;= 0,my_colors[5],my_colors[4]))) +
  geom_col() +
  geom_smooth(method = "loess", se = FALSE) +
  geom_smooth(method = "lm", se = FALSE, aes(color = my_colors[1])) +
  theme_lyrics() + theme(plot.title = element_text(size = 11)) +
  xlab(NULL) + ylab(NULL) +
  ggtitle("Percent Positive Over Time")

grid.arrange(polarity_over_time, relative_polarity_over_time, ncol = 2)
</code></pre>
<p><img src="http://res.cloudinary.com/dyd911kmh/image/upload/f_auto,q_auto:best/v1520597738/unnamed-chunk-16-1_k6rpfg.png"></p>
<p>A few extremes were adjusted in the second graph above, but the overall polarity trend over time is negative in both cases.</p>
<h3 id="mood-ring">Mood Ring</h3>
<p>You'll again use the power of the <code>chordDiagram()</code> to examine the relationships between NRC sentiments and decades. Note that sentiment categories appear on the top part of the ring and decades on the bottom.</p>
<pre><code class="lang-r">grid.col = c("1970s" = my_colors[1], "1980s" = my_colors[2], "1990s" = my_colors[3], "2000s" = my_colors[4], "2010s" = my_colors[5], "anger" = "grey", "anticipation" = "grey", "disgust" = "grey", "fear" = "grey", "joy" = "grey", "sadness" = "grey", "surprise" = "grey", "trust" = "grey")

decade_mood &lt;-  prince_nrc %&gt;%
  filter(decade != "NA" &amp; !sentiment %in% c("positive", "negative")) %&gt;%
  count(sentiment, decade) %&gt;%
  group_by(decade, sentiment) %&gt;%
  summarise(sentiment_sum = sum(n)) %&gt;%
  ungroup()

circos.clear()
#Set the gap size
circos.par(gap.after = c(rep(5, length(unique(decade_mood[[1]])) - 1), 15,
                         rep(5, length(unique(decade_mood[[2]])) - 1), 15))
chordDiagram(decade_mood, grid.col = grid.col, transparency = .2)
title("Relationship Between Mood and Decade")
</code></pre>
<p><img src="http://res.cloudinary.com/dyd911kmh/image/upload/f_auto,q_auto:best/v1520597738/unnamed-chunk-17-1_fybt2c.png"></p>
<p>This shows the counts of words per NRC category per decade. It's a lot to take in on a small graph, but it provides <em>tons</em> of information on relationships between categories and time. These diagrams are incredibly customizable and can be as simple or informative as desired.</p>
<h3 id="real-time-sentiment">Real-Time Sentiment</h3>
<p>Given all the wonderful courses you've taken on DataCamp, you're probably itching to apply those skills to real world situations. So do that now by mapping your analysis of Prince's lyrics to something <em>real</em> over a period of <em>time</em>. However, please be skeptical and cautious when performing a simplified analysis on such a complex subject.</p>
<p>I have created a list of Prince's life events, collected from popular sources such as Rolling Stone Magazine, Biography.com, etc. I selected highly public years that match songs that have release dates in our dataset. Read in those events from <code>princeEvents.csv</code> now. Then use <code>prince_bing</code> and <code>spread()</code> to create a polarity score per year. Join on the <code>events</code> data frame and create a sentiment field so you can fill in colors on your bar chart. As always, use <code>coord_flip()</code> when you're showing large text labels.</p>
<pre><code class="lang-r">events &lt;- read.csv('princeEvents.csv', stringsAsFactors = FALSE)

year_polarity_bing &lt;- prince_bing %&gt;%
  group_by(year, sentiment) %&gt;%
  count(year, sentiment) %&gt;%
  spread(sentiment, n) %&gt;%
  mutate(polarity = positive - negative,
         ratio = polarity / (positive + negative)) #use polarity ratio in next graph

 events %&gt;%
   #Left join gets event years with no releases
   left_join(year_polarity_bing) %&gt;%
   filter(event != " ") %&gt;% #Account for bad data
   mutate(event = reorder(event, year), #Sort chart by desc year
           sentiment = ifelse(positive &gt; negative,
                              "positive", "negative")) %&gt;%
   ggplot(aes(event, polarity, fill = sentiment)) +
   geom_bar(stat = "identity") +
   theme_minimal() + theme(legend.position = "none") +
   xlab(NULL) +
   ggtitle("Sentiment by Events") +
   coord_flip()
</code></pre>
<p><img src="http://res.cloudinary.com/dyd911kmh/image/upload/f_auto,q_auto:best/v1520597738/unnamed-chunk-18-1_ta8ikt.png"></p>
<p><strong>Tip</strong>: you can find <code>princeEvents.csv</code> <a href="https://s3.amazonaws.com/assets.datacamp.com/blog_assets/sentiment_analysis/princeEvents.csv">here</a>.</p>
<p>I think it's fascinating to compare the events with the sentiment. Although subjective, I found them to be very correlated. Now granted, I created the event dataset myself. I could have easily biased it to match the lyrics. However, I did use multiple sources for each year to determine the most commonly reported fact. These results should motivate you to look even more deeply into a <em>word level</em> analysis to see what Prince was singing about.</p>
<h3 id="the-black-album-1994-1996">The Black Album: 1994 - 1996</h3>
<p>In 1994, Prince released <strong>The Black Album</strong> as an attempt to regain his African-American audience. Given the fact that 1994 and the following two years stand out in the analysis, you can look at the top words that match the NRC lexicon for this period using <code>geom_label_repel()</code> from the <code>ggrepel</code> package along with <code>geom_point()</code>. This is a tricky graph, so I suggest you play around with the configuration of the code below.</p>
<pre><code class="lang-r">plot_words_94_96 &lt;- prince_nrc %&gt;%
  filter(year %in% c("1994", "1995", "1996")) %&gt;%
  group_by(sentiment) %&gt;%
  count(word, sort = TRUE) %&gt;%
  arrange(desc(n)) %&gt;%
  slice(seq_len(8)) %&gt;% #consider top_n() from dplyr also
  ungroup()

plot_words_94_96 %&gt;%
  #Set `y = 1` to just plot one variable and use word as the label
  ggplot(aes(word, 1, label = word, fill = sentiment )) +
  #You want the words, not the points
  geom_point(color = "transparent") +
  #Make sure the labels don't overlap
  geom_label_repel(force = 1,nudge_y = .5,  
                   direction = "y",
                   box.padding = 0.04,
                   segment.color = "transparent",
                   size = 3) +
  facet_grid(~sentiment) +
  theme_lyrics() +
  theme(axis.text.y = element_blank(), axis.text.x = element_blank(),
        axis.title.x = element_text(size = 6),
        panel.grid = element_blank(), panel.background = element_blank(),
        panel.border = element_rect("lightgray", fill = NA),
        strip.text.x = element_text(size = 9)) +
  xlab(NULL) + ylab(NULL) +
  ggtitle("1994 - 1996 NRC Sentiment") +
  coord_flip()
</code></pre>
<p><img src="http://res.cloudinary.com/dyd911kmh/image/upload/f_auto,q_auto:best/v1520597739/unnamed-chunk-19-1_eh5ohe.png" width="100%"></p>
<p>In 1994, Prince quoted to Rolling Stone magazine,</p>
<blockquote>
<p>"When you stop a man from dreaming, he becomes a slave. That's where I was."</p>
</blockquote>
<p>So he appeared in public with the word "slave" prominently penned on his face outwardly declaring his anti-corporate sentiment with his current music label. He also changed his name to a symbol. How well do the words above match these events? Notice the words <em>"slave"</em>, <em>"emancipation"</em>, <em>"black"</em> and <em>"change"</em> in the graph?</p>
<p>(Remember, this is not just about Prince. You can apply it to any text! For example, what were the most <em>trust</em> sentiment words spoken by President Trump in his first year in office?)</p>
<h3 id="this-time-it-s-personal-1998">This Time It's Personal: 1998</h3>
<p>The <em>Sentiment By Events</em> chart above indicated that between 1996 and 1998, Prince married, lost two children, and was said to predict 9/11 on stage. (Do a YouTube search on his 1998 concert in The Netherlands to listen for yourself!) Using the same steps as with the previous graph, look at the top 10 words in each NRC category during 1998.</p>
<pre><code class="lang-r">plot_words_1998 &lt;- prince_nrc %&gt;%
  filter(year == "1998") %&gt;%
  group_by(sentiment) %&gt;%
  count(word, sort = TRUE) %&gt;%
  arrange(desc(n)) %&gt;%
  slice(seq_len(10)) %&gt;%
  ungroup()

#Same comments as previous graph
plot_words_1998 %&gt;%
  ggplot(aes(word, 1, label = word, fill = sentiment )) +
  geom_point(color = "transparent") +
  geom_label_repel(force = 1,nudge_y = .5,  
                   direction = "y",
                   box.padding = 0.05,
                   segment.color = "transparent",
                   size = 3) +
  facet_grid(~sentiment) +
  theme_lyrics() +
  theme(axis.text.y = element_blank(), axis.text.x = element_blank(),
        axis.title.x = element_text(size = 6),
        panel.grid = element_blank(), panel.background = element_blank(),
        panel.border = element_rect("lightgray", fill = NA),
        strip.text.x = element_text(size = 9)) +
  xlab(NULL) + ylab(NULL) +
  ggtitle("1998 NRC Sentiment") +
  coord_flip()
</code></pre>
<p><img src="http://res.cloudinary.com/dyd911kmh/image/upload/f_auto,q_auto:best/v1520597739/unnamed-chunk-20-1_mpfkig.png" width="100%"></p>
<p>Given the personal loss and the looming threat of terrorism, words like <em>"suicide"</em>, <em>"waste"</em>, <em>"mad"</em>, <em>"hurt"</em>, and many more not captured in this graph are very indicative of the actual events. These words are powerful and provide real insight into the sentiment of that time period.</p>
<h3 id="on-the-radar-radar-charts">On The Radar: Radar Charts</h3>
<p>Another great way to compare sentiment across categories is to use a radar chart, which is also known as a spider chart. You can make this type of charts with the <a href="https://github.com/mangothecat/radarchart" target="_blank"><code>radarchart</code></a> package. These are useful for seeing which variables have similar values or if there are any outliers for each variable.</p>
<p>You will break this analysis into three different levels: <em>year</em>, <em>chart</em>, and <em>decade</em>. (To save space, I'll only include code for the specific years.)</p>
<ul>
<li>Use the <code>prince_nrc_sub</code> dataset which does not contain the <em>positive</em> and <em>negative</em> sentiments so that the other ones are more visible. This time you will first calculate the total count of words by sentiment per year, as well as the total sentiment for the entire year and obtain a percentage ($count of sentiment words per year / total per year * 100$).</li>
<li>Filter for the specific years 1978, 1994, 1995, and remove the unneeded fields with <code>select()</code>.</li>
<li>Finally, you'll need to <code>spread()</code> the year and percent values (key/value pairs) into multiple columns so that you have one row for each sentiment and a column for each year. Then use <code>chartJSRadar()</code> to generate an interactive HTML widget. You can pass an argument to display dataset labels in the mouse over. (FYI, sometimes the J and Y are cropped from the word <em>"joy"</em> by <code>radarchart</code> and it looks like "iov".)</li>
</ul>
<pre><code class="lang-r">#Get the count of words per sentiment per year
year_sentiment_nrc &lt;- prince_nrc_sub %&gt;%
  group_by(year, sentiment) %&gt;%
  count(year, sentiment) %&gt;%
  select(year, sentiment, sentiment_year_count = n)

#Get the total count of sentiment words per year (not distinct)
total_sentiment_year &lt;- prince_nrc_sub %&gt;%
  count(year) %&gt;%
  select(year, year_total = n)

#Join the two and create a percent field
year_radar_chart &lt;- year_sentiment_nrc %&gt;%
  inner_join(total_sentiment_year, by = "year") %&gt;%
  mutate(percent = sentiment_year_count / year_total * 100 ) %&gt;%
  filter(year %in% c("1978","1994","1995")) %&gt;%
  select(-sentiment_year_count, -year_total) %&gt;%
  spread(year, percent) %&gt;%
  chartJSRadar(showToolTipLabel = TRUE,
               main = "NRC Years Radar")
</code></pre>
<iframe src="https://s3.amazonaws.com/assets.datacamp.com/blog_assets/Lyrics+Analysis+R/chart-radar-chart.html" width="560" height="500" style="border:none;overflow:hidden;" scrolling="no" frameborder="0" allowtransparency="true" allowfullscreen="true"></iframe>
<iframe src="https://s3.amazonaws.com/assets.datacamp.com/blog_assets/Lyrics+Analysis+R/decade-radar-chart.html" width="560" height="500" style="border:none;overflow:hidden;" scrolling="no" frameborder="0" allowtransparency="true" allowfullscreen="true"></iframe>
<iframe src="https://s3.amazonaws.com/assets.datacamp.com/blog_assets/Lyrics+Analysis+R/year-radar-chart.html" width="560" height="500" style="border:none;overflow:hidden;" scrolling="no" frameborder="0" allowtransparency="true" allowfullscreen="true"></iframe>

<p>You'll have to scroll up and down to compare these graphs because I wanted to leave them full size. It's interesting to note that with a smaller dataset like <code>year</code>, you are able to see the variance in each sentiment more distinctly using this type of visualization. You may also notice that in contrast to previous exercises, using a percentage, <em>"joy"</em> has the highest score on all charts (especially at the beginning of Prince's career in 1978).</p>
<h3 id="sign-o-the-times">Sign O' The Times</h3>
<p>Spotify uses machine learning to create song recommendations for its 140 million active users. It doesn't use lyrical content yet. Imagine if it could... So now, take an even deeper look into the mood of specific songs.</p>
<p>In 1987, Prince wrote a song called <strong>"Sign O' the Times"</strong>. A <a href="https://www.billboard.com/articles/columns/pop/7744222/prince-sign-o-the-times-album-ranked" target="_blank">Billboard article</a> by Kenneth Partridge stated:</p>
<blockquote>
<p>"As he tackles the topics of AIDS, gangs, drugs, natural disasters, and even the Challenger explosion, Prince plays it cool and detached. 'Sign O' the Times' is a status update, not a call to action. His solution isn't marching in the streets or phoning your congressman."</p>
</blockquote>
<p>So how would a <em>machine</em> interpret the mood of this song? Is it highly emotional or simply informative? Does it represent Prince as a person or society in general? Graph the NRC categories with <code>ggplot2</code>.</p>
<pre><code class="lang-r">prince_nrc %&gt;%
  filter(song %in% "sign o the times") %&gt;%
  group_by(sentiment) %&gt;%
  summarise(word_count = n()) %&gt;%
  ungroup() %&gt;%
  mutate(sentiment = reorder(sentiment, word_count)) %&gt;%
  ggplot(aes(sentiment, word_count, fill = -word_count)) +
  geom_col() +
  guides(fill = FALSE) +
  theme_minimal() + theme_lyrics() +
  labs(x = NULL, y = "Word Count") +
  ggtitle("Sign O' The Times NRC Sentiment") +
  coord_flip()
</code></pre>
<p><img src="http://res.cloudinary.com/dyd911kmh/image/upload/f_auto,q_auto:best/v1520597738/unnamed-chunk-24-1_g5p5wm.png"></p>
<p>Although once again highly subjective, your results appear to confirm that Prince "plays it cool and detached", as stated by Partridge. This may be interpreted by the observation that <em>anticipation</em> words are more prevalent than emotional categories such as <em>sadness</em>, <em>fear</em>, and <em>anger</em>. <a href="http://www.differencebetween.com/difference-between-emotion-and-vs-sentiment/" target="_blank">Here is an article</a> that states these three categories are <strong>emotions</strong> whereas <em>anticipation</em> is a <strong>sentiment</strong>. The Billboard author also stated the song is simply a "status update, almost devoid of emotion". It seems as that the <em>machine</em> agrees. Do you interpret it this way as well? I know that this is an R tutorial, but sentiment analysis is not purely technical. It is said to be the place where <a href="http://www.saaip.org/" target="_blank">AI meets psychology</a>.</p>
<p>Using <code>ggplot2</code> to create a slightly different chart, look at the words for each category.</p>
<pre><code class="lang-r">prince_tidy %&gt;%
  filter(song %in% 'sign o the times') %&gt;%
  distinct(word) %&gt;%
  inner_join(get_sentiments("nrc")) %&gt;%
  ggplot(aes(x = word, fill = sentiment)) +
  facet_grid(~sentiment) +
  geom_bar() + #Create a bar for each word per sentiment
  theme_lyrics() +
  theme(panel.grid.major.x = element_blank(),
        axis.text.x = element_blank()) + #Place the words on the y-axis
  xlab(NULL) + ylab(NULL) +
  ggtitle("Sign O' The Times Sentiment Words") +
  coord_flip()
</code></pre>
<p><img src="http://res.cloudinary.com/dyd911kmh/image/upload/f_auto,q_auto:best/v1520597738/unnamed-chunk-25-1_mfpm9v.png"></p>
<p>Can you match these words with the topics mentioned in the Billboard article? It's pretty easy to see the connection:  Challenger disaster -&gt; <em>"rocket"</em>, AIDS -&gt; <em>"disease"</em>, Drugs -&gt; <em>"crack"</em>, Natural Disasters -&gt; <em>"hurricane"</em>, Gangs -&gt; <em>"gang"</em>, etc.</p>
<p>It's almost like Partridge wrote some R code and created this chart before writing the article!</p>
<h3 id="more-songs">More Songs</h3>
<p>Look at the sentiment categories for a few more songs with distinctive titles and see if they appear to be correlated.</p>
<pre><code class="lang-r">prince_nrc_sub %&gt;%
  filter(song %in% c("so blue", "controversy", "raspberry beret",
                     "when doves cry", "the future", "1999")) %&gt;%
  count(song, sentiment, year) %&gt;%
  mutate(sentiment = reorder(sentiment, n), song = reorder(song, n)) %&gt;%
  ggplot(aes(sentiment, n, fill = sentiment)) +
  geom_col() +
  facet_wrap(year ~ song, scales = "free_x", labeller = label_both) +
  theme_lyrics() +
  theme(panel.grid.major.x = element_blank(),
        axis.text.x = element_blank()) +
  labs(x = NULL, y = NULL) +
  ggtitle("NRC Sentiment Song Analysis") +
  coord_flip()
</code></pre>
<p><img src="http://res.cloudinary.com/dyd911kmh/image/upload/f_auto,q_auto:best/v1520597739/unnamed-chunk-26-1_sbgdui.png"></p>
<p>NRC sentiments show high <em>anticipation</em> and <em>fear</em> for a song about <strong>the future</strong>, and the same thing plus high <em>trust</em> for a song about <strong>controversy</strong>. The songs that are prevalently <em>sad</em> seem to match their titles as well.</p>
<h3 id="bigrams-per-decade">Bigrams Per Decade</h3>
<p>So far you have only been looking at unigrams or single words. But if <strong>"love"</strong> is a common word, what precedes it? Or follows it? Looking at single words out of context could be misleading. So, now it's time to look at some bigrams or word pairs.</p>
<p>Conveniently, the <code>tidytext</code> package provides the ability to unnest pairs of words as well as single words. In this case, you'll call <code>unnest_tokens()</code> passing the <code>token</code> argument <em>ngrams</em>. Since you're just looking at bigrams (two consecutive words), pass <code>n = 2</code>. Use <code>prince_bigrams</code> to store the results.</p>
<p>The <code>tidyr</code> package provides the ability to separate the bigrams into individual words using the <code>separate()</code> function. In order to remove the stop words and undesirable words, you'll want to break the bigrams apart and filter out what you don't want, then use <code>unite()</code> to put the word pairs back together. This makes it easy to visualize the most common bigrams per decade. (See <a href="https://www.datacamp.com/community/tutorials/R-nlp-machine-learning" target="_blank">Part One</a> for an explanation of <code>slice()</code> and <code>row_number()</code>)</p>
<pre><code class="lang-r">prince_bigrams &lt;- prince_data %&gt;%
  unnest_tokens(bigram, lyrics, token = "ngrams", n = 2)

bigrams_separated &lt;- prince_bigrams %&gt;%
  separate(bigram, c("word1", "word2"), sep = " ")

bigrams_filtered &lt;- bigrams_separated %&gt;%
  filter(!word1 %in% stop_words$word) %&gt;%
  filter(!word2 %in% stop_words$word) %&gt;%
  filter(!word1 %in% undesirable_words) %&gt;%
  filter(!word2 %in% undesirable_words)

#Because there is so much repetition in music, also filter out the cases where the two words are the same
bigram_decade &lt;- bigrams_filtered %&gt;%
  filter(word1 != word2) %&gt;%
  filter(decade != "NA") %&gt;%
  unite(bigram, word1, word2, sep = " ") %&gt;%
  inner_join(prince_data) %&gt;%
  count(bigram, decade, sort = TRUE) %&gt;%
  group_by(decade) %&gt;%
  slice(seq_len(7)) %&gt;%
  ungroup() %&gt;%
  arrange(decade, n) %&gt;%
  mutate(row = row_number())
</code></pre>
<pre><code>## Joining, by = c("song", "year", "album", "peak", "us_pop", "us_rnb", "decade", "chart_level", "charted")
</code></pre>
<pre><code class="lang-r">bigram_decade %&gt;%
  ggplot(aes(row, n, fill = decade)) +
  geom_col(show.legend = FALSE) +
  facet_wrap(~decade, scales = "free_y") +
  xlab(NULL) + ylab(NULL) +
  scale_x_continuous(  # This handles replacement of row
      breaks = bigram_decade$row, # Notice need to reuse data frame
      labels = bigram_decade$bigram) +
  theme_lyrics() +
  theme(panel.grid.major.x = element_blank()) +
  ggtitle("Bigrams Per Decade") +
  coord_flip()
</code></pre>
<p><img src="http://res.cloudinary.com/dyd911kmh/image/upload/f_auto,q_auto:best/v1520597739/unnamed-chunk-27-1_veaovt.png"></p>
<p>Using bigrams, you can almost see the common phrases shift from sex, dance and romance to religion and (rainbow) children. In case you didn't know, the term "rainbow baby" is sometimes used by parents who are expecting another child after losing a baby to miscarriage. Interestingly, I could not find a real review of Prince's Rainbow Children album that made note of this.  </p>
<h3 id="sentiment-with-bigrams">Sentiment with Bigrams</h3>
<p>So how do bigrams affect sentiment? This time use the AFINN lexicon to perform sentiment analysis on word pairs, looking at how often sentiment-associated words are preceded by <em>"not"</em> or other negating words.</p>
<pre><code class="lang-r">AFINN &lt;- get_sentiments("afinn")

not_words &lt;- bigrams_separated %&gt;%
  filter(word1 == "not") %&gt;%
  inner_join(AFINN, by = c(word2 = "word")) %&gt;%
  count(word2, score, sort = TRUE) %&gt;%
  ungroup()

not_words %&gt;%
  mutate(contribution = n * score) %&gt;%
  arrange(desc(abs(contribution))) %&gt;%
  head(20) %&gt;%
  mutate(word2 = reorder(word2, contribution)) %&gt;%
  ggplot(aes(word2, n * score, fill = n * score &gt; 0)) +
  geom_col(show.legend = FALSE) +
  theme_lyrics() +
  xlab("Words preceded by \"not\"") +
  ylab("Sentiment score * Number of Occurrences") +
  ggtitle("Polar Sentiment of Words Preceded by Not") +
  coord_flip()
</code></pre>
<p><img src="http://res.cloudinary.com/dyd911kmh/image/upload/f_auto,q_auto:best/v1520597739/unnamed-chunk-28-1_yk59tk.png"></p>
<p>On the first line of the graph, <strong>care</strong> is given a <em>false positive</em> sentiment because the <strong>"not"</strong> is ignored with single-word analysis. Do the false positive bigrams cancel out the false negative bigrams?</p>
<p>Yet another question that I can't answer, but it's a good topic for further exploration. <strong>Tip</strong>: you can also pass the parameters of "trigrams" and "n = 3" to <code>unnest_tokens()</code> to look at even more consecutive words!</p>
<p>There are other negation words to consider as well. This time you will create a network graph using the <code>ggraph</code> and <code>igraph</code> packages. You'll arrange the words into connected nodes with the negation words at the centers. Create the first object from the tidy dataset using <code>graph_from_data_frame()</code> and then use <code>ggraph()</code> to plot it. You can highlight the main nodes with a call to <code>geom_edge_density()</code>. You can get more details of a similar example in Julia Silge and David Robinson's book on <a href="https://www.tidytextmining.com/" target="_blank">Tidy Text Mining</a>.</p>
<pre><code class="lang-r">negation_words &lt;- c("not", "no", "never", "without")

negation_bigrams &lt;- bigrams_separated %&gt;%
  filter(word1 %in% negation_words) %&gt;%
  inner_join(AFINN, by = c(word2 = "word")) %&gt;%
  count(word1, word2, score, sort = TRUE) %&gt;%
  mutate(contribution = n * score) %&gt;%
  arrange(desc(abs(contribution))) %&gt;%
  group_by(word1) %&gt;%
  slice(seq_len(20)) %&gt;%
  arrange(word1,desc(contribution)) %&gt;%
  ungroup()

bigram_graph &lt;- negation_bigrams %&gt;%
  graph_from_data_frame() #From `igraph`

set.seed(123)

a &lt;- grid::arrow(type = "closed", length = unit(.15, "inches"))

ggraph(bigram_graph, layout = "fr") +
  geom_edge_link(alpha = .25) +
  geom_edge_density(aes(fill = score)) +
  geom_node_point(color = "purple1", size = 1) + #Purple for Prince!
  geom_node_text(aes(label = name),  repel = TRUE) +
  theme_void() + theme(legend.position = "none",
                       plot.title = element_text(hjust = 0.5)) +
  ggtitle("Negation Bigram Network")
</code></pre>
<p><img src="http://res.cloudinary.com/dyd911kmh/image/upload/f_auto,q_auto:best/v1520597740/unnamed-chunk-29-1_wtzaho.png"></p>
<p>Here, you can see the word pairs associated with negation words. So if your analysis is based on unigrams and <em>"alone"</em> comes back as negative, the bigram <em>"not alone"</em> as you see above will have a reverse effect. Some words cross over to multiple nodes which can be seen easily in a visual like this one: for example, <em>"never hurt"</em> and <em>"not hurt"</em>.</p>
<h3 id="pairwise-comparisons">Pairwise Comparisons</h3>
<p>Since you've now looked at n-grams, take a look at the <em>correlation</em> between words. Which words are most highly correlated? Use the <code>pairwise_count()</code> function from the <code>widyr</code> package to identify co-occurrence counts. That is, you count the number of times each pair of words appear together within a song. The <code>widyr</code> package takes a tidy dataset, and <strong>temporarily</strong> widens it before returning it to a tidy structure for visualization and further analysis.</p>
<p>To keep it simple, I've chosen four interesting words in Prince's lyrics.</p>
<pre><code class="lang-r">pwc &lt;- prince_tidy %&gt;%
  filter(n() &gt;= 20) %&gt;%  #High counts
  pairwise_count(word, song, sort = TRUE) %&gt;%
  filter(item1 %in% c("love", "peace", "gangster", "hate")) %&gt;%
  group_by(item1) %&gt;%
  slice(seq_len(7)) %&gt;%
  ungroup() %&gt;%
  mutate(row = -row_number()) #Descending order

pwc %&gt;%
  ggplot(aes(row, n, fill = item1)) +
  geom_bar(stat = "identity", show.legend = FALSE) +
  facet_wrap(~item1, scales = "free") +
  scale_x_continuous(  #This handles replacement of row
      breaks = pwc$row, #Notice need to reuse data frame
      labels = pwc$item2) +
  theme_lyrics() + theme(panel.grid.major.x = element_blank()) +
  xlab(NULL) + ylab(NULL) +
  ggtitle("Pairwise Counts") +
  coord_flip()
</code></pre>
<p><img src="http://res.cloudinary.com/dyd911kmh/image/upload/f_auto,q_auto:best/v1520597739/unnamed-chunk-30-1_vvkgi2.png"></p>
<p>Compare that to pairwise <em>correlation</em>. This refers to how often words appear together relative to how often they appear separately. Use <code>pairwise_cor()</code> to determine the correlation between words based on how often they appear in the same song.</p>
<pre><code class="lang-r">prince_tidy %&gt;%
  group_by(word) %&gt;%
  filter(n() &gt;= 20) %&gt;%
  pairwise_cor(word, song, sort = TRUE) %&gt;%
  filter(item1 %in% c("love", "peace", "gangster", "hate")) %&gt;%
  group_by(item1) %&gt;%
  top_n(7) %&gt;%
  ungroup() %&gt;%
  mutate(item2 = reorder(item2, correlation)) %&gt;%
  ggplot(aes(item2, correlation, fill = item1)) +
  geom_bar(stat = 'identity', show.legend = FALSE) +
  facet_wrap(~item1, scales = 'free') +
  theme_lyrics() + theme(panel.grid.major.x = element_blank()) +
  xlab(NULL) + ylab(NULL) +
  ggtitle("Pairwise Correlation") +
  coord_flip()
</code></pre>
<p><img src="http://res.cloudinary.com/dyd911kmh/image/upload/f_auto,q_auto:best/v1520597740/unnamed-chunk-31-1_tdlbao.png"></p>
<p>I think these are fascinating insights into the lyrics, just based on these four words alone! Looking at these results you can begin to see some themes emerge. This provides a great segue into the next tutorial on Topic Modeling!</p>
<h2 id="conclusion">Conclusion</h2>
<p>In this tutorial, you created a tidy dataset and analyzed basic information such as the lexical diversity and song counts per release year, and you examined the relationship between release decade and whether a song hit the charts. You then explored some sentiment lexicons and how well they matched the lyrics. Next, you performed sentiment analysis on all songs in the dataset, sentiment over time, song level sentiment, and the impact of bigrams. You did this using a wide variety of interesting graphs, each giving a different perspective.</p>
<p>So is it possible to write a program to determine mood in lyrics? Why yes, it is! How reliable are your results? It depends on a wide range of criteria such as the amount of data preparation, the choice of lexicon, the method of analysis, the quality of the source data, and so on. Comparing real life events, both personal and societal, can illuminate the mood of any lyric. Prince's polar sentiment seemed to slightly decline over time, yet overall, <em>joy</em> does seem to stand out. Charted songs seem to be more positive than uncharted songs. The claims of predicting 9/11 and his own death seem to eerily match his words.</p>
<p>But lyrics are complex and too many assumptions can cause problems. If you take what you've learned about the lyrics into the next tutorial, Part Two-B on Topic Modeling, you will be well on your way to digging out themes and motifs. How much NLP can be performed on lyrics which appear without punctuation or sentence structure? What was Prince really singing about? Now that you understand the mood, you're more prepared to investigate the possible topics. And finally, can you apply machine learning techniques to predict the decade or chart level of a song? Join me in the next few tutorials to find out!  </p>
<p>I hope you've enjoyed the journey so far. In Part Two-B we're going to party like it's 1999!</p>
</div>
<link href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.12.0/styles/solarized-dark.min.css" rel="stylesheet">
<link href="https://fonts.googleapis.com/css?family=Lora" rel="stylesheet">
<link href="https://fonts.googleapis.com/css?family=Roboto+Mono:400,400i,700,700i" rel="stylesheet">
</div>
<div class="jsx-1464850800 social__bottom mobileOnly"><div class="jsx-1464850800 voteAndSocial">
<div class="jsx-1464850800">
<div class="jsx-1972554161 Upvote"><div class="jsx-1972554161">
<div class="jsx-1972554161 normal">
<span class="jsx-1972554161 icon"><svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" viewbox="0 0 12 12"><path d="M1 10L6 0l5 10z"></path></svg></span><span class="jsx-1972554161 count">98</span>
</div>
<div class="jsx-1972554161 voted">
<span class="jsx-1972554161 icon"><svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" viewbox="0 0 12 12"><path d="M1 10L6 0l5 10z"></path></svg></span><span class="jsx-1972554161 count">98</span>
</div>
</div></div>
<a href="#comments" class="jsx-3293774837 CommentCounter"><span class="jsx-3293774837 icon"><svg xmlns="http://www.w3.org/2000/svg" viewbox="0 0 18 18"><path d="M12.595 13.364c.01-.111.02-.197.028-.251.058-.405.372-.702.74-.702h1.257c1.035-.002 1.875-.934 1.88-2.082V4.764c-.001-1.155-.842-2.092-1.878-2.094H3.38c-1.034.002-1.873.931-1.88 2.076v5.565c.001 1.156.842 2.092 1.878 2.094h6.626c.292 0 .557.189.68.484.408.977 1.07 1.576 1.94 1.85a6.004 6.004 0 0 1-.03-1.375zm1.51 1.119c.048.314.136.521.235.606.566.487.258 1.497-.458 1.497-1.87 0-3.423-.785-4.33-2.51H3.376C1.513 14.07.004 12.39 0 10.311V4.74C.014 2.673 1.52 1.004 3.378 1h11.245c1.864.004 3.373 1.686 3.377 3.763v5.57c-.01 2.07-1.518 3.744-3.378 3.748h-.551c.004.138.016.273.035.402zm-8.423-5.81a1.114 1.114 0 1 0 0-2.229 1.114 1.114 0 0 0 0 2.229zm3.268 0a1.114 1.114 0 1 0 0-2.229 1.114 1.114 0 0 0 0 2.229zm3.318 0a1.114 1.114 0 1 0 0-2.229 1.114 1.114 0 0 0 0 2.229z"></path></svg></span><span class="jsx-3293774837 count">0</span></a>
</div>
<div class="jsx-494086174 Social"><div class="jsx-494086174 icons">
<a href="https://www.facebook.com/sharer.php?u=https://www.datacamp.com/community/tutorials/sentiment-analysis-R" target="_blank" rel="noopener noreferrer" class="jsx-494086174 icon"><svg height="12" xmlns="http://www.w3.org/2000/svg" viewbox="0 0 11.73 22.58"><path d="M7.61 22.58v-10.3h3.46l.52-4h-4V5.7c0-1.16.32-2 2-2h2.13V.16A28.47 28.47 0 0 0 8.63 0C5.56 0 3.47 1.87 3.47 5.31v3H0v4h3.47v10.3h4.14z"></path></svg></a><a href="https://twitter.com/intent/tweet?url=https://www.datacamp.com/community/tutorials/sentiment-analysis-R" target="_blank" rel="noopener noreferrer" class="jsx-494086174 icon centerIcon"><svg height="10" xmlns="http://www.w3.org/2000/svg" viewbox="0 0 20.42 16.67"><path d="M10 5.18c0-.28-.06-.53-.07-.78a4 4 0 0 1 .73-2.57A4.08 4.08 0 0 1 13.93 0 4 4 0 0 1 17 1.15a.43.43 0 0 0 .46.12 8.68 8.68 0 0 0 2.2-.84l.2-.1a4.36 4.36 0 0 1-1.75 2.28A9 9 0 0 0 20.42 2l-.21.3a3.83 3.83 0 0 1-.23.3A8.45 8.45 0 0 1 18.5 4a.28.28 0 0 0-.13.27A12 12 0 0 1 17 10.18a11.8 11.8 0 0 1-3.37 4.11 11.17 11.17 0 0 1-4.39 2.06 12.53 12.53 0 0 1-4.44.22 11.87 11.87 0 0 1-4.74-1.73L0 14.79a8.6 8.6 0 0 0 6.16-1.74 4.28 4.28 0 0 1-3.91-2.91h.95a6.18 6.18 0 0 0 .89-.12A4.2 4.2 0 0 1 .8 5.88a4 4 0 0 0 1.81.49 4.23 4.23 0 0 1-1.78-3A4.07 4.07 0 0 1 1.38.79 12.06 12.06 0 0 0 10 5.18z" id="iOjKBC.tif"></path></svg></a><a href="https://www.linkedin.com/cws/share?url=https://www.datacamp.com/community/tutorials/sentiment-analysis-R" target="_blank" rel="noopener noreferrer" class="jsx-494086174 icon"><svg height="10" xmlns="http://www.w3.org/2000/svg" viewbox="0 0 16.99 17"><path d="M3.85 17H.34V5.67h3.51zM2.07 4.18a2.09 2.09 0 1 1 2.08-2.09 2.08 2.08 0 0 1-2.08 2.09zM17 17h-3.5v-5.95c0-1.63-.62-2.54-1.91-2.54s-2.14.95-2.14 2.54V17H6.09V5.67h3.36v1.52a4 4 0 0 1 3.42-1.87c2.4 0 4.12 1.47 4.12 4.5V17z"></path></svg></a>
</div></div>
</div></div>
</div></div>
<div id="comments" class="jsx-3956319705 PostAComment"><button class="jsx-1844558338 Button big seeAll same greyIcon"><div class="jsx-1844558338 icon"><svg xmlns="http://www.w3.org/2000/svg" viewbox="0 0 18 18"><path d="M12.595 13.364c.01-.111.02-.197.028-.251.058-.405.372-.702.74-.702h1.257c1.035-.002 1.875-.934 1.88-2.082V4.764c-.001-1.155-.842-2.092-1.878-2.094H3.38c-1.034.002-1.873.931-1.88 2.076v5.565c.001 1.156.842 2.092 1.878 2.094h6.626c.292 0 .557.189.68.484.408.977 1.07 1.576 1.94 1.85a6.004 6.004 0 0 1-.03-1.375zm1.51 1.119c.048.314.136.521.235.606.566.487.258 1.497-.458 1.497-1.87 0-3.423-.785-4.33-2.51H3.376C1.513 14.07.004 12.39 0 10.311V4.74C.014 2.673 1.52 1.004 3.378 1h11.245c1.864.004 3.373 1.686 3.377 3.763v5.57c-.01 2.07-1.518 3.744-3.378 3.748h-.551c.004.138.016.273.035.402zm-8.423-5.81a1.114 1.114 0 1 0 0-2.229 1.114 1.114 0 0 0 0 2.229zm3.268 0a1.114 1.114 0 1 0 0-2.229 1.114 1.114 0 0 0 0 2.229zm3.318 0a1.114 1.114 0 1 0 0-2.229 1.114 1.114 0 0 0 0 2.229z"></path></svg></div>
<div class="jsx-1844558338 ">Post a Comment</div></button></div></main><div class="jsx-2506565400 SidebarSocial">
<div class="jsx-2506565400 rss"><a href="/community/rss.xml" class="jsx-2506565400"><svg height="13" xmlns="http://www.w3.org/2000/svg" viewbox="0 0 18 18"><circle cx="3.08" cy="14.92" r="3.08"></circle><path d="M16.46 18a1.54 1.54 0 0 1-1.54-1.54c0-8.25-5.13-13.38-13.38-13.38A1.59 1.59 0 0 1 .46 1.15 1.72 1.72 0 0 1 1.54 0a16.45 16.45 0 0 1 12 4.51c3 2.95 4.51 7.08 4.51 12A1.54 1.54 0 0 1 16.46 18z"></path><path d="M10.63 18a1.54 1.54 0 0 1-1.54-1.54c0-5-2.54-7.54-7.54-7.54a1.54 1.54 0 0 1 0-3.08c6.75 0 10.63 3.87 10.63 10.62A1.54 1.54 0 0 1 10.63 18z"></path></svg>Subscribe to RSS</a></div>
<div class="jsx-2506565400 icons">
<a href="https://www.facebook.com/pages/DataCamp/726282547396228" target="_blank" rel="noopener noreferrer" class="jsx-2506565400 icon"><svg height="16" xmlns="http://www.w3.org/2000/svg" viewbox="0 0 11.73 22.58"><path d="M7.61 22.58v-10.3h3.46l.52-4h-4V5.7c0-1.16.32-2 2-2h2.13V.16A28.47 28.47 0 0 0 8.63 0C5.56 0 3.47 1.87 3.47 5.31v3H0v4h3.47v10.3h4.14z"></path></svg></a><a href="https://twitter.com/datacamp" target="_blank" rel="noopener noreferrer" class="jsx-2506565400 icon"><svg height="13" xmlns="http://www.w3.org/2000/svg" viewbox="0 0 20.42 16.67"><path d="M10 5.18c0-.28-.06-.53-.07-.78a4 4 0 0 1 .73-2.57A4.08 4.08 0 0 1 13.93 0 4 4 0 0 1 17 1.15a.43.43 0 0 0 .46.12 8.68 8.68 0 0 0 2.2-.84l.2-.1a4.36 4.36 0 0 1-1.75 2.28A9 9 0 0 0 20.42 2l-.21.3a3.83 3.83 0 0 1-.23.3A8.45 8.45 0 0 1 18.5 4a.28.28 0 0 0-.13.27A12 12 0 0 1 17 10.18a11.8 11.8 0 0 1-3.37 4.11 11.17 11.17 0 0 1-4.39 2.06 12.53 12.53 0 0 1-4.44.22 11.87 11.87 0 0 1-4.74-1.73L0 14.79a8.6 8.6 0 0 0 6.16-1.74 4.28 4.28 0 0 1-3.91-2.91h.95a6.18 6.18 0 0 0 .89-.12A4.2 4.2 0 0 1 .8 5.88a4 4 0 0 0 1.81.49 4.23 4.23 0 0 1-1.78-3A4.07 4.07 0 0 1 1.38.79 12.06 12.06 0 0 0 10 5.18z" id="iOjKBC.tif"></path></svg></a><a href="https://www.linkedin.com/company/datamind-org" target="_blank" rel="noopener noreferrer" class="jsx-2506565400 icon"><svg height="12" xmlns="http://www.w3.org/2000/svg" viewbox="0 0 16.99 17"><path d="M3.85 17H.34V5.67h3.51zM2.07 4.18a2.09 2.09 0 1 1 2.08-2.09 2.08 2.08 0 0 1-2.08 2.09zM17 17h-3.5v-5.95c0-1.63-.62-2.54-1.91-2.54s-2.14.95-2.14 2.54V17H6.09V5.67h3.36v1.52a4 4 0 0 1 3.42-1.87c2.4 0 4.12 1.47 4.12 4.5V17z"></path></svg></a><a href="https://www.youtube.com/channel/UC79Gv3mYp6zKiSwYemEik9A" target="_blank" rel="noopener noreferrer" class="jsx-2506565400 icon"><svg height="12" xmlns="http://www.w3.org/2000/svg" viewbox="0 0 25.19 17.73"><path d="M24.21 1.52C23.3.44 21.62 0 18.42 0H6.78C3.5 0 1.79.47.88 1.62S0 4.4 0 6.68V11c0 4.43 1 6.68 6.78 6.68h11.64c2.78 0 4.32-.39 5.32-1.34S25.2 13.76 25.2 11V6.68c-.01-2.41-.08-4.07-.99-5.16zm-8 7.94l-5.29 2.76a.81.81 0 0 1-1.19-.72V6a.81.81 0 0 1 1.19-.72L16.17 8a.81.81 0 0 1 0 1.44z"></path></svg></a>
</div>
<div class="jsx-2506565400 menu">
<a href="/about" class="jsx-2506565400 menuItem">About</a><a href="/terms-of-use" class="jsx-2506565400 menuItem">Terms</a><a href="/privacy-policy" class="jsx-2506565400 menuItem">Privacy</a>
</div>
</div>
<div class="jsx-879378290 BottomBar bar"><div class="jsx-879378290 barView">
<div style="background-image:url(https://res.cloudinary.com/dyd911kmh/image/fetch/t_avatar_thumbnail/https://cdn.datacamp.com/community/assets/placeholder_avatar-7f673b5d40e159404a56b5931250cc73.png);border-radius:20px;min-width:40px;min-height:40px" class="jsx-3208234818 Avatar"></div>
<div class="jsx-879378290 blueBar">Want to leave a comment?</div>
</div></div>
</div>
<link href="https://fonts.googleapis.com/css?family=Lato:300,400i,400,700" rel="stylesheet">
<div class="Analytics">
<script>
      ;(function(p,l,o,w,i,n,g){if(!p[i]){p.GlobalSnowplowNamespace=p.GlobalSnowplowNamespace||[];
        p.GlobalSnowplowNamespace.push(i);p[i]=function(){(p[i].q=p[i].q||[]).push(arguments)
        };p[i].q=p[i].q||[];n=l.createElement(o);g=l.getElementsByTagName(o)[0];n.async=1;
        n.src=w;g.parentNode.insertBefore(n,g)}}(window,document,"script","//d36fqcuygdrd4y.cloudfront.net/BuKMCyKUvvyXZkMi44LjI.js","snowplow"));

      window.snowplow('newTracker', 'co', 'track.datacamp.com', {
        platform: 'web',
        post: true,
        discoverRootDomain: true,
        contexts: {
          webPage: true,
          performanceTiming: true
        }
      });
      window.snowplow('enableActivityTracking', 10, 10);
      window.snowplow('enableLinkClickTracking');
    </script><script data-cfasync="false">(function(W,i,s,e,P,o,p){W['WisePopsObject']=P;W[P]=W[P]||function(){
      (W[P].q=W[P].q||[]).push(arguments)},W[P].l=1*new Date();o=i.createElement(s),
      p=i.getElementsByTagName(s)[0];o.async=1;o.src=e;p.parentNode.insertBefore(o,p)
    })(window,document,'script','//loader.wisepops.com/get-loader.js?v=1&site=VswVJn7o4J','wisepops');</script>
</div>
</div></div></div>
<div id="__next-error"></div>
<script>
          __NEXT_DATA__ = {"props":{"isServer":true,"store":{},"initialState":{"adminContent":{"isFetching":false,"isFetched":false,"statusMessage":"","content":{},"form":{"isSaving":false,"isSucceeded":false,"statusMessage":"","isAdminFormModalOpen":false,"previewSlug":""},"delete":{"isDeleting":false,"isSucceeded":false,"statusMessage":"","isDeleteAdminContentModalOpen":false},"update":{"isApprovingArticle":false,"isSucceeded":false,"statusMessage":"","isApproveArticleModalOpen":false}},"adminList":{"isFetched":false,"isFetching":false,"statusMessage":""},"auth":{"isAuthModalOpen":false,"isLogin":false,"isAuthorized":false,"isSubscriber":false,"user":{},"loginTitle":"","signUpTitle":""},"clientConfig":{"isDevelopment":false,"absoluteUrl":"https://www.datacamp.com","isNewsActive":true,"ALGOLIA_APP_ID":"7H5IORUQLD","ALGOLIA_API_KEY":"ae4f7a78b4914ef37d11dc177ad2eb13","ALGOLIA_API_INDEX":"community_prod","DC_COMMUNITY_AUTHOR_APP_URL":"https://community-author-app.new.datacamp.com/","DC_LIGHT_URL":"https://cdn.datacamp.com/datacamp-light-latest.min.js","ANALYTICS_GOOGLE_TAG_MANAGER":"GTM-TGGWB2P","ANALYTICS_SNOWPLOW_ENDPOINT":"track.datacamp.com","WISEPOPS":"VswVJn7o4J","CHAT_SUBSCRIBER_REDIRECT":"https://www.datacamp.com/slack/join","CHAT_NONSUBSCRIBER_LINK":"https://www.datacamp.com/subscribe?from_communitychat=true","CHAT_SUBSCRIBE_TEAM":"https://www.datacamp.com/groups/business"},"comment":{"isFetching":false,"isFetched":false,"statusMessage":"","comments":[],"commentsTotal":0,"form":{"isSaving":false,"isSucceeded":false,"statusMessage":"","id":"new","parentId":null,"commentText":""},"delete":{"isDeleting":false,"isSucceeded":false,"statusMessage":"","isDeleteCommentModalOpen":false},"isBottomBarOpen":true,"bottomBarView":"bar"},"content":{"content":{"id":9458,"externalId":null,"type":"Tutorial","status":"published","authorId":"debbieliskefa5156febfc047aeb79dee6c802d3d04","title":"Tidy Sentiment Analysis in R","slug":"sentiment-analysis-R","previewSlug":null,"description":"Learn how to perform tidy sentiment analysis in R on Prince's songs, sentiment over time, song level sentiment, the impact of bigrams, and much more!","articles":[],"courses":[],"redirectSlug":null,"contentHtml":"\u003cp\u003eTake a Sentimental Journey through the life and times of Prince, The Artist, in part Two-A of a three part tutorial series using sentiment analysis with R to shed insight on The Artist\u0026#39;s career and societal influence. The three tutorials cover the following:   \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\u003ca href=\"https://www.datacamp.com/community/tutorials/R-nlp-machine-learning\" target=\"_blank\"\u003ePart One: Text Mining and Exploratory Analysis  \u003c/a\u003e\u003c/li\u003e\r\n\u003cli\u003ePart Two: Sentiment Analysis and Topic Modeling with NLP  \u003c/li\u003e\r\n\u003cli\u003ePart Three: Predictive Analytics using Machine Learning  \u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eIf you would like to learn more about sentiment analysis, be sure to take a look at our \u003ca href=\"https://www.datacamp.com/courses/sentiment-analysis-in-r-the-tidy-way\" target=\"_blank\"\u003eSentiment Analysis in R: The Tidy Way\u003c/a\u003e course.\u003c/p\u003e\r\n\u003cp\u003eDid you know that Prince predicted 9/11, on stage, three years before it happened? He may have also predicted his own death. Could this be true? Wouldn\u0026#39;t it be interesting to examine his lyrics and make an educated judgment call on your own? On April 21, 1985, he recorded \u0026quot;Sometimes It Snows In April\u0026quot;. He died exactly 31 years later on April 21, 2016. Take a look at his choice of words in the sentiment analysis of this song:\u003c/p\u003e\r\n\u003cp\u003e\u003cfigure\u003e\u003ccenter\u003e\r\n  \u003cimg src=\"http://res.cloudinary.com/dyd911kmh/image/upload/f_auto,q_auto:best/v1520597619/snowsinapril_ccmwmx.bmp\" alt=\"Sometimes It Snows In April\", align = \"middle\", width = \"100%\"\u003e\r\n  \u003cfigcaption\u003e\u003cb\u003eSentiment Analysis of \u0026quot;Sometimes It Snows In April\u0026quot;\r\n  \u003c/b\u003e\u003c/figcaption\u003e\r\n\u003c/figure\u003e\r\n\u003cbr\u003e\u003c/p\u003e\r\n\u003cp\u003eThis gives new meaning to \u003cem\u003ePredictive\u003c/em\u003e Analytics!\u003c/p\u003e\r\n\u003cp\u003eContent:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\u003ca href=\"#introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ca href=\"#prepwork\"\u003ePrep Work\u003c/a\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ca href=\"#descriptivestatistics\"\u003eDescriptive Statistics\u003c/a\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ca href=\"#lexiconsandlyrics\"\u003eLexicons and Lyrics\u003c/a\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ca href=\"#analysis\"\u003eDetailed Analysis\u003c/a\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ca href=\"#conclusion\"\u003eConclusion\u003c/a\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eStructure:\u003c/p\u003e\r\n\u003cp\u003eEach piece of code is followed by an insight that is typically subjective in nature. Feel free to move from section to section making your own assumptions if you prefer! I recommend reading the following introduction, but if you would like to jump straight to the code, click \u003ca href=\"#prepwork\"\u003ehere\u003c/a\u003e. If you already understand the concept behind lexicons, you can take the fast track by going directly to the \u003ca href=\"#analysis\"\u003edetailed analysis section\u003c/a\u003e.\u003c/p\u003e\r\n\u003cp\u003e\u003ca id=\"introduction\"\u003e\u003c/a\u003e\u003c/p\u003e\r\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\r\n\u003ch3 id=\"triplets-three-part-summary\"\u003eTriplets: Three-Part Summary\u003c/h3\u003e\r\n\u003cp\u003eI just rescued two kittens and a puppy, so I think in threes now. Plus, the \u003cem\u003erule of three\u003c/em\u003e is a writing principle that suggests that things that come in threes are inherently funnier, more satisfying, or more effective than other numbers or things - which is why I broke this up into three parts... So, in \u003ca href=\"https://www.datacamp.com/community/tutorials/R-nlp-machine-learning\" target=\"_blank\"\u003ePart One\u003c/a\u003e, you were introduced to text mining and exploratory analysis using a dataset of hundreds of song lyrics by the legendary artist, Prince. In Part Two, you will focus on sentiment analysis (Two-A) and topic modeling (Two-B) with NLP. Part Three will conclude with additional predictive analytic tasks using machine learning techniques addressing questions such as whether or not it is possible to determine what decade a song was released, or more interestingly, predict whether a song will hit the Billboard charts based on its lyrics. Throughout these tutorials, you will utilize different machine learning algorithms - each highlighted in red in the graphic below.\u003c/p\u003e\r\n\u003cp\u003e\u003cfigure\u003e\u003ccenter\u003e\r\n  \u003cimg src=\"http://res.cloudinary.com/dyd911kmh/image/upload/f_auto,q_auto:best/v1520597618/MLImage_bw1dlm.jpg\" alt=\"Machine Leaning Techniques\", align = \"middle\", width = \"75%\"\u003e\r\n  \u003cfigcaption\u003eAdapted from the graphic presented \u003ca href=\"https://hackbrightacademy.com/content/uploads/2014/05/ml_algorithms.png\" target=\"_blank\"\u003ehere\u003c/a\u003e. Note that the different aspects of modeling and machine learning techniques do not necessarily fit into a single box as shown above. This is just to give you an idea of what to expect.\u003c/figcaption\u003e\r\n\u003c/figure\u003e\r\n\u003cbr\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ca id=\"breakingup\"\u003e\u003c/a\u003e\u003c/p\u003e\r\n\u003ch3 id=\"breaking-up-is-hard-to-do\"\u003eBreaking Up Is Hard To Do\u003c/h3\u003e\r\n\u003cp\u003eYes, I committed to just three parts, but I decided to break up Part Two into Two-A (Sentiment Analysis) and Two-B (Topic Modeling - soon to follow), resulting in four distinct tutorials. There are many great articles and \u003ca href=\"https://www.datacamp.com/courses/\" target=\"_blank\"\u003ecourses\u003c/a\u003e on the process behind sentiment analysis, so the goal in Part Two-A is to focus on deriving insights from the analysis - not just writing the code. You\u0026#39;ll use Prince\u0026#39;s lyrics as an example, but you can apply the steps to your own favorite artist. Your journey through the complete tutorial series will hopefully fuel a sense of wonder about the opportunities offered by lyrical analysis while being introduced to Natural Language Processing (NLP) and machine learning techniques.\u003c/p\u003e\r\n\u003cp\u003e\u003ca id=\"prerequisites\"\u003e\u003c/a\u003e\u003c/p\u003e\r\n\u003ch3 id=\"prerequisites\"\u003ePrerequisites\u003c/h3\u003e\r\n\u003cp\u003ePart Two-A of this tutorial series requires a basic understanding of \u003ca href=\"https://www.tidyverse.org/\" target=\"_blank\"\u003etidy\u003c/a\u003e data - specifically packages such as \u003ccode\u003edplyr\u003c/code\u003e for data transformation, \u003ccode\u003eggplot2\u003c/code\u003e for visualizations, and the \u003ccode\u003e%\u0026gt;%\u003c/code\u003e pipe operator (originally from the \u003ccode\u003emagrittr\u003c/code\u003e package). You will notice that several steps are typically combined using the \u003ccode\u003e%\u0026gt;%\u003c/code\u003e operator to keep the code compact and reusable.\u003c/p\u003e\r\n\u003cp\u003eAs this tutorial is also a case study, it is densely packed with visualizations beyond the commonly used graphs and charts. As a result, another prerequisite is to be able to install new packages in your own environment. In order to focus on capturing insights, I have included code that is designed to be reused on your own dataset, but detailed explanation will require further investigation on your part. Supporting links will be provided for each package. This will expose you to new tools while focusing on their application.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eTip\u003c/strong\u003e: read \u003ca href=\"https://www.datacamp.com/community/tutorials/R-nlp-machine-learning\" target=\"_blank\"\u003ePart One\u003c/a\u003e first in order to have a foundation for the tutorial series and insight into the \u003cem\u003edense\u003c/em\u003e and \u003cem\u003ediverse\u003c/em\u003e vocabulary of Prince\u0026#39;s lyrics.\u003c/p\u003e\r\n\u003cp\u003e\u003ca id=\"overview\"\u003e\u003c/a\u003e\u003c/p\u003e\r\n\u003ch3 id=\"sentiment-analysis-overview\"\u003eSentiment Analysis Overview\u003c/h3\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\u003cp\u003e\u003cem\u003eMethods:\u003c/em\u003e Sentiment analysis is a type of text mining which aims to determine the opinion and subjectivity of its content. When applied to lyrics, the results can be representative of not only the artist\u0026#39;s attitudes, but can also reveal pervasive, cultural influences. There are different methods used for sentiment analysis, including training a known dataset, creating your own classifiers with rules, and using predefined lexical dictionaries (lexicons). In this tutorial, you will use the lexicon-based approach, but I would encourage you to investigate the other methods as well as their associated trade-offs.    \u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\u003cp\u003e\u003cem\u003eLevels:\u003c/em\u003e Just as there are different methods used for sentiment analysis, there are also different \u003cem\u003elevels\u003c/em\u003e of analysis based on the text. These levels are typically identified as \u003cstrong\u003edocument\u003c/strong\u003e, \u003cstrong\u003esentence\u003c/strong\u003e, and \u003cstrong\u003eword\u003c/strong\u003e. In lyrics, the \u003cem\u003edocument\u003c/em\u003e could be defined as sentiment per decade, year, chart-level, or song. The sentence level is not usually an option with lyrics as punctuation can detract from rhymes and patterns. Word level analysis exposes detailed information and can be used as foundational knowledge for more advanced practices in topic modeling.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003e\u003ca id=\"goalsandquestions\"\u003e\u003c/a\u003e\u003c/p\u003e\r\n\u003ch3 id=\"prepare-your-questions-\"\u003ePrepare Your Questions!\u003c/h3\u003e\r\n\u003cp\u003eEvery data science project needs to have a set of questions to explore. Here are a few to keep in mind as you work through this tutorial: is it possible to write a program to determine the mood expressed in lyrics? Are predefined lexicons sufficient? How much data preparation is necessary? Can you link your results to real-life events? Does sentiment change over time? Are hit songs more positive or negative than uncharted songs? What words stand out in the lyrics during the year Prince was said to predict 9/11? Did he predict his own death?\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eTip\u003c/strong\u003e: lyrical analysis is very different and typically more complex than speeches or books, making it difficult to capture insights, so remember to be cautious of all assumptions! I will propose more questions than answers in this tutorial, so be prepared to think outside of the quadrilateral parallelogram!\u003c/p\u003e\r\n\u003cp\u003e\u003ca id=\"prepwork\"\u003e\u003c/a\u003e\u003c/p\u003e\r\n\u003ch2 id=\"prep-work\"\u003ePrep Work\u003c/h2\u003e\r\n\u003ch3 id=\"libraries-and-functions\"\u003eLibraries and Functions\u003c/h3\u003e\r\n\u003cp\u003eTo get started analyzing Prince\u0026#39;s lyrics, load the libraries below. These may seem daunting at first, but most of them are simply for graphs and charts. Given the frequent use of visuals, it\u0026#39;s preferable to define a standard color scheme for consistency. I\u0026#39;ve created a list using specific ANSI color codes. The \u003ccode\u003etheme()\u003c/code\u003e function from \u003ccode\u003eggplot2\u003c/code\u003e allows customization of individual graphs, so you will also create your own function, \u003ccode\u003etheme_lyrics()\u003c/code\u003e, that will modify the default settings. The \u003ccode\u003eknitr\u003c/code\u003e package is an engine for dynamic report generation with R. Use it along with \u003ccode\u003ekableExtra\u003c/code\u003e and \u003ccode\u003eformattable\u003c/code\u003e to create attractive text tables with color. Again create your own function, \u003ccode\u003emy_kable_styling()\u003c/code\u003e to standardize the resulting output of these libraries. I will mention the other packages as they are utilized.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"lang-r\"\u003elibrary(dplyr) #Data manipulation (also included in the tidyverse package)\r\nlibrary(tidytext) #Text mining\r\nlibrary(tidyr) #Spread, separate, unite, text mining (also included in the tidyverse package)\r\nlibrary(widyr) #Use for pairwise correlation\r\n\r\n#Visualizations!\r\nlibrary(ggplot2) #Visualizations (also included in the tidyverse package)\r\nlibrary(ggrepel) #`geom_label_repel`\r\nlibrary(gridExtra) #`grid.arrange()` for multi-graphs\r\nlibrary(knitr) #Create nicely formatted output tables\r\nlibrary(kableExtra) #Create nicely formatted output tables\r\nlibrary(formattable) #For the color_tile function\r\nlibrary(circlize) #Visualizations - chord diagram\r\nlibrary(memery) #Memes - images with plots\r\nlibrary(magick) #Memes - images with plots (image_read)\r\nlibrary(yarrr)  #Pirate plot\r\nlibrary(radarchart) #Visualizations\r\nlibrary(igraph) #ngram network diagrams\r\nlibrary(ggraph) #ngram network diagrams\r\n\r\n#Define some colors to use throughout\r\nmy_colors \u0026lt;- c(\u0026quot;#E69F00\u0026quot;, \u0026quot;#56B4E9\u0026quot;, \u0026quot;#009E73\u0026quot;, \u0026quot;#CC79A7\u0026quot;, \u0026quot;#D55E00\u0026quot;, \u0026quot;#D65E00\u0026quot;)\r\n\r\n#Customize ggplot2\u0026#39;s default theme settings\r\n#This tutorial doesn\u0026#39;t actually pass any parameters, but you may use it again in future tutorials so it\u0026#39;s nice to have the options\r\ntheme_lyrics \u0026lt;- function(aticks = element_blank(),\r\n                         pgminor = element_blank(),\r\n                         lt = element_blank(),\r\n                         lp = \u0026quot;none\u0026quot;)\r\n{\r\n  theme(plot.title = element_text(hjust = 0.5), #Center the title\r\n        axis.ticks = aticks, #Set axis ticks to on or off\r\n        panel.grid.minor = pgminor, #Turn the minor grid lines on or off\r\n        legend.title = lt, #Turn the legend title on or off\r\n        legend.position = lp) #Turn the legend on or off\r\n}\r\n\r\n#Customize the text tables for consistency using HTML formatting\r\nmy_kable_styling \u0026lt;- function(dat, caption) {\r\n  kable(dat, \u0026quot;html\u0026quot;, escape = FALSE, caption = caption) %\u0026gt;%\r\n  kable_styling(bootstrap_options = c(\u0026quot;striped\u0026quot;, \u0026quot;condensed\u0026quot;, \u0026quot;bordered\u0026quot;),\r\n                full_width = FALSE)\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch3 id=\"sushi-data\"\u003eSushi Data\u003c/h3\u003e\r\n\u003cp\u003eAs always, you\u0026#39;ll start by reading the raw data into a data frame. In \u003ca href=\"https://www.datacamp.com/community/tutorials/R-nlp-machine-learning\" target=\"_blank\"\u003ePart One\u003c/a\u003e, you performed some data conditioning on the original dataset, such as expanding contractions, removing escape sequences, and converting text to lower case. You saved that clean dataset to a CSV file for use in this tutorial. Use \u003ccode\u003eread.csv()\u003c/code\u003e to create \u003ccode\u003eprince_data\u003c/code\u003e and keep in mind that you want your lyrics to be character strings, so make sure to set \u003ccode\u003estringsAsFactors = FALSE\u003c/code\u003e. Since you don\u0026#39;t need the rows numbered, set \u003ccode\u003erow.names = 1\u003c/code\u003e.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e that you could avoid these parameters by reading this into a modern data frame called a \u003ca href=\"http://tibble.tidyverse.org/\" target=\"_blank\"\u003etibble\u003c/a\u003e, using \u003ccode\u003eread_csv()\u003c/code\u003e, but for consistency with \u003ca href=\"https://www.datacamp.com/community/tutorials/R-nlp-machine-learning\" target=\"_blank\"\u003ePart One\u003c/a\u003e, \u003ccode\u003eread.csv()\u003c/code\u003e is used instead.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"lang-r\"\u003eprince_data \u0026lt;- read.csv(\u0026#39;prince_new.csv\u0026#39;, stringsAsFactors = FALSE, row.names = 1)\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eTake a quick peek at the data:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"lang-r\"\u003eglimpse(prince_data) #Transposed version of `print()`\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cpre\u003e\u003ccode\u003e## Observations: 824\r\n## Variables: 10\r\n## $ lyrics      \u0026lt;chr\u0026gt; \u0026quot;all 7 and we will watch them fall they stand in t...\r\n## $ song        \u0026lt;chr\u0026gt; \u0026quot;7\u0026quot;, \u0026quot;319\u0026quot;, \u0026quot;1999\u0026quot;, \u0026quot;2020\u0026quot;, \u0026quot;3121\u0026quot;, \u0026quot;7779311\u0026quot;, \u0026quot;u\u0026quot;...\r\n## $ year        \u0026lt;int\u0026gt; 1992, NA, 1982, NA, 2006, NA, NA, NA, NA, NA, NA, ...\r\n## $ album       \u0026lt;chr\u0026gt; \u0026quot;Symbol\u0026quot;, NA, \u0026quot;1999\u0026quot;, \u0026quot;Other Songs\u0026quot;, \u0026quot;3121\u0026quot;, NA, N...\r\n## $ peak        \u0026lt;int\u0026gt; 3, NA, 2, NA, 1, NA, NA, NA, NA, NA, NA, NA, NA, N...\r\n## $ us_pop      \u0026lt;chr\u0026gt; \u0026quot;7\u0026quot;, NA, \u0026quot;12\u0026quot;, NA, \u0026quot;1\u0026quot;, NA, NA, NA, NA, NA, NA, NA...\r\n## $ us_rnb      \u0026lt;chr\u0026gt; \u0026quot;61\u0026quot;, NA, \u0026quot;4\u0026quot;, NA, \u0026quot;1\u0026quot;, NA, NA, NA, NA, NA, NA, NA...\r\n## $ decade      \u0026lt;chr\u0026gt; \u0026quot;1990s\u0026quot;, NA, \u0026quot;1980s\u0026quot;, NA, \u0026quot;2000s\u0026quot;, NA, NA, NA, NA,...\r\n## $ chart_level \u0026lt;chr\u0026gt; \u0026quot;Top 10\u0026quot;, \u0026quot;Uncharted\u0026quot;, \u0026quot;Top 10\u0026quot;, \u0026quot;Uncharted\u0026quot;, \u0026quot;Top...\r\n## $ charted     \u0026lt;chr\u0026gt; \u0026quot;Charted\u0026quot;, \u0026quot;Uncharted\u0026quot;, \u0026quot;Charted\u0026quot;, \u0026quot;Uncharted\u0026quot;, \u0026quot;C...\r\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eYou can see that \u003ccode\u003eprince_data\u003c/code\u003e is a data frame of 824 songs and 10 columns. This means that a \u003cem\u003erecord\u003c/em\u003e is a \u003cem\u003esong\u003c/em\u003e, literally!\u003c/p\u003e\r\n\u003ch3 id=\"good-clean-fun-prince_tidy-\"\u003eGood Clean Fun: \u003ccode\u003eprince_tidy\u003c/code\u003e\u003c/h3\u003e\r\n\u003cp\u003eHere are a few remaining data wrangling steps:  \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eRemove undesirable words (manual list of unnecessary words)    \u003c/li\u003e\r\n\u003cli\u003eRemove stop words (overly common words such as \u0026quot;and\u0026quot;, \u0026quot;the\u0026quot;, \u0026quot;a\u0026quot;, \u0026quot;of\u0026quot;, etc.)  \u003c/li\u003e\r\n\u003cli\u003eRemove words with fewer than three characters (often used for phonetic effect in music)  \u003c/li\u003e\r\n\u003cli\u003eSplit the lyrics into individual words  \u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eIn order to turn your raw data into a \u003cem\u003etidy\u003c/em\u003e format, use \u003ccode\u003eunnest_tokens()\u003c/code\u003e from \u003ccode\u003etidytext\u003c/code\u003e to create \u003ccode\u003eprince_tidy\u003c/code\u003e which breaks out the lyrics into individual words with one word per row. Then, you can use \u003ccode\u003eanti_join()\u003c/code\u003e and \u003ccode\u003efilter()\u003c/code\u003e from \u003ccode\u003edplyr\u003c/code\u003e for the remaining cleaning steps. \u003cem\u003e(See \u003ca href=\"https://www.datacamp.com/community/tutorials/R-nlp-machine-learning\" target=\"_blank\"\u003ePart One\u003c/a\u003e for a detailed explanation.)\u003c/em\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"lang-r\"\u003e#Created in the first tutorial\r\nundesirable_words \u0026lt;- c(\u0026quot;prince\u0026quot;, \u0026quot;chorus\u0026quot;, \u0026quot;repeat\u0026quot;, \u0026quot;lyrics\u0026quot;,\r\n                       \u0026quot;theres\u0026quot;, \u0026quot;bridge\u0026quot;, \u0026quot;fe0f\u0026quot;, \u0026quot;yeah\u0026quot;, \u0026quot;baby\u0026quot;,\r\n                       \u0026quot;alright\u0026quot;, \u0026quot;wanna\u0026quot;, \u0026quot;gonna\u0026quot;, \u0026quot;chorus\u0026quot;, \u0026quot;verse\u0026quot;,\r\n                       \u0026quot;whoa\u0026quot;, \u0026quot;gotta\u0026quot;, \u0026quot;make\u0026quot;, \u0026quot;miscellaneous\u0026quot;, \u0026quot;2\u0026quot;,\r\n                       \u0026quot;4\u0026quot;, \u0026quot;ooh\u0026quot;, \u0026quot;uurh\u0026quot;, \u0026quot;pheromone\u0026quot;, \u0026quot;poompoom\u0026quot;, \u0026quot;3121\u0026quot;,\r\n                       \u0026quot;matic\u0026quot;, \u0026quot; ai \u0026quot;, \u0026quot; ca \u0026quot;, \u0026quot; la \u0026quot;, \u0026quot;hey\u0026quot;, \u0026quot; na \u0026quot;,\r\n                       \u0026quot; da \u0026quot;, \u0026quot; uh \u0026quot;, \u0026quot; tin \u0026quot;, \u0026quot;  ll\u0026quot;, \u0026quot;transcription\u0026quot;,\r\n                       \u0026quot;repeats\u0026quot;, \u0026quot;la\u0026quot;, \u0026quot;da\u0026quot;, \u0026quot;uh\u0026quot;, \u0026quot;ah\u0026quot;)\r\n\r\n#Create tidy text format: Unnested, Unsummarized, -Undesirables, Stop and Short words\r\nprince_tidy \u0026lt;- prince_data %\u0026gt;%\r\n  unnest_tokens(word, lyrics) %\u0026gt;% #Break the lyrics into individual words\r\n  filter(!word %in% undesirable_words) %\u0026gt;% #Remove undesirables\r\n  filter(!nchar(word) \u0026lt; 3) %\u0026gt;% #Words like \u0026quot;ah\u0026quot; or \u0026quot;oo\u0026quot; used in music\r\n  anti_join(stop_words) #Data provided by the tidytext package\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cpre\u003e\u003ccode class=\"lang-r\"\u003eglimpse(prince_tidy) #From `dplyr`, better than `str()`.\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cpre\u003e\u003ccode\u003e## Observations: 76,116\r\n## Variables: 10\r\n## $ song        \u0026lt;chr\u0026gt; \u0026quot;7\u0026quot;, \u0026quot;7\u0026quot;, \u0026quot;7\u0026quot;, \u0026quot;7\u0026quot;, \u0026quot;7\u0026quot;, \u0026quot;7\u0026quot;, \u0026quot;7\u0026quot;, \u0026quot;7\u0026quot;, \u0026quot;7\u0026quot;, \u0026quot;7\u0026quot;, ...\r\n## $ year        \u0026lt;int\u0026gt; 1992, 1992, 1992, 1992, 1992, 1992, 1992, 1992, 19...\r\n## $ album       \u0026lt;chr\u0026gt; \u0026quot;Symbol\u0026quot;, \u0026quot;Symbol\u0026quot;, \u0026quot;Symbol\u0026quot;, \u0026quot;Symbol\u0026quot;, \u0026quot;Symbol\u0026quot;, ...\r\n## $ peak        \u0026lt;int\u0026gt; 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,...\r\n## $ us_pop      \u0026lt;chr\u0026gt; \u0026quot;7\u0026quot;, \u0026quot;7\u0026quot;, \u0026quot;7\u0026quot;, \u0026quot;7\u0026quot;, \u0026quot;7\u0026quot;, \u0026quot;7\u0026quot;, \u0026quot;7\u0026quot;, \u0026quot;7\u0026quot;, \u0026quot;7\u0026quot;, \u0026quot;7\u0026quot;, ...\r\n## $ us_rnb      \u0026lt;chr\u0026gt; \u0026quot;61\u0026quot;, \u0026quot;61\u0026quot;, \u0026quot;61\u0026quot;, \u0026quot;61\u0026quot;, \u0026quot;61\u0026quot;, \u0026quot;61\u0026quot;, \u0026quot;61\u0026quot;, \u0026quot;61\u0026quot;, \u0026quot;6...\r\n## $ decade      \u0026lt;chr\u0026gt; \u0026quot;1990s\u0026quot;, \u0026quot;1990s\u0026quot;, \u0026quot;1990s\u0026quot;, \u0026quot;1990s\u0026quot;, \u0026quot;1990s\u0026quot;, \u0026quot;1990...\r\n## $ chart_level \u0026lt;chr\u0026gt; \u0026quot;Top 10\u0026quot;, \u0026quot;Top 10\u0026quot;, \u0026quot;Top 10\u0026quot;, \u0026quot;Top 10\u0026quot;, \u0026quot;Top 10\u0026quot;, ...\r\n## $ charted     \u0026lt;chr\u0026gt; \u0026quot;Charted\u0026quot;, \u0026quot;Charted\u0026quot;, \u0026quot;Charted\u0026quot;, \u0026quot;Charted\u0026quot;, \u0026quot;Chart...\r\n## $ word        \u0026lt;chr\u0026gt; \u0026quot;watch\u0026quot;, \u0026quot;fall\u0026quot;, \u0026quot;stand\u0026quot;, \u0026quot;love\u0026quot;, \u0026quot;smoke\u0026quot;, \u0026quot;intell...\r\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eYour new dataset, \u003ccode\u003eprince_tidy\u003c/code\u003e, is now in a \u003cem\u003etokenized\u003c/em\u003e format with one word per row along with the song from which it came. You now have a data frame of 76116 words and 10 columns.\u003c/p\u003e\r\n\u003cp\u003e\u003ca id=\"descriptivestatistics\"\u003e\u003c/a\u003e\u003c/p\u003e\r\n\u003ch2 id=\"descriptive-statistics\"\u003eDescriptive Statistics\u003c/h2\u003e\r\n\u003cp\u003eIf you haven\u0026#39;t read \u003ca href=\"https://www.datacamp.com/community/tutorials/R-nlp-machine-learning\" target=\"_blank\"\u003ePart One\u003c/a\u003e, you may need to take a quick look at a few summary graphs of the full dataset. You\u0026#39;ll do this using creative graphs from the \u003ccode\u003eggplot2\u003c/code\u003e, \u003ccode\u003ecirclize\u003c/code\u003e, and \u003ccode\u003eyarrr\u003c/code\u003e packages.\u003c/p\u003e\r\n\u003ch3 id=\"shipshape-word-count-per-song\"\u003eShipshape: Word Count Per Song\u003c/h3\u003e\r\n\u003cp\u003eA pirate would say \u003cem\u003eshipshape\u003c/em\u003e when everything is in good order, tidy and clean. So here is an interesting view of the clean and tidy data showing the lexical \u003cem\u003ediversity\u003c/em\u003e, or, in other words, vocabulary, of the lyrics over time. A \u003cem\u003epirate plot\u003c/em\u003e is an advanced method of plotting a continuous dependent variable, such as the word count, as a function of a categorical independent variable, like decade. This combines raw data points, descriptive and inferential statistics into a single effective plot. Check out \u003ca href=\"https://www.r-bloggers.com/the-pirate-plot-an-r-pirates-favorite-plot/\" target=\"_blank\"\u003ethis great blog\u003c/a\u003e for more details about \u003ccode\u003epirateplot()\u003c/code\u003e from the \u003ccode\u003eyarrr\u003c/code\u003e package.\u003c/p\u003e\r\n\u003cp\u003eCreate the \u003ccode\u003eword_summary\u003c/code\u003e data frame that calculates the distinct word count per song. The more diverse the lyrics, the larger the vocabulary. Thinking about the data in this way gets you ready for \u003cem\u003eword level\u003c/em\u003e analysis. Reset the decade field to contain the value \u003ccode\u003e\u0026quot;NONE\u0026quot;\u003c/code\u003e for songs without a release date and relabel those fields with cleaner labels using \u003ccode\u003eselect()\u003c/code\u003e.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"lang-r\"\u003eword_summary \u0026lt;- prince_tidy %\u0026gt;%\r\n  mutate(decade = ifelse(is.na(decade),\u0026quot;NONE\u0026quot;, decade)) %\u0026gt;%\r\n  group_by(decade, song) %\u0026gt;%\r\n  mutate(word_count = n_distinct(word)) %\u0026gt;%\r\n  select(song, Released = decade, Charted = charted, word_count) %\u0026gt;%\r\n  distinct() %\u0026gt;% #To obtain one record per song\r\n  ungroup()\r\n\r\npirateplot(formula =  word_count ~ Released + Charted, #Formula\r\n   data = word_summary, #Data frame\r\n   xlab = NULL, ylab = \u0026quot;Song Distinct Word Count\u0026quot;, #Axis labels\r\n   main = \u0026quot;Lexical Diversity Per Decade\u0026quot;, #Plot title\r\n   pal = \u0026quot;google\u0026quot;, #Color scheme\r\n   point.o = .2, #Points\r\n   avg.line.o = 1, #Turn on the Average/Mean line\r\n   theme = 0, #Theme\r\n   point.pch = 16, #Point `pch` type\r\n   point.cex = 1.5, #Point size\r\n   jitter.val = .1, #Turn on jitter to see the songs better\r\n   cex.lab = .9, cex.names = .7) #Axis label size\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cimg src=\"http://res.cloudinary.com/dyd911kmh/image/upload/f_auto,q_auto:best/v1520597736/unnamed-chunk-5-1_w9siyy.png\"/\u003e\u003c/p\u003e\r\n\u003cp\u003eEvery colored circle in this pirate plot represents a song. The dense red area with the \u003ccode\u003e\u0026quot;NONE\u003c/code\u003e\u0026quot; value shows that a large number of songs in the dataset do not have a release date. There is a slight upward trend in the unique number of words per song in the early decades: the solid horizontal line shows the mean word count for that decade. This is important to know when you begin to analyze the sentiment over time. The words become more illuminating throughout Prince\u0026#39;s career.\u003c/p\u003e\r\n\u003cp\u003eI would challenge you to explore pirate plots in more detail as you\u0026#39;ve only touched the surface with this one!\u003c/p\u003e\r\n\u003ch3 id=\"all-year-round-song-count-per-year\"\u003eAll Year Round: Song Count Per Year\u003c/h3\u003e\r\n\u003cp\u003eCircular graphs are a unique way to visualize complicated (or simple!) relationships among several categories. (Plus, albums used to be round!). The graph below is simply a circular bar chart using \u003ccode\u003ecoord_polar()\u003c/code\u003e from \u003ccode\u003eggplot2\u003c/code\u003e that shows the relative number of songs per year. It\u0026#39;s a ton of code to produce such a simple graph, but it\u0026#39;s totally worth it. A similar example can be found in more detail in the R Graph Gallery \u003ca href=\"https://www.r-graph-gallery.com/296-add-labels-to-circular-barplot/\" target=\"_blank\"\u003ehere\u003c/a\u003e. As with pirate plots, this is only an introduction to what you can do with \u003ca href=\"http://circos.ca/images/samples/\" target=\"_blank\"\u003ecircular plots\u003c/a\u003e.\u003c/p\u003e\r\n\u003cp\u003e\u003ccenter\u003e\u003cb\u003eSong Count Per Year\u003c/b\u003e\u003c/center\u003e\r\n\u003cbr\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"lang-r\"\u003esongs_year \u0026lt;- prince_data %\u0026gt;%\r\n  select(song, year) %\u0026gt;%\r\n  group_by(year) %\u0026gt;%\r\n  summarise(song_count = n())\r\n\r\nid \u0026lt;- seq_len(nrow(songs_year))\r\nsongs_year \u0026lt;- cbind(songs_year, id)\r\nlabel_data = songs_year\r\nnumber_of_bar = nrow(label_data) #Calculate the ANGLE of the labels\r\nangle = 90 - 360 * (label_data$id - 0.5) / number_of_bar #Center things\r\nlabel_data$hjust \u0026lt;- ifelse(angle \u0026lt; -90, 1, 0) #Align label\r\nlabel_data$angle \u0026lt;- ifelse(angle \u0026lt; -90, angle + 180, angle) #Flip angle\r\nggplot(songs_year, aes(x = as.factor(id), y = song_count)) +\r\n  geom_bar(stat = \u0026quot;identity\u0026quot;, fill = alpha(\u0026quot;purple\u0026quot;, 0.7)) +\r\n  geom_text(data = label_data, aes(x = id, y = song_count + 10, label = year, hjust = hjust), color = \u0026quot;black\u0026quot;, alpha = 0.6, size = 3, angle =  label_data$angle, inherit.aes = FALSE ) +\r\n  coord_polar(start = 0) +\r\n  ylim(-20, 150) + #Size of the circle\r\n  theme_minimal() +\r\n  theme(axis.text = element_blank(),\r\n        axis.title = element_blank(),\r\n        panel.grid = element_blank(),\r\n        plot.margin = unit(rep(-4,4), \u0026quot;in\u0026quot;),\r\n        plot.title = element_text(margin = margin(t = 10, b = -10)))\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cimg src=\"http://res.cloudinary.com/dyd911kmh/image/upload/f_auto,q_auto:best/v1520597737/unnamed-chunk-6-1_o9efzl.png\"/\u003e\r\n\u003cbr\u003e\u003c/p\u003e\r\n\u003cp\u003eSee the gap at the very top? This is an indicator of the hundreds of songs without release dates you identified in the pirate plot. With such a large number of unreleased songs, the chart would not be useful if they were included. The missing years indicate those where no songs were released. The most prolific years were 1996 and 1998.\u003c/p\u003e\r\n\u003cp\u003eDo you want to know why? Keep reading!\u003c/p\u003e\r\n\u003ch3 id=\"chords-charted-songs-by-decade\"\u003eChords: Charted Songs By Decade\u003c/h3\u003e\r\n\u003cp\u003eThe following graph shows the relationship between the decade a song was released and whether or not it hit the Billboard charts. Using a \u003ccode\u003echordDiagram()\u003c/code\u003e for musical analysis just seemed appropriate! This graphical tool is from the beautiful \u003ca href=\"https://cran.r-project.org/web/packages/circlize/circlize.pdf\" target=\"_blank\"\u003e\u003ccode\u003ecirclize\u003c/code\u003e\u003c/a\u003e package by Zuguang Gu. The graph is split into two categories: charted (top), and decade (bottom). The two categories are separated by wide gaps, with smaller gaps between the values. The high-level comments in the code below can be supplemented with more detail \u003ca href=\"https://www.r-graph-gallery.com/chord-diagram/\" target=\"_blank\"\u003ehere\u003c/a\u003e.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"lang-r\"\u003edecade_chart \u0026lt;-  prince_data %\u0026gt;%\r\n  filter(decade != \u0026quot;NA\u0026quot;) %\u0026gt;% #Remove songs without release dates\r\n  count(decade, charted)  #Get SONG count per chart level per decade. Order determines top or bottom.\r\n\r\ncircos.clear() #Very important - Reset the circular layout parameters!\r\ngrid.col = c(\u0026quot;1970s\u0026quot; = my_colors[1], \u0026quot;1980s\u0026quot; = my_colors[2], \u0026quot;1990s\u0026quot; = my_colors[3], \u0026quot;2000s\u0026quot; = my_colors[4], \u0026quot;2010s\u0026quot; = my_colors[5], \u0026quot;Charted\u0026quot; = \u0026quot;grey\u0026quot;, \u0026quot;Uncharted\u0026quot; = \u0026quot;grey\u0026quot;) #assign chord colors\r\n# Set the global parameters for the circular layout. Specifically the gap size\r\ncircos.par(gap.after = c(rep(5, length(unique(decade_chart[[1]])) - 1), 15,\r\n                         rep(5, length(unique(decade_chart[[2]])) - 1), 15))\r\n\r\nchordDiagram(decade_chart, grid.col = grid.col, transparency = .2)\r\ntitle(\u0026quot;Relationship Between Chart and Decade\u0026quot;)\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cimg src=\"http://res.cloudinary.com/dyd911kmh/image/upload/f_auto,q_auto:best/v1520597737/unnamed-chunk-7-1_djmg1v.png\"/\u003e\u003c/p\u003e\r\n\u003cp\u003eThe above circle graph may seem complex at first glance, but it nicely illustrates the counts of songs per decade, per chart level. You can see that Prince began his career in the 1970s with only a few releases, some of which charted. If you compare the 1980s to the 1990s, you\u0026#39;ll find that more songs were released in the 1990s, but more songs charted in the 1980s. There were only a few commercially successful songs in the 2000s and in the 2010s there were no hit songs.\u003c/p\u003e\r\n\u003cp\u003e\u003ca id=\"lexiconsandlyrics\"\u003e\u003c/a\u003e\u003c/p\u003e\r\n\u003ch2 id=\"lexicons-and-lyrics\"\u003eLexicons and Lyrics\u003c/h2\u003e\r\n\u003cp\u003eIn this section you will:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eExplore the sentiment lexicons and their word counts\u003c/li\u003e\r\n\u003cli\u003eIdentify how many words from the lyrics exist in the lexicons\u003c/li\u003e\r\n\u003cli\u003eLook at specific words and word forms\u003c/li\u003e\r\n\u003cli\u003eConsider additional data conditioning\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003e\u003ca id=\"explore\"\u003e\u003c/a\u003e\u003c/p\u003e\r\n\u003ch3 id=\"explore-sentiment-lexicons\"\u003eExplore Sentiment Lexicons\u003c/h3\u003e\r\n\u003cp\u003eThe \u003ccode\u003etidytext\u003c/code\u003e package includes a dataset called \u003ccode\u003esentiments\u003c/code\u003e which provides several distinct lexicons. These lexicons are dictionaries of words with an assigned sentiment category or value. \u003ccode\u003etidytext\u003c/code\u003e provides three general purpose lexicons:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\u003cstrong\u003eAFINN:\u003c/strong\u003e assigns words with a score that runs between -5 and 5, with negative scores indicating negative sentiment and positive scores indicating positive sentiment\u003c/li\u003e\r\n\u003cli\u003e\u003cstrong\u003eBing:\u003c/strong\u003e assigns words into positive and negative categories\u003c/li\u003e\r\n\u003cli\u003e\u003cstrong\u003eNRC:\u003c/strong\u003e assigns words into one or more of the following ten categories: positive, negative, anger, anticipation, disgust, fear, joy, sadness, surprise, and trust\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eIn order to examine the lexicons, create a data frame called \u003ccode\u003enew_sentiments\u003c/code\u003e. Filter out a financial lexicon, create a binary (also described as \u003cem\u003epolar\u003c/em\u003e) sentiment field for the AFINN lexicon by converting the numerical score to \u003cem\u003epositive\u003c/em\u003e or \u003cem\u003enegative\u003c/em\u003e, and add a field that holds the distinct word count for each lexicon.\u003c/p\u003e\r\n\u003cp\u003e\u003ccode\u003enew_sentiments\u003c/code\u003e has one column with the different sentiment categories, so for a better view of the word counts per lexicon, per category, use \u003ccode\u003espread()\u003c/code\u003e from \u003ccode\u003etidyr\u003c/code\u003e to pivot those categories into separate fields. Take advantage of the \u003ccode\u003eknitr\u003c/code\u003e and \u003ccode\u003ekableExtra\u003c/code\u003e packages in the \u003ccode\u003emy_kable_styling()\u003c/code\u003e function you created earlier. Add color to your chart using \u003ccode\u003ecolor_tile()\u003c/code\u003e and \u003ccode\u003ecolor_bar()\u003c/code\u003e from \u003ccode\u003eformattable\u003c/code\u003e to create a nicely \u003ca href=\"https://cran.r-project.org/web/packages/formattable/vignettes/formattable-data-frame.html\" target=\"_blank\"\u003eformatted table\u003c/a\u003e. Print your table and examine the differences between each lexicon.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"lang-r\"\u003enew_sentiments \u0026lt;- sentiments %\u0026gt;% #From the tidytext package\r\n  filter(lexicon != \u0026quot;loughran\u0026quot;) %\u0026gt;% #Remove the finance lexicon\r\n  mutate( sentiment = ifelse(lexicon == \u0026quot;AFINN\u0026quot; \u0026amp; score \u0026gt;= 0, \u0026quot;positive\u0026quot;,\r\n                              ifelse(lexicon == \u0026quot;AFINN\u0026quot; \u0026amp; score \u0026lt; 0,\r\n                                     \u0026quot;negative\u0026quot;, sentiment))) %\u0026gt;%\r\n  group_by(lexicon) %\u0026gt;%\r\n  mutate(words_in_lexicon = n_distinct(word)) %\u0026gt;%\r\n  ungroup()\r\n\r\nnew_sentiments %\u0026gt;%\r\n  group_by(lexicon, sentiment, words_in_lexicon) %\u0026gt;%\r\n  summarise(distinct_words = n_distinct(word)) %\u0026gt;%\r\n  ungroup() %\u0026gt;%\r\n  spread(sentiment, distinct_words) %\u0026gt;%\r\n  mutate(lexicon = color_tile(\u0026quot;lightblue\u0026quot;, \u0026quot;lightblue\u0026quot;)(lexicon),\r\n         words_in_lexicon = color_bar(\u0026quot;lightpink\u0026quot;)(words_in_lexicon)) %\u0026gt;%\r\n  my_kable_styling(caption = \u0026quot;Word Counts Per Lexicon\u0026quot;)\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cdiv class=\"output_wrapper\"\u003e\r\n\u003ctable class=\"table table-striped table-condensed table-bordered\" style=\"width: auto !important; margin-left: auto; margin-right: auto;\"\u003e\r\n\u003ccaption\u003eWord Counts Per Lexicon\u003c/caption\u003e\r\n \u003cthead\u003e\r\n  \u003ctr\u003e\r\n   \u003cth style=\"text-align:left;\"\u003e lexicon \u003c/th\u003e\r\n   \u003cth style=\"text-align:left;\"\u003e words_in_lexicon \u003c/th\u003e\r\n   \u003cth style=\"text-align:right;\"\u003e anger \u003c/th\u003e\r\n   \u003cth style=\"text-align:right;\"\u003e anticipation \u003c/th\u003e\r\n   \u003cth style=\"text-align:right;\"\u003e disgust \u003c/th\u003e\r\n   \u003cth style=\"text-align:right;\"\u003e fear \u003c/th\u003e\r\n   \u003cth style=\"text-align:right;\"\u003e joy \u003c/th\u003e\r\n   \u003cth style=\"text-align:right;\"\u003e negative \u003c/th\u003e\r\n   \u003cth style=\"text-align:right;\"\u003e positive \u003c/th\u003e\r\n   \u003cth style=\"text-align:right;\"\u003e sadness \u003c/th\u003e\r\n   \u003cth style=\"text-align:right;\"\u003e surprise \u003c/th\u003e\r\n   \u003cth style=\"text-align:right;\"\u003e trust \u003c/th\u003e\r\n  \u003c/tr\u003e\r\n \u003c/thead\u003e\r\n\u003ctbody\u003e\r\n  \u003ctr\u003e\r\n   \u003ctd style=\"text-align:left;\"\u003e \u003cspan style=\"display: block; padding: 0 4px; border-radius: 4px; background-color: #add8e6\"\u003eAFINN\u003c/span\u003e \u003c/td\u003e\r\n   \u003ctd style=\"text-align:left;\"\u003e \u003cspan style=\"display: inline-block; direction: rtl; border-radius: 4px; padding-right: 2px; background-color: lightpink; width: 36.49%\"\u003e2476\u003c/span\u003e \u003c/td\u003e\r\n   \u003ctd style=\"text-align:right;\"\u003e NA \u003c/td\u003e\r\n   \u003ctd style=\"text-align:right;\"\u003e NA \u003c/td\u003e\r\n   \u003ctd style=\"text-align:right;\"\u003e NA \u003c/td\u003e\r\n   \u003ctd style=\"text-align:right;\"\u003e NA \u003c/td\u003e\r\n   \u003ctd style=\"text-align:right;\"\u003e NA \u003c/td\u003e\r\n   \u003ctd style=\"text-align:right;\"\u003e 1597 \u003c/td\u003e\r\n   \u003ctd style=\"text-align:right;\"\u003e 879 \u003c/td\u003e\r\n   \u003ctd style=\"text-align:right;\"\u003e NA \u003c/td\u003e\r\n   \u003ctd style=\"text-align:right;\"\u003e NA \u003c/td\u003e\r\n   \u003ctd style=\"text-align:right;\"\u003e NA \u003c/td\u003e\r\n  \u003c/tr\u003e\r\n  \u003ctr\u003e\r\n   \u003ctd style=\"text-align:left;\"\u003e \u003cspan style=\"display: block; padding: 0 4px; border-radius: 4px; background-color: #add8e6\"\u003ebing \u003c/span\u003e \u003c/td\u003e\r\n   \u003ctd style=\"text-align:left;\"\u003e \u003cspan style=\"display: inline-block; direction: rtl; border-radius: 4px; padding-right: 2px; background-color: lightpink; width: 100.00%\"\u003e6785\u003c/span\u003e \u003c/td\u003e\r\n   \u003ctd style=\"text-align:right;\"\u003e NA \u003c/td\u003e\r\n   \u003ctd style=\"text-align:right;\"\u003e NA \u003c/td\u003e\r\n   \u003ctd style=\"text-align:right;\"\u003e NA \u003c/td\u003e\r\n   \u003ctd style=\"text-align:right;\"\u003e NA \u003c/td\u003e\r\n   \u003ctd style=\"text-align:right;\"\u003e NA \u003c/td\u003e\r\n   \u003ctd style=\"text-align:right;\"\u003e 4782 \u003c/td\u003e\r\n   \u003ctd style=\"text-align:right;\"\u003e 2006 \u003c/td\u003e\r\n   \u003ctd style=\"text-align:right;\"\u003e NA \u003c/td\u003e\r\n   \u003ctd style=\"text-align:right;\"\u003e NA \u003c/td\u003e\r\n   \u003ctd style=\"text-align:right;\"\u003e NA \u003c/td\u003e\r\n  \u003c/tr\u003e\r\n  \u003ctr\u003e\r\n   \u003ctd style=\"text-align:left;\"\u003e \u003cspan style=\"display: block; padding: 0 4px; border-radius: 4px; background-color: #add8e6\"\u003enrc  \u003c/span\u003e \u003c/td\u003e\r\n   \u003ctd style=\"text-align:left;\"\u003e \u003cspan style=\"display: inline-block; direction: rtl; border-radius: 4px; padding-right: 2px; background-color: lightpink; width: 95.33%\"\u003e6468\u003c/span\u003e \u003c/td\u003e\r\n   \u003ctd style=\"text-align:right;\"\u003e 1247 \u003c/td\u003e\r\n   \u003ctd style=\"text-align:right;\"\u003e 839 \u003c/td\u003e\r\n   \u003ctd style=\"text-align:right;\"\u003e 1058 \u003c/td\u003e\r\n   \u003ctd style=\"text-align:right;\"\u003e 1476 \u003c/td\u003e\r\n   \u003ctd style=\"text-align:right;\"\u003e 689 \u003c/td\u003e\r\n   \u003ctd style=\"text-align:right;\"\u003e 3324 \u003c/td\u003e\r\n   \u003ctd style=\"text-align:right;\"\u003e 2312 \u003c/td\u003e\r\n   \u003ctd style=\"text-align:right;\"\u003e 1191 \u003c/td\u003e\r\n   \u003ctd style=\"text-align:right;\"\u003e 534 \u003c/td\u003e\r\n   \u003ctd style=\"text-align:right;\"\u003e 1231 \u003c/td\u003e\r\n  \u003c/tr\u003e\r\n\u003c/tbody\u003e\r\n\u003c/table\u003e\r\n\u003c/div\u003e\r\n\r\n\u003cp\u003eThe table above gives you an idea of the size and structure of each lexicon.\u003c/p\u003e\r\n\u003ch3 id=\"match-dot-common\"\u003eMatch Dot Common\u003c/h3\u003e\r\n\u003cp\u003eIn order to determine which lexicon is more applicable to the lyrics, you\u0026#39;ll want to look at the match ratio of words that are common to both the lexicon and the lyrics. As a reminder, there are 76116 total words and 7851 distinct words in \u003ccode\u003eprince_tidy\u003c/code\u003e.\u003c/p\u003e\r\n\u003cp\u003eSo how many of those words are actually in the lexicons?\u003c/p\u003e\r\n\u003cp\u003eUse an \u003ccode\u003einner_join()\u003c/code\u003e between \u003ccode\u003eprince_tidy\u003c/code\u003e and \u003ccode\u003enew_sentiments\u003c/code\u003e and then group by lexicon. The NRC lexicon has 10 different categories, and a word may appear in more than one category: that is, words can be negative and sad. That means that you\u0026#39;ll want to use \u003ccode\u003en_distinct()\u003c/code\u003e in \u003ccode\u003esummarise()\u003c/code\u003e to get the distinct word count per lexicon.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"lang-r\"\u003eprince_tidy %\u0026gt;%\r\n  mutate(words_in_lyrics = n_distinct(word)) %\u0026gt;%\r\n  inner_join(new_sentiments) %\u0026gt;%\r\n  group_by(lexicon, words_in_lyrics, words_in_lexicon) %\u0026gt;%\r\n  summarise(lex_match_words = n_distinct(word)) %\u0026gt;%\r\n  ungroup() %\u0026gt;%\r\n  mutate(total_match_words = sum(lex_match_words), #Not used but good to have\r\n         match_ratio = lex_match_words / words_in_lyrics) %\u0026gt;%\r\n  select(lexicon, lex_match_words,  words_in_lyrics, match_ratio) %\u0026gt;%\r\n  mutate(lex_match_words = color_bar(\u0026quot;lightpink\u0026quot;)(lex_match_words),\r\n         lexicon = color_tile(\u0026quot;lightgreen\u0026quot;, \u0026quot;lightgreen\u0026quot;)(lexicon)) %\u0026gt;%\r\n  my_kable_styling(caption = \u0026quot;Lyrics Found In Lexicons\u0026quot;)\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cdiv class=\"output_wrapper\"\u003e\r\n\u003ctable class=\"table table-striped table-condensed table-bordered\" style=\"width: auto !important; margin-left: auto; margin-right: auto;\"\u003e\r\n\u003ccaption\u003eLyrics Found In Lexicons\u003c/caption\u003e\r\n \u003cthead\u003e\r\n  \u003ctr\u003e\r\n   \u003cth style=\"text-align:left;\"\u003e lexicon \u003c/th\u003e\r\n   \u003cth style=\"text-align:left;\"\u003e lex_match_words \u003c/th\u003e\r\n   \u003cth style=\"text-align:right;\"\u003e words_in_lyrics \u003c/th\u003e\r\n   \u003cth style=\"text-align:right;\"\u003e match_ratio \u003c/th\u003e\r\n  \u003c/tr\u003e\r\n \u003c/thead\u003e\r\n\u003ctbody\u003e\r\n  \u003ctr\u003e\r\n   \u003ctd style=\"text-align:left;\"\u003e \u003cspan style=\"display: block; padding: 0 4px; border-radius: 4px; background-color: #90ee90\"\u003eAFINN\u003c/span\u003e \u003c/td\u003e\r\n   \u003ctd style=\"text-align:left;\"\u003e \u003cspan style=\"display: inline-block; direction: rtl; border-radius: 4px; padding-right: 2px; background-color: lightpink; width: 45.89%\"\u003e770\u003c/span\u003e \u003c/td\u003e\r\n   \u003ctd style=\"text-align:right;\"\u003e 7851 \u003c/td\u003e\r\n   \u003ctd style=\"text-align:right;\"\u003e 0.0980767 \u003c/td\u003e\r\n  \u003c/tr\u003e\r\n  \u003ctr\u003e\r\n   \u003ctd style=\"text-align:left;\"\u003e \u003cspan style=\"display: block; padding: 0 4px; border-radius: 4px; background-color: #90ee90\"\u003ebing \u003c/span\u003e \u003c/td\u003e\r\n   \u003ctd style=\"text-align:left;\"\u003e \u003cspan style=\"display: inline-block; direction: rtl; border-radius: 4px; padding-right: 2px; background-color: lightpink; width: 70.62%\"\u003e1185\u003c/span\u003e \u003c/td\u003e\r\n   \u003ctd style=\"text-align:right;\"\u003e 7851 \u003c/td\u003e\r\n   \u003ctd style=\"text-align:right;\"\u003e 0.1509362 \u003c/td\u003e\r\n  \u003c/tr\u003e\r\n  \u003ctr\u003e\r\n   \u003ctd style=\"text-align:left;\"\u003e \u003cspan style=\"display: block; padding: 0 4px; border-radius: 4px; background-color: #90ee90\"\u003enrc  \u003c/span\u003e \u003c/td\u003e\r\n   \u003ctd style=\"text-align:left;\"\u003e \u003cspan style=\"display: inline-block; direction: rtl; border-radius: 4px; padding-right: 2px; background-color: lightpink; width: 100.00%\"\u003e1678\u003c/span\u003e \u003c/td\u003e\r\n   \u003ctd style=\"text-align:right;\"\u003e 7851 \u003c/td\u003e\r\n   \u003ctd style=\"text-align:right;\"\u003e 0.2137307 \u003c/td\u003e\r\n  \u003c/tr\u003e\r\n\u003c/tbody\u003e\r\n\u003c/table\u003e\r\n\u003c/div\u003e\r\n\r\n\u003cp\u003eThe NRC lexicon has more of the distinct words from the lyrics than AFINN or Bing. Notice the sum of the match ratios is low. No lexicon could have all words, nor should they. Many words are considered neutral and would not have an associated sentiment. For example, \u003cem\u003e2000\u003c/em\u003e is typically a neutral word, and therefore does not exist in the lexicons. However, if you remember, people predicted planes would fall out of the sky and computers would just stop working during that year. So there is an associated fear that exists in the song but is not captured in sentiment analysis using typical lexicons.\u003c/p\u003e\r\n\u003cp\u003eHere are a few reasons that a word may not appear in a lexicon:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eNot every word has a sentiment.  \u003c/li\u003e\r\n\u003cli\u003eThe lexicons were created for other types of text, so not for lyrics.\u003c/li\u003e\r\n\u003cli\u003eThe actual \u003cem\u003eform\u003c/em\u003e of the word may not appear. For example, \u003cstrong\u003estrong\u003c/strong\u003e may appear, but \u003cstrong\u003estrongly\u003c/strong\u003e may not. There could be more cleaning needed on the data! (This is touched on in a later section.)\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3 id=\"don-t-take-my-word-for-it\"\u003eDon\u0026#39;t Take My Word For It\u003c/h3\u003e\r\n\u003cp\u003eTake a look at some specific words from Prince\u0026#39;s lyrics which seem like they would have an impact on sentiment. Are they in all lexicons?\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"lang-r\"\u003enew_sentiments %\u0026gt;%\r\n  filter(word %in% c(\u0026quot;dark\u0026quot;, \u0026quot;controversy\u0026quot;, \u0026quot;gangster\u0026quot;,\r\n                     \u0026quot;discouraged\u0026quot;, \u0026quot;race\u0026quot;)) %\u0026gt;%\r\n  arrange(word) %\u0026gt;% #sort\r\n  select(-score) %\u0026gt;% #remove this field\r\n  mutate(word = color_tile(\u0026quot;lightblue\u0026quot;, \u0026quot;lightblue\u0026quot;)(word),\r\n         words_in_lexicon = color_bar(\u0026quot;lightpink\u0026quot;)(words_in_lexicon),\r\n         lexicon = color_tile(\u0026quot;lightgreen\u0026quot;, \u0026quot;lightgreen\u0026quot;)(lexicon)) %\u0026gt;%\r\n  my_kable_styling(caption = \u0026quot;Specific Words\u0026quot;)\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cdiv class=\"output_wrapper\"\u003e\r\n\u003ctable class=\"table table-striped table-condensed table-bordered\" style=\"width: auto !important; margin-left: auto; margin-right: auto;\"\u003e\r\n\u003ccaption\u003eSpecific Words\u003c/caption\u003e\r\n \u003cthead\u003e\r\n  \u003ctr\u003e\r\n   \u003cth style=\"text-align:left;\"\u003e word \u003c/th\u003e\r\n   \u003cth style=\"text-align:left;\"\u003e sentiment \u003c/th\u003e\r\n   \u003cth style=\"text-align:left;\"\u003e lexicon \u003c/th\u003e\r\n   \u003cth style=\"text-align:left;\"\u003e words_in_lexicon \u003c/th\u003e\r\n  \u003c/tr\u003e\r\n \u003c/thead\u003e\r\n\u003ctbody\u003e\r\n  \u003ctr\u003e\r\n   \u003ctd style=\"text-align:left;\"\u003e \u003cspan style=\"display: block; padding: 0 4px; border-radius: 4px; background-color: #add8e6\"\u003econtroversy\u003c/span\u003e \u003c/td\u003e\r\n   \u003ctd style=\"text-align:left;\"\u003e negative \u003c/td\u003e\r\n   \u003ctd style=\"text-align:left;\"\u003e \u003cspan style=\"display: block; padding: 0 4px; border-radius: 4px; background-color: #90ee90\"\u003enrc  \u003c/span\u003e \u003c/td\u003e\r\n   \u003ctd style=\"text-align:left;\"\u003e \u003cspan style=\"display: inline-block; direction: rtl; border-radius: 4px; padding-right: 2px; background-color: lightpink; width: 95.33%\"\u003e6468\u003c/span\u003e \u003c/td\u003e\r\n  \u003c/tr\u003e\r\n  \u003ctr\u003e\r\n   \u003ctd style=\"text-align:left;\"\u003e \u003cspan style=\"display: block; padding: 0 4px; border-radius: 4px; background-color: #add8e6\"\u003econtroversy\u003c/span\u003e \u003c/td\u003e\r\n   \u003ctd style=\"text-align:left;\"\u003e negative \u003c/td\u003e\r\n   \u003ctd style=\"text-align:left;\"\u003e \u003cspan style=\"display: block; padding: 0 4px; border-radius: 4px; background-color: #90ee90\"\u003ebing \u003c/span\u003e \u003c/td\u003e\r\n   \u003ctd style=\"text-align:left;\"\u003e \u003cspan style=\"display: inline-block; direction: rtl; border-radius: 4px; padding-right: 2px; background-color: lightpink; width: 100.00%\"\u003e6785\u003c/span\u003e \u003c/td\u003e\r\n  \u003c/tr\u003e\r\n  \u003ctr\u003e\r\n   \u003ctd style=\"text-align:left;\"\u003e \u003cspan style=\"display: block; padding: 0 4px; border-radius: 4px; background-color: #add8e6\"\u003edark       \u003c/span\u003e \u003c/td\u003e\r\n   \u003ctd style=\"text-align:left;\"\u003e sadness \u003c/td\u003e\r\n   \u003ctd style=\"text-align:left;\"\u003e \u003cspan style=\"display: block; padding: 0 4px; border-radius: 4px; background-color: #90ee90\"\u003enrc  \u003c/span\u003e \u003c/td\u003e\r\n   \u003ctd style=\"text-align:left;\"\u003e \u003cspan style=\"display: inline-block; direction: rtl; border-radius: 4px; padding-right: 2px; background-color: lightpink; width: 95.33%\"\u003e6468\u003c/span\u003e \u003c/td\u003e\r\n  \u003c/tr\u003e\r\n  \u003ctr\u003e\r\n   \u003ctd style=\"text-align:left;\"\u003e \u003cspan style=\"display: block; padding: 0 4px; border-radius: 4px; background-color: #add8e6\"\u003edark       \u003c/span\u003e \u003c/td\u003e\r\n   \u003ctd style=\"text-align:left;\"\u003e negative \u003c/td\u003e\r\n   \u003ctd style=\"text-align:left;\"\u003e \u003cspan style=\"display: block; padding: 0 4px; border-radius: 4px; background-color: #90ee90\"\u003ebing \u003c/span\u003e \u003c/td\u003e\r\n   \u003ctd style=\"text-align:left;\"\u003e \u003cspan style=\"display: inline-block; direction: rtl; border-radius: 4px; padding-right: 2px; background-color: lightpink; width: 100.00%\"\u003e6785\u003c/span\u003e \u003c/td\u003e\r\n  \u003c/tr\u003e\r\n  \u003ctr\u003e\r\n   \u003ctd style=\"text-align:left;\"\u003e \u003cspan style=\"display: block; padding: 0 4px; border-radius: 4px; background-color: #add8e6\"\u003ediscouraged\u003c/span\u003e \u003c/td\u003e\r\n   \u003ctd style=\"text-align:left;\"\u003e negative \u003c/td\u003e\r\n   \u003ctd style=\"text-align:left;\"\u003e \u003cspan style=\"display: block; padding: 0 4px; border-radius: 4px; background-color: #90ee90\"\u003eAFINN\u003c/span\u003e \u003c/td\u003e\r\n   \u003ctd style=\"text-align:left;\"\u003e \u003cspan style=\"display: inline-block; direction: rtl; border-radius: 4px; padding-right: 2px; background-color: lightpink; width: 36.49%\"\u003e2476\u003c/span\u003e \u003c/td\u003e\r\n  \u003c/tr\u003e\r\n  \u003ctr\u003e\r\n   \u003ctd style=\"text-align:left;\"\u003e \u003cspan style=\"display: block; padding: 0 4px; border-radius: 4px; background-color: #add8e6\"\u003egangster   \u003c/span\u003e \u003c/td\u003e\r\n   \u003ctd style=\"text-align:left;\"\u003e negative \u003c/td\u003e\r\n   \u003ctd style=\"text-align:left;\"\u003e \u003cspan style=\"display: block; padding: 0 4px; border-radius: 4px; background-color: #90ee90\"\u003ebing \u003c/span\u003e \u003c/td\u003e\r\n   \u003ctd style=\"text-align:left;\"\u003e \u003cspan style=\"display: inline-block; direction: rtl; border-radius: 4px; padding-right: 2px; background-color: lightpink; width: 100.00%\"\u003e6785\u003c/span\u003e \u003c/td\u003e\r\n  \u003c/tr\u003e\r\n\u003c/tbody\u003e\r\n\u003c/table\u003e\r\n\u003c/div\u003e\r\n\r\n\u003cp\u003e\u003cem\u003eControversy\u003c/em\u003e and \u003cem\u003edark\u003c/em\u003e appear in NRC and Bing, but \u003cem\u003egangster\u003c/em\u003e only appears in Bing. \u003cem\u003eRace\u003c/em\u003e doesn\u0026#39;t appear at all and is a critical topic in Prince\u0026#39;s lyrics. But is it easily associated with a sentiment? Note that AFINN is much smaller and only has one of these words.\u003c/p\u003e\r\n\u003ch3 id=\"word-forms\"\u003eWord Forms\u003c/h3\u003e\r\n\u003cp\u003eNow look at a more complicated example. Sexuality is a common theme in Prince\u0026#39;s music. How will sentiment analysis based on predefined lexicons be affected by different forms of a word? For example, here are all the references to the root word \u003cem\u003esex\u003c/em\u003e in the lyrics. Compare these to Bing and NRC and see where there are matches.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"lang-r\"\u003emy_word_list \u0026lt;- prince_data %\u0026gt;%\r\n  unnest_tokens(word, lyrics) %\u0026gt;%\r\n  filter(grepl(\u0026quot;sex\u0026quot;, word)) %\u0026gt;% #Use `grepl()` to find the substring `\u0026quot;sex\u0026quot;`\r\n  count(word) %\u0026gt;%\r\n  select(myword = word, n) %\u0026gt;% #Rename word\r\n  arrange(desc(n))\r\n\r\nnew_sentiments %\u0026gt;%\r\n  #Right join gets all words in `my_word_list` to show nulls\r\n  right_join(my_word_list, by = c(\u0026quot;word\u0026quot; = \u0026quot;myword\u0026quot;)) %\u0026gt;%\r\n  filter(word %in% my_word_list$myword) %\u0026gt;%\r\n  mutate(word = color_tile(\u0026quot;lightblue\u0026quot;, \u0026quot;lightblue\u0026quot;)(word),\r\n          instances = color_tile(\u0026quot;lightpink\u0026quot;, \u0026quot;lightpink\u0026quot;)(n),\r\n          lexicon = color_tile(\u0026quot;lightgreen\u0026quot;, \u0026quot;lightgreen\u0026quot;)(lexicon)) %\u0026gt;%\r\n  select(-score, -n) %\u0026gt;% #Remove these fields\r\n  my_kable_styling(caption = \u0026quot;Dependency on Word Form\u0026quot;)\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cdiv class=\"output_wrapper\"\u003e\r\n\u003ctable class=\"table table-striped table-condensed table-bordered\" style=\"width: auto !important; margin-left: auto; margin-right: auto;\"\u003e\r\n\u003ccaption\u003eDependency on Word Form\u003c/caption\u003e\r\n \u003cthead\u003e\r\n  \u003ctr\u003e\r\n   \u003cth style=\"text-align:left;\"\u003e word \u003c/th\u003e\r\n   \u003cth style=\"text-align:left;\"\u003e sentiment \u003c/th\u003e\r\n   \u003cth style=\"text-align:left;\"\u003e lexicon \u003c/th\u003e\r\n   \u003cth style=\"text-align:right;\"\u003e words_in_lexicon \u003c/th\u003e\r\n   \u003cth style=\"text-align:left;\"\u003e instances \u003c/th\u003e\r\n  \u003c/tr\u003e\r\n \u003c/thead\u003e\r\n\u003ctbody\u003e\r\n  \u003ctr\u003e\r\n   \u003ctd style=\"text-align:left;\"\u003e \u003cspan style=\"display: block; padding: 0 4px; border-radius: 4px; background-color: #add8e6\"\u003esexy                    \u003c/span\u003e \u003c/td\u003e\r\n   \u003ctd style=\"text-align:left;\"\u003e positive \u003c/td\u003e\r\n   \u003ctd style=\"text-align:left;\"\u003e \u003cspan style=\"display: block; padding: 0 4px; border-radius: 4px; background-color: #90ee90\"\u003ebing \u003c/span\u003e \u003c/td\u003e\r\n   \u003ctd style=\"text-align:right;\"\u003e 6785 \u003c/td\u003e\r\n   \u003ctd style=\"text-align:left;\"\u003e \u003cspan style=\"display: block; padding: 0 4px; border-radius: 4px; background-color: #ffb6c1\"\u003e220\u003c/span\u003e \u003c/td\u003e\r\n  \u003c/tr\u003e\r\n  \u003ctr\u003e\r\n   \u003ctd style=\"text-align:left;\"\u003e \u003cspan style=\"display: block; padding: 0 4px; border-radius: 4px; background-color: #add8e6\"\u003esexy                    \u003c/span\u003e \u003c/td\u003e\r\n   \u003ctd style=\"text-align:left;\"\u003e positive \u003c/td\u003e\r\n   \u003ctd style=\"text-align:left;\"\u003e \u003cspan style=\"display: block; padding: 0 4px; border-radius: 4px; background-color: #90ee90\"\u003eAFINN\u003c/span\u003e \u003c/td\u003e\r\n   \u003ctd style=\"text-align:right;\"\u003e 2476 \u003c/td\u003e\r\n   \u003ctd style=\"text-align:left;\"\u003e \u003cspan style=\"display: block; padding: 0 4px; border-radius: 4px; background-color: #ffb6c1\"\u003e220\u003c/span\u003e \u003c/td\u003e\r\n  \u003c/tr\u003e\r\n  \u003ctr\u003e\r\n   \u003ctd style=\"text-align:left;\"\u003e \u003cspan style=\"display: block; padding: 0 4px; border-radius: 4px; background-color: #add8e6\"\u003esex                     \u003c/span\u003e \u003c/td\u003e\r\n   \u003ctd style=\"text-align:left;\"\u003e anticipation \u003c/td\u003e\r\n   \u003ctd style=\"text-align:left;\"\u003e \u003cspan style=\"display: block; padding: 0 4px; border-radius: 4px; background-color: #90ee90\"\u003enrc  \u003c/span\u003e \u003c/td\u003e\r\n   \u003ctd style=\"text-align:right;\"\u003e 6468 \u003c/td\u003e\r\n   \u003ctd style=\"text-align:left;\"\u003e \u003cspan style=\"display: block; padding: 0 4px; border-radius: 4px; background-color: #ffb6c1\"\u003e185\u003c/span\u003e \u003c/td\u003e\r\n  \u003c/tr\u003e\r\n  \u003ctr\u003e\r\n   \u003ctd style=\"text-align:left;\"\u003e \u003cspan style=\"display: block; padding: 0 4px; border-radius: 4px; background-color: #add8e6\"\u003esex                     \u003c/span\u003e \u003c/td\u003e\r\n   \u003ctd style=\"text-align:left;\"\u003e joy \u003c/td\u003e\r\n   \u003ctd style=\"text-align:left;\"\u003e \u003cspan style=\"display: block; padding: 0 4px; border-radius: 4px; background-color: #90ee90\"\u003enrc  \u003c/span\u003e \u003c/td\u003e\r\n   \u003ctd style=\"text-align:right;\"\u003e 6468 \u003c/td\u003e\r\n   \u003ctd style=\"text-align:left;\"\u003e \u003cspan style=\"display: block; padding: 0 4px; border-radius: 4px; background-color: #ffb6c1\"\u003e185\u003c/span\u003e \u003c/td\u003e\r\n  \u003c/tr\u003e\r\n  \u003ctr\u003e\r\n   \u003ctd style=\"text-align:left;\"\u003e \u003cspan style=\"display: block; padding: 0 4px; border-radius: 4px; background-color: #add8e6\"\u003esex                     \u003c/span\u003e \u003c/td\u003e\r\n   \u003ctd style=\"text-align:left;\"\u003e positive \u003c/td\u003e\r\n   \u003ctd style=\"text-align:left;\"\u003e \u003cspan style=\"display: block; padding: 0 4px; border-radius: 4px; background-color: #90ee90\"\u003enrc  \u003c/span\u003e \u003c/td\u003e\r\n   \u003ctd style=\"text-align:right;\"\u003e 6468 \u003c/td\u003e\r\n   \u003ctd style=\"text-align:left;\"\u003e \u003cspan style=\"display: block; padding: 0 4px; border-radius: 4px; background-color: #ffb6c1\"\u003e185\u003c/span\u003e \u003c/td\u003e\r\n  \u003c/tr\u003e\r\n  \u003ctr\u003e\r\n   \u003ctd style=\"text-align:left;\"\u003e \u003cspan style=\"display: block; padding: 0 4px; border-radius: 4px; background-color: #add8e6\"\u003esex                     \u003c/span\u003e \u003c/td\u003e\r\n   \u003ctd style=\"text-align:left;\"\u003e trust \u003c/td\u003e\r\n   \u003ctd style=\"text-align:left;\"\u003e \u003cspan style=\"display: block; padding: 0 4px; border-radius: 4px; background-color: #90ee90\"\u003enrc  \u003c/span\u003e \u003c/td\u003e\r\n   \u003ctd style=\"text-align:right;\"\u003e 6468 \u003c/td\u003e\r\n   \u003ctd style=\"text-align:left;\"\u003e \u003cspan style=\"display: block; padding: 0 4px; border-radius: 4px; background-color: #ffb6c1\"\u003e185\u003c/span\u003e \u003c/td\u003e\r\n  \u003c/tr\u003e\r\n  \u003ctr\u003e\r\n   \u003ctd style=\"text-align:left;\"\u003e \u003cspan style=\"display: block; padding: 0 4px; border-radius: 4px; background-color: #add8e6\"\u003esuperfunkycalifragisexy \u003c/span\u003e \u003c/td\u003e\r\n   \u003ctd style=\"text-align:left;\"\u003e NA \u003c/td\u003e\r\n   \u003ctd style=\"text-align:left;\"\u003e \u003cspan style=\"display: block; padding: 0 4px; border-radius: 4px; background-color: #90ee90\"\u003eNA   \u003c/span\u003e \u003c/td\u003e\r\n   \u003ctd style=\"text-align:right;\"\u003e NA \u003c/td\u003e\r\n   \u003ctd style=\"text-align:left;\"\u003e \u003cspan style=\"display: block; padding: 0 4px; border-radius: 4px; background-color: #ffb6c1\"\u003e19\u003c/span\u003e \u003c/td\u003e\r\n  \u003c/tr\u003e\r\n  \u003ctr\u003e\r\n   \u003ctd style=\"text-align:left;\"\u003e \u003cspan style=\"display: block; padding: 0 4px; border-radius: 4px; background-color: #add8e6\"\u003elovesexy                \u003c/span\u003e \u003c/td\u003e\r\n   \u003ctd style=\"text-align:left;\"\u003e NA \u003c/td\u003e\r\n   \u003ctd style=\"text-align:left;\"\u003e \u003cspan style=\"display: block; padding: 0 4px; border-radius: 4px; background-color: #90ee90\"\u003eNA   \u003c/span\u003e \u003c/td\u003e\r\n   \u003ctd style=\"text-align:right;\"\u003e NA \u003c/td\u003e\r\n   \u003ctd style=\"text-align:left;\"\u003e \u003cspan style=\"display: block; padding: 0 4px; border-radius: 4px; background-color: #ffb6c1\"\u003e16\u003c/span\u003e \u003c/td\u003e\r\n  \u003c/tr\u003e\r\n  \u003ctr\u003e\r\n   \u003ctd style=\"text-align:left;\"\u003e \u003cspan style=\"display: block; padding: 0 4px; border-radius: 4px; background-color: #add8e6\"\u003esexual                  \u003c/span\u003e \u003c/td\u003e\r\n   \u003ctd style=\"text-align:left;\"\u003e NA \u003c/td\u003e\r\n   \u003ctd style=\"text-align:left;\"\u003e \u003cspan style=\"display: block; padding: 0 4px; border-radius: 4px; background-color: #90ee90\"\u003eNA   \u003c/span\u003e \u003c/td\u003e\r\n   \u003ctd style=\"text-align:right;\"\u003e NA \u003c/td\u003e\r\n   \u003ctd style=\"text-align:left;\"\u003e \u003cspan style=\"display: block; padding: 0 4px; border-radius: 4px; background-color: #ffb6c1\"\u003e11\u003c/span\u003e \u003c/td\u003e\r\n  \u003c/tr\u003e\r\n  \u003ctr\u003e\r\n   \u003ctd style=\"text-align:left;\"\u003e \u003cspan style=\"display: block; padding: 0 4px; border-radius: 4px; background-color: #add8e6\"\u003esexuality               \u003c/span\u003e \u003c/td\u003e\r\n   \u003ctd style=\"text-align:left;\"\u003e NA \u003c/td\u003e\r\n   \u003ctd style=\"text-align:left;\"\u003e \u003cspan style=\"display: block; padding: 0 4px; border-radius: 4px; background-color: #90ee90\"\u003eNA   \u003c/span\u003e \u003c/td\u003e\r\n   \u003ctd style=\"text-align:right;\"\u003e NA \u003c/td\u003e\r\n   \u003ctd style=\"text-align:left;\"\u003e \u003cspan style=\"display: block; padding: 0 4px; border-radius: 4px; background-color: #ffb6c1\"\u003e11\u003c/span\u003e \u003c/td\u003e\r\n  \u003c/tr\u003e\r\n  \u003ctr\u003e\r\n   \u003ctd style=\"text-align:left;\"\u003e \u003cspan style=\"display: block; padding: 0 4px; border-radius: 4px; background-color: #add8e6\"\u003esexiness                \u003c/span\u003e \u003c/td\u003e\r\n   \u003ctd style=\"text-align:left;\"\u003e NA \u003c/td\u003e\r\n   \u003ctd style=\"text-align:left;\"\u003e \u003cspan style=\"display: block; padding: 0 4px; border-radius: 4px; background-color: #90ee90\"\u003eNA   \u003c/span\u003e \u003c/td\u003e\r\n   \u003ctd style=\"text-align:right;\"\u003e NA \u003c/td\u003e\r\n   \u003ctd style=\"text-align:left;\"\u003e \u003cspan style=\"display: block; padding: 0 4px; border-radius: 4px; background-color: #ffb6c1\"\u003e2\u003c/span\u003e \u003c/td\u003e\r\n  \u003c/tr\u003e\r\n  \u003ctr\u003e\r\n   \u003ctd style=\"text-align:left;\"\u003e \u003cspan style=\"display: block; padding: 0 4px; border-radius: 4px; background-color: #add8e6\"\u003esexually                \u003c/span\u003e \u003c/td\u003e\r\n   \u003ctd style=\"text-align:left;\"\u003e NA \u003c/td\u003e\r\n   \u003ctd style=\"text-align:left;\"\u003e \u003cspan style=\"display: block; padding: 0 4px; border-radius: 4px; background-color: #90ee90\"\u003eNA   \u003c/span\u003e \u003c/td\u003e\r\n   \u003ctd style=\"text-align:right;\"\u003e NA \u003c/td\u003e\r\n   \u003ctd style=\"text-align:left;\"\u003e \u003cspan style=\"display: block; padding: 0 4px; border-radius: 4px; background-color: #ffb6c1\"\u003e2\u003c/span\u003e \u003c/td\u003e\r\n  \u003c/tr\u003e\r\n  \u003ctr\u003e\r\n   \u003ctd style=\"text-align:left;\"\u003e \u003cspan style=\"display: block; padding: 0 4px; border-radius: 4px; background-color: #add8e6\"\u003esexe                    \u003c/span\u003e \u003c/td\u003e\r\n   \u003ctd style=\"text-align:left;\"\u003e NA \u003c/td\u003e\r\n   \u003ctd style=\"text-align:left;\"\u003e \u003cspan style=\"display: block; padding: 0 4px; border-radius: 4px; background-color: #90ee90\"\u003eNA   \u003c/span\u003e \u003c/td\u003e\r\n   \u003ctd style=\"text-align:right;\"\u003e NA \u003c/td\u003e\r\n   \u003ctd style=\"text-align:left;\"\u003e \u003cspan style=\"display: block; padding: 0 4px; border-radius: 4px; background-color: #ffb6c1\"\u003e1\u003c/span\u003e \u003c/td\u003e\r\n  \u003c/tr\u003e\r\n  \u003ctr\u003e\r\n   \u003ctd style=\"text-align:left;\"\u003e \u003cspan style=\"display: block; padding: 0 4px; border-radius: 4px; background-color: #add8e6\"\u003esexed                   \u003c/span\u003e \u003c/td\u003e\r\n   \u003ctd style=\"text-align:left;\"\u003e NA \u003c/td\u003e\r\n   \u003ctd style=\"text-align:left;\"\u003e \u003cspan style=\"display: block; padding: 0 4px; border-radius: 4px; background-color: #90ee90\"\u003eNA   \u003c/span\u003e \u003c/td\u003e\r\n   \u003ctd style=\"text-align:right;\"\u003e NA \u003c/td\u003e\r\n   \u003ctd style=\"text-align:left;\"\u003e \u003cspan style=\"display: block; padding: 0 4px; border-radius: 4px; background-color: #ffb6c1\"\u003e1\u003c/span\u003e \u003c/td\u003e\r\n  \u003c/tr\u003e\r\n  \u003ctr\u003e\r\n   \u003ctd style=\"text-align:left;\"\u003e \u003cspan style=\"display: block; padding: 0 4px; border-radius: 4px; background-color: #add8e6\"\u003esexier                  \u003c/span\u003e \u003c/td\u003e\r\n   \u003ctd style=\"text-align:left;\"\u003e NA \u003c/td\u003e\r\n   \u003ctd style=\"text-align:left;\"\u003e \u003cspan style=\"display: block; padding: 0 4px; border-radius: 4px; background-color: #90ee90\"\u003eNA   \u003c/span\u003e \u003c/td\u003e\r\n   \u003ctd style=\"text-align:right;\"\u003e NA \u003c/td\u003e\r\n   \u003ctd style=\"text-align:left;\"\u003e \u003cspan style=\"display: block; padding: 0 4px; border-radius: 4px; background-color: #ffb6c1\"\u003e1\u003c/span\u003e \u003c/td\u003e\r\n  \u003c/tr\u003e\r\n  \u003ctr\u003e\r\n   \u003ctd style=\"text-align:left;\"\u003e \u003cspan style=\"display: block; padding: 0 4px; border-radius: 4px; background-color: #add8e6\"\u003esuperfunkycalifraagisexy\u003c/span\u003e \u003c/td\u003e\r\n   \u003ctd style=\"text-align:left;\"\u003e NA \u003c/td\u003e\r\n   \u003ctd style=\"text-align:left;\"\u003e \u003cspan style=\"display: block; padding: 0 4px; border-radius: 4px; background-color: #90ee90\"\u003eNA   \u003c/span\u003e \u003c/td\u003e\r\n   \u003ctd style=\"text-align:right;\"\u003e NA \u003c/td\u003e\r\n   \u003ctd style=\"text-align:left;\"\u003e \u003cspan style=\"display: block; padding: 0 4px; border-radius: 4px; background-color: #ffb6c1\"\u003e1\u003c/span\u003e \u003c/td\u003e\r\n  \u003c/tr\u003e\r\n  \u003ctr\u003e\r\n   \u003ctd style=\"text-align:left;\"\u003e \u003cspan style=\"display: block; padding: 0 4px; border-radius: 4px; background-color: #add8e6\"\u003esuperfunkycalifragisexi \u003c/span\u003e \u003c/td\u003e\r\n   \u003ctd style=\"text-align:left;\"\u003e NA \u003c/td\u003e\r\n   \u003ctd style=\"text-align:left;\"\u003e \u003cspan style=\"display: block; padding: 0 4px; border-radius: 4px; background-color: #90ee90\"\u003eNA   \u003c/span\u003e \u003c/td\u003e\r\n   \u003ctd style=\"text-align:right;\"\u003e NA \u003c/td\u003e\r\n   \u003ctd style=\"text-align:left;\"\u003e \u003cspan style=\"display: block; padding: 0 4px; border-radius: 4px; background-color: #ffb6c1\"\u003e1\u003c/span\u003e \u003c/td\u003e\r\n  \u003c/tr\u003e\r\n\u003c/tbody\u003e\r\n\u003c/table\u003e\r\n\u003c/div\u003e\r\n\r\n\u003cp\u003eNotice that Prince uses \u003cem\u003esexy\u003c/em\u003e frequently, but it doesn\u0026#39;t exist in this form in NRC. The word \u003cem\u003esex\u003c/em\u003e is found in NRC but not in Bing. What if you looked at the \u003cstrong\u003estems\u003c/strong\u003e or \u003cstrong\u003eroots\u003c/strong\u003e of words, would that help? What a conundrum! Your text could contain a past tense, a plural, or an adverb of a root word, but it may not exist in any lexicon. How do you deal with this?\u003c/p\u003e\r\n\u003ch3 id=\"more-data-preparation-\"\u003eMore Data Preparation?\u003c/h3\u003e\r\n\u003cp\u003eIt may be the case that you need a few more data preparation steps. Here are three techniques to \u003cem\u003econsider\u003c/em\u003e before performing sentiment analysis:  \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eStemming: generally refers to removing suffixes from words to get the common origin  \u003c/li\u003e\r\n\u003cli\u003eLemmatization: reducing inflected (or sometimes derived) words to their word stem, base or root form   \u003c/li\u003e\r\n\u003cli\u003eWord replacement: replace words with more frequently used synonyms  \u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eAn advanced concept in sentiment analysis is that of synonym (semantically similar peer) and hypernym (a common parent) replacement. These are words that are more frequently used than the related word in the lyric, and actually \u003cem\u003edo\u003c/em\u003e appear in a lexicon, thus giving a higher match percentage. There is not enough space in this tutorial to address additional data preparation, but it\u0026#39;s definitely something to consider!\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eChallenge\u003c/strong\u003e: do a little research on lexicons and how they are created. Is there already one that exists that is better suited to musical lyrics? If you\u0026#39;re really interested, maybe consider what it would take to build your own lexicon. What is the difference between classifier-based sentiment analysis and lexicon-based sentiment analysis?\u003c/p\u003e\r\n\u003cp\u003e\u003ca id=\"analysis\"\u003e\u003c/a\u003e\u003c/p\u003e\r\n\u003ch2 id=\"detailed-analysis\"\u003eDetailed Analysis\u003c/h2\u003e\r\n\u003cp\u003eNow that you have a foundational understanding of the dataset and the lexicons, you can apply that knowledge by joining them together for analysis. Here are the high-level steps you\u0026#39;ll take:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eCreate lexicon-specific datasets\u003c/li\u003e\r\n\u003cli\u003eLook at \u003cem\u003epolar\u003c/em\u003e sentiment across all songs\u003c/li\u003e\r\n\u003cli\u003eExamine sentiment change over time\u003c/li\u003e\r\n\u003cli\u003eValidate your results against specific events in Prince\u0026#39;s life\u003c/li\u003e\r\n\u003cli\u003eStudy song level sentiment\u003c/li\u003e\r\n\u003cli\u003eReview how pairs of words affect sentiment\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3 id=\"create-sentiment-datasets\"\u003eCreate Sentiment Datasets\u003c/h3\u003e\r\n\u003cp\u003eStart off by creating Prince sentiment datasets for each of the lexicons by performing an \u003ccode\u003einner_join()\u003c/code\u003e on the \u003ccode\u003eget_sentiments()\u003c/code\u003e function. Pass the name of the lexicon for each call. For this exercise, use Bing for binary and NRC for categorical sentiments. Since words can appear in multiple categories in NRC, such as Negative/Fear or Positive/Joy, you\u0026#39;ll also create a subset without the \u003cem\u003epositive\u003c/em\u003e and \u003cem\u003enegative\u003c/em\u003e categories to use later on.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"lang-r\"\u003eprince_bing \u0026lt;- prince_tidy %\u0026gt;%\r\n  inner_join(get_sentiments(\u0026quot;bing\u0026quot;))\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cpre\u003e\u003ccode class=\"lang-r\"\u003eprince_nrc \u0026lt;- prince_tidy %\u0026gt;%\r\n  inner_join(get_sentiments(\u0026quot;nrc\u0026quot;))\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cpre\u003e\u003ccode class=\"lang-r\"\u003eprince_nrc_sub \u0026lt;- prince_tidy %\u0026gt;%\r\n  inner_join(get_sentiments(\u0026quot;nrc\u0026quot;)) %\u0026gt;%\r\n  filter(!sentiment %in% c(\u0026quot;positive\u0026quot;, \u0026quot;negative\u0026quot;))\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch3 id=\"in-the-mood-overall-sentiment\"\u003eIn The Mood: Overall Sentiment\u003c/h3\u003e\r\n\u003cp\u003eIn the detailed analysis of the lyrics, you\u0026#39;ll want to examine the different \u003cem\u003elevels\u003c/em\u003e of text, such as \u003cem\u003eall songs\u003c/em\u003e, \u003cem\u003echart level\u003c/em\u003e, \u003cem\u003edecade level\u003c/em\u003e and \u003cem\u003eword level\u003c/em\u003e. Start by graphing the NRC sentiment analysis of the entire dataset.\u003c/p\u003e\r\n\u003cp\u003e(Just for fun, I used the \u003ca href=\"https://cran.r-project.org/web/packages/memery/memery.pdf\" target=\"_blank\"\u003e\u003ccode\u003ememery\u003c/code\u003e\u003c/a\u003e and \u003ca href=\"https://cran.r-project.org/web/packages/magick/vignettes/intro.html\" target=\"_blank\"\u003e\u003ccode\u003emagick\u003c/code\u003e\u003c/a\u003e packages to add images \u003ca href=\"https://www.r-bloggers.com/mix-ggplot2-graphs-with-your-favorite-memes-memery-0-4-2-released/\" target=\"_blank\"\u003e(memes)\u003c/a\u003e to the graphs.)\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"lang-r\"\u003enrc_plot \u0026lt;- prince_nrc %\u0026gt;%\r\n  group_by(sentiment) %\u0026gt;%\r\n  summarise(word_count = n()) %\u0026gt;%\r\n  ungroup() %\u0026gt;%\r\n  mutate(sentiment = reorder(sentiment, word_count)) %\u0026gt;%\r\n  #Use `fill = -word_count` to make the larger bars darker\r\n  ggplot(aes(sentiment, word_count, fill = -word_count)) +\r\n  geom_col() +\r\n  guides(fill = FALSE) + #Turn off the legend\r\n  theme_lyrics() +\r\n  labs(x = NULL, y = \u0026quot;Word Count\u0026quot;) +\r\n  scale_y_continuous(limits = c(0, 15000)) + #Hard code the axis limit\r\n  ggtitle(\u0026quot;Prince NRC Sentiment\u0026quot;) +\r\n  coord_flip()\r\n\r\nimg \u0026lt;- \u0026quot;prince_background2.jpg\u0026quot; #Load the background image\r\nlab \u0026lt;- \u0026quot;\u0026quot;  #Turn off the label\r\n#Overlay the plot on the image and create the meme file\r\nmeme(img, lab, \u0026quot;meme_nrc.jpg\u0026quot;, inset = nrc_plot)\r\n#Read the file back in and display it!\r\nnrc_meme \u0026lt;- image_read(\u0026quot;meme_nrc.jpg\u0026quot;)\r\nplot(nrc_meme)\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cimg src=\"http://res.cloudinary.com/dyd911kmh/image/upload/f_auto,q_auto:best/v1520597738/unnamed-chunk-13-1_ru5mr8.png\"/\u003e\u003c/p\u003e\r\n\u003cp\u003eIt appears that for Prince\u0026#39;s lyrics, NRC strongly favors the \u003cem\u003epositive\u003c/em\u003e. But are all words with a sentiment of \u003cem\u003edisgust\u003c/em\u003e or \u003cem\u003eanger\u003c/em\u003e also in the \u003cem\u003enegative\u003c/em\u003e category as well? It may be worth checking out.\u003c/p\u003e\r\n\u003cp\u003eNow take a look at Bing overall sentiment. Of the 1185 distinct words from Prince\u0026#39;s lyrics that appear in the Bing lexicon, how many are positive and how many are negative?\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"lang-r\"\u003ebing_plot \u0026lt;- prince_bing %\u0026gt;%\r\n  group_by(sentiment) %\u0026gt;%\r\n  summarise(word_count = n()) %\u0026gt;%\r\n  ungroup() %\u0026gt;%\r\n  mutate(sentiment = reorder(sentiment, word_count)) %\u0026gt;%\r\n  ggplot(aes(sentiment, word_count, fill = sentiment)) +\r\n  geom_col() +\r\n  guides(fill = FALSE) +\r\n  theme_lyrics() +\r\n  labs(x = NULL, y = \u0026quot;Word Count\u0026quot;) +\r\n  scale_y_continuous(limits = c(0, 8000)) +\r\n  ggtitle(\u0026quot;Prince Bing Sentiment\u0026quot;) +\r\n  coord_flip()\r\n\r\nimg1 \u0026lt;- \u0026quot;prince_background1.jpg\u0026quot;\r\nlab1 \u0026lt;- \u0026quot;\u0026quot;\r\nmeme(img1, lab1, \u0026quot;meme_bing.jpg\u0026quot;, inset = bing_plot)\r\nx \u0026lt;- image_read(\u0026quot;meme_bing.jpg\u0026quot;)\r\nplot(x)\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cimg src=\"http://res.cloudinary.com/dyd911kmh/image/upload/f_auto,q_auto:best/v1520597738/unnamed-chunk-14-1_cgq4i7.png\"/\u003e\u003c/p\u003e\r\n\u003cp\u003eCould it be the case that for Bing, there appears to be equal \u003cem\u003epositive\u003c/em\u003e and \u003cem\u003enegative\u003c/em\u003e sentiment in Prince\u0026#39;s music? Does overall sentiment \u003cem\u003ecancel itself out\u003c/em\u003e when looking at a dataset that is too large? It\u0026#39;s hard to know, but try looking at it in chunks and see what happens.\u003c/p\u003e\r\n\u003cp\u003eIn acoustics, there is something called \u003cem\u003ephase cancellation\u003c/em\u003e where the frequency of two instances of the same wave are exactly out of phase and cancel each other out, for example, when you\u0026#39;re recording a drum with two mics and it takes the sound longer to get to one mic than the other. This results in total silence at that frequency! How may this apply to sentiment analysis of large datasets? Give it some thought.\u003c/p\u003e\r\n\u003cblockquote\u003e\r\n\u003cp\u003eLinguistic Professor: \u0026quot;In English, a double negative forms a positive. In Russian, a double negative is still a negative. However, there is no language wherein a double positive can form a negative.\u0026quot; Disagreeing student: \u0026quot;Yeah, right.\u0026quot;\u003c/p\u003e\r\n\u003c/blockquote\u003e\r\n\u003ch3 id=\"crank-it-up-chart-level\"\u003eCrank It Up: Chart Level\u003c/h3\u003e\r\n\u003cp\u003eTurn up the volume on your analysis by breaking it down to the chart level using the Bing lexicon. Create a graph of the \u003cem\u003epolar\u003c/em\u003e sentiment per chart level. Use \u003ccode\u003espread()\u003c/code\u003e to separate the sentiments into columns and \u003ccode\u003emutate()\u003c/code\u003e to create a \u003cem\u003epolarity\u003c/em\u003e (positive - negative) field and a \u003cem\u003epercent_positive\u003c/em\u003e field ($positive / total sentiment * 100$), for a different perspective. For the polarity graph, add a \u003ccode\u003eyintercept\u003c/code\u003e with \u003ccode\u003egeom_hline()\u003c/code\u003e. Plot the graphs side by side with \u003ccode\u003egrid.arrange()\u003c/code\u003e.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"lang-r\"\u003eprince_polarity_chart \u0026lt;- prince_bing %\u0026gt;%\r\n  count(sentiment, chart_level) %\u0026gt;%\r\n  spread(sentiment, n, fill = 0) %\u0026gt;%\r\n  mutate(polarity = positive - negative,\r\n    percent_positive = positive / (positive + negative) * 100)\r\n\r\n#Polarity by chart\r\nplot1 \u0026lt;- prince_polarity_chart %\u0026gt;%\r\n  ggplot( aes(chart_level, polarity, fill = chart_level)) +\r\n  geom_col() +\r\n  scale_fill_manual(values = my_colors[3:5]) +\r\n  geom_hline(yintercept = 0, color = \u0026quot;red\u0026quot;) +\r\n  theme_lyrics() + theme(plot.title = element_text(size = 11)) +\r\n  xlab(NULL) + ylab(NULL) +\r\n  ggtitle(\u0026quot;Polarity By Chart Level\u0026quot;)\r\n\r\n#Percent positive by chart\r\nplot2 \u0026lt;- prince_polarity_chart %\u0026gt;%\r\n  ggplot( aes(chart_level, percent_positive, fill = chart_level)) +\r\n  geom_col() +\r\n  scale_fill_manual(values = c(my_colors[3:5])) +\r\n  geom_hline(yintercept = 0, color = \u0026quot;red\u0026quot;) +\r\n  theme_lyrics() + theme(plot.title = element_text(size = 11)) +\r\n  xlab(NULL) + ylab(NULL) +\r\n  ggtitle(\u0026quot;Percent Positive By Chart Level\u0026quot;)\r\n\r\ngrid.arrange(plot1, plot2, ncol = 2)\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cimg src=\"http://res.cloudinary.com/dyd911kmh/image/upload/f_auto,q_auto:best/v1520597737/unnamed-chunk-15-1_fd9rrc.png\"/\u003e\u003c/p\u003e\r\n\u003cp\u003eDoes this say that charted songs are typically more positive than negative? If so, what does this tell you about what society wants to hear? Can you even make these assumptions? Looking at the positive sentiment relative to total sentiment, it seems like the charted songs are just slightly more positive than the negative. This is interesting given that the Bing lexicon itself has more negative than positive words.\u003c/p\u003e\r\n\u003ch3 id=\"polar-melting-so-blue\"\u003ePolar Melting: So Blue\u003c/h3\u003e\r\n\u003cp\u003eSince you\u0026#39;re looking at sentiment from a \u003cem\u003epolar\u003c/em\u003e perspective, you might want to see \u003cem\u003eweather\u003c/em\u003e or not it changes over time (geek humor). This time use \u003ccode\u003egeom_smooth()\u003c/code\u003e with the \u003ccode\u003eloess\u003c/code\u003e method for a smoother curve and another \u003ccode\u003egeom_smooth()\u003c/code\u003e with method = \u003ccode\u003elm\u003c/code\u003e for a linear smooth curve.  \u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"lang-r\"\u003eprince_polarity_year \u0026lt;- prince_bing %\u0026gt;%\r\n  count(sentiment, year) %\u0026gt;%\r\n  spread(sentiment, n, fill = 0) %\u0026gt;%\r\n  mutate(polarity = positive - negative,\r\n    percent_positive = positive / (positive + negative) * 100)\r\n\r\npolarity_over_time \u0026lt;- prince_polarity_year %\u0026gt;%\r\n  ggplot(aes(year, polarity, color = ifelse(polarity \u0026gt;= 0,my_colors[5],my_colors[4]))) +\r\n  geom_col() +\r\n  geom_smooth(method = \u0026quot;loess\u0026quot;, se = FALSE) +\r\n  geom_smooth(method = \u0026quot;lm\u0026quot;, se = FALSE, aes(color = my_colors[1])) +\r\n  theme_lyrics() + theme(plot.title = element_text(size = 11)) +\r\n  xlab(NULL) + ylab(NULL) +\r\n  ggtitle(\u0026quot;Polarity Over Time\u0026quot;)\r\n\r\nrelative_polarity_over_time \u0026lt;- prince_polarity_year %\u0026gt;%\r\n  ggplot(aes(year, percent_positive , color = ifelse(polarity \u0026gt;= 0,my_colors[5],my_colors[4]))) +\r\n  geom_col() +\r\n  geom_smooth(method = \u0026quot;loess\u0026quot;, se = FALSE) +\r\n  geom_smooth(method = \u0026quot;lm\u0026quot;, se = FALSE, aes(color = my_colors[1])) +\r\n  theme_lyrics() + theme(plot.title = element_text(size = 11)) +\r\n  xlab(NULL) + ylab(NULL) +\r\n  ggtitle(\u0026quot;Percent Positive Over Time\u0026quot;)\r\n\r\ngrid.arrange(polarity_over_time, relative_polarity_over_time, ncol = 2)\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cimg src=\"http://res.cloudinary.com/dyd911kmh/image/upload/f_auto,q_auto:best/v1520597738/unnamed-chunk-16-1_k6rpfg.png\"/\u003e\u003c/p\u003e\r\n\u003cp\u003eA few extremes were adjusted in the second graph above, but the overall polarity trend over time is negative in both cases.\u003c/p\u003e\r\n\u003ch3 id=\"mood-ring\"\u003eMood Ring\u003c/h3\u003e\r\n\u003cp\u003eYou\u0026#39;ll again use the power of the \u003ccode\u003echordDiagram()\u003c/code\u003e to examine the relationships between NRC sentiments and decades. Note that sentiment categories appear on the top part of the ring and decades on the bottom.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"lang-r\"\u003egrid.col = c(\u0026quot;1970s\u0026quot; = my_colors[1], \u0026quot;1980s\u0026quot; = my_colors[2], \u0026quot;1990s\u0026quot; = my_colors[3], \u0026quot;2000s\u0026quot; = my_colors[4], \u0026quot;2010s\u0026quot; = my_colors[5], \u0026quot;anger\u0026quot; = \u0026quot;grey\u0026quot;, \u0026quot;anticipation\u0026quot; = \u0026quot;grey\u0026quot;, \u0026quot;disgust\u0026quot; = \u0026quot;grey\u0026quot;, \u0026quot;fear\u0026quot; = \u0026quot;grey\u0026quot;, \u0026quot;joy\u0026quot; = \u0026quot;grey\u0026quot;, \u0026quot;sadness\u0026quot; = \u0026quot;grey\u0026quot;, \u0026quot;surprise\u0026quot; = \u0026quot;grey\u0026quot;, \u0026quot;trust\u0026quot; = \u0026quot;grey\u0026quot;)\r\n\r\ndecade_mood \u0026lt;-  prince_nrc %\u0026gt;%\r\n  filter(decade != \u0026quot;NA\u0026quot; \u0026amp; !sentiment %in% c(\u0026quot;positive\u0026quot;, \u0026quot;negative\u0026quot;)) %\u0026gt;%\r\n  count(sentiment, decade) %\u0026gt;%\r\n  group_by(decade, sentiment) %\u0026gt;%\r\n  summarise(sentiment_sum = sum(n)) %\u0026gt;%\r\n  ungroup()\r\n\r\ncircos.clear()\r\n#Set the gap size\r\ncircos.par(gap.after = c(rep(5, length(unique(decade_mood[[1]])) - 1), 15,\r\n                         rep(5, length(unique(decade_mood[[2]])) - 1), 15))\r\nchordDiagram(decade_mood, grid.col = grid.col, transparency = .2)\r\ntitle(\u0026quot;Relationship Between Mood and Decade\u0026quot;)\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cimg src=\"http://res.cloudinary.com/dyd911kmh/image/upload/f_auto,q_auto:best/v1520597738/unnamed-chunk-17-1_fybt2c.png\"/\u003e\u003c/p\u003e\r\n\u003cp\u003eThis shows the counts of words per NRC category per decade. It\u0026#39;s a lot to take in on a small graph, but it provides \u003cem\u003etons\u003c/em\u003e of information on relationships between categories and time. These diagrams are incredibly customizable and can be as simple or informative as desired.\u003c/p\u003e\r\n\u003ch3 id=\"real-time-sentiment\"\u003eReal-Time Sentiment\u003c/h3\u003e\r\n\u003cp\u003eGiven all the wonderful courses you\u0026#39;ve taken on DataCamp, you\u0026#39;re probably itching to apply those skills to real world situations. So do that now by mapping your analysis of Prince\u0026#39;s lyrics to something \u003cem\u003ereal\u003c/em\u003e over a period of \u003cem\u003etime\u003c/em\u003e. However, please be skeptical and cautious when performing a simplified analysis on such a complex subject.\u003c/p\u003e\r\n\u003cp\u003eI have created a list of Prince\u0026#39;s life events, collected from popular sources such as Rolling Stone Magazine, Biography.com, etc. I selected highly public years that match songs that have release dates in our dataset. Read in those events from \u003ccode\u003eprinceEvents.csv\u003c/code\u003e now. Then use \u003ccode\u003eprince_bing\u003c/code\u003e and \u003ccode\u003espread()\u003c/code\u003e to create a polarity score per year. Join on the \u003ccode\u003eevents\u003c/code\u003e data frame and create a sentiment field so you can fill in colors on your bar chart. As always, use \u003ccode\u003ecoord_flip()\u003c/code\u003e when you\u0026#39;re showing large text labels.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"lang-r\"\u003eevents \u0026lt;- read.csv(\u0026#39;princeEvents.csv\u0026#39;, stringsAsFactors = FALSE)\r\n\r\nyear_polarity_bing \u0026lt;- prince_bing %\u0026gt;%\r\n  group_by(year, sentiment) %\u0026gt;%\r\n  count(year, sentiment) %\u0026gt;%\r\n  spread(sentiment, n) %\u0026gt;%\r\n  mutate(polarity = positive - negative,\r\n         ratio = polarity / (positive + negative)) #use polarity ratio in next graph\r\n\r\n events %\u0026gt;%\r\n   #Left join gets event years with no releases\r\n   left_join(year_polarity_bing) %\u0026gt;%\r\n   filter(event != \u0026quot; \u0026quot;) %\u0026gt;% #Account for bad data\r\n   mutate(event = reorder(event, year), #Sort chart by desc year\r\n           sentiment = ifelse(positive \u0026gt; negative,\r\n                              \u0026quot;positive\u0026quot;, \u0026quot;negative\u0026quot;)) %\u0026gt;%\r\n   ggplot(aes(event, polarity, fill = sentiment)) +\r\n   geom_bar(stat = \u0026quot;identity\u0026quot;) +\r\n   theme_minimal() + theme(legend.position = \u0026quot;none\u0026quot;) +\r\n   xlab(NULL) +\r\n   ggtitle(\u0026quot;Sentiment by Events\u0026quot;) +\r\n   coord_flip()\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cimg src=\"http://res.cloudinary.com/dyd911kmh/image/upload/f_auto,q_auto:best/v1520597738/unnamed-chunk-18-1_ta8ikt.png\"/\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eTip\u003c/strong\u003e: you can find \u003ccode\u003eprinceEvents.csv\u003c/code\u003e \u003ca href=\"https://s3.amazonaws.com/assets.datacamp.com/blog_assets/sentiment_analysis/princeEvents.csv\"\u003ehere\u003c/a\u003e.\u003c/p\u003e\r\n\u003cp\u003eI think it\u0026#39;s fascinating to compare the events with the sentiment. Although subjective, I found them to be very correlated. Now granted, I created the event dataset myself. I could have easily biased it to match the lyrics. However, I did use multiple sources for each year to determine the most commonly reported fact. These results should motivate you to look even more deeply into a \u003cem\u003eword level\u003c/em\u003e analysis to see what Prince was singing about.\u003c/p\u003e\r\n\u003ch3 id=\"the-black-album-1994-1996\"\u003eThe Black Album: 1994 - 1996\u003c/h3\u003e\r\n\u003cp\u003eIn 1994, Prince released \u003cstrong\u003eThe Black Album\u003c/strong\u003e as an attempt to regain his African-American audience. Given the fact that 1994 and the following two years stand out in the analysis, you can look at the top words that match the NRC lexicon for this period using \u003ccode\u003egeom_label_repel()\u003c/code\u003e from the \u003ccode\u003eggrepel\u003c/code\u003e package along with \u003ccode\u003egeom_point()\u003c/code\u003e. This is a tricky graph, so I suggest you play around with the configuration of the code below.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"lang-r\"\u003eplot_words_94_96 \u0026lt;- prince_nrc %\u0026gt;%\r\n  filter(year %in% c(\u0026quot;1994\u0026quot;, \u0026quot;1995\u0026quot;, \u0026quot;1996\u0026quot;)) %\u0026gt;%\r\n  group_by(sentiment) %\u0026gt;%\r\n  count(word, sort = TRUE) %\u0026gt;%\r\n  arrange(desc(n)) %\u0026gt;%\r\n  slice(seq_len(8)) %\u0026gt;% #consider top_n() from dplyr also\r\n  ungroup()\r\n\r\nplot_words_94_96 %\u0026gt;%\r\n  #Set `y = 1` to just plot one variable and use word as the label\r\n  ggplot(aes(word, 1, label = word, fill = sentiment )) +\r\n  #You want the words, not the points\r\n  geom_point(color = \u0026quot;transparent\u0026quot;) +\r\n  #Make sure the labels don\u0026#39;t overlap\r\n  geom_label_repel(force = 1,nudge_y = .5,  \r\n                   direction = \u0026quot;y\u0026quot;,\r\n                   box.padding = 0.04,\r\n                   segment.color = \u0026quot;transparent\u0026quot;,\r\n                   size = 3) +\r\n  facet_grid(~sentiment) +\r\n  theme_lyrics() +\r\n  theme(axis.text.y = element_blank(), axis.text.x = element_blank(),\r\n        axis.title.x = element_text(size = 6),\r\n        panel.grid = element_blank(), panel.background = element_blank(),\r\n        panel.border = element_rect(\u0026quot;lightgray\u0026quot;, fill = NA),\r\n        strip.text.x = element_text(size = 9)) +\r\n  xlab(NULL) + ylab(NULL) +\r\n  ggtitle(\u0026quot;1994 - 1996 NRC Sentiment\u0026quot;) +\r\n  coord_flip()\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cimg src=\"http://res.cloudinary.com/dyd911kmh/image/upload/f_auto,q_auto:best/v1520597739/unnamed-chunk-19-1_eh5ohe.png\" width=\"100%\" /\u003e\u003c/p\u003e\r\n\u003cp\u003eIn 1994, Prince quoted to Rolling Stone magazine,\u003c/p\u003e\r\n\u003cblockquote\u003e\r\n\u003cp\u003e\u0026quot;When you stop a man from dreaming, he becomes a slave. That\u0026#39;s where I was.\u0026quot;\u003c/p\u003e\r\n\u003c/blockquote\u003e\r\n\u003cp\u003eSo he appeared in public with the word \u0026quot;slave\u0026quot; prominently penned on his face outwardly declaring his anti-corporate sentiment with his current music label. He also changed his name to a symbol. How well do the words above match these events? Notice the words \u003cem\u003e\u0026quot;slave\u0026quot;\u003c/em\u003e, \u003cem\u003e\u0026quot;emancipation\u0026quot;\u003c/em\u003e, \u003cem\u003e\u0026quot;black\u0026quot;\u003c/em\u003e and \u003cem\u003e\u0026quot;change\u0026quot;\u003c/em\u003e in the graph?\u003c/p\u003e\r\n\u003cp\u003e(Remember, this is not just about Prince. You can apply it to any text! For example, what were the most \u003cem\u003etrust\u003c/em\u003e sentiment words spoken by President Trump in his first year in office?)\u003c/p\u003e\r\n\u003ch3 id=\"this-time-it-s-personal-1998\"\u003eThis Time It\u0026#39;s Personal: 1998\u003c/h3\u003e\r\n\u003cp\u003eThe \u003cem\u003eSentiment By Events\u003c/em\u003e chart above indicated that between 1996 and 1998, Prince married, lost two children, and was said to predict 9/11 on stage. (Do a YouTube search on his 1998 concert in The Netherlands to listen for yourself!) Using the same steps as with the previous graph, look at the top 10 words in each NRC category during 1998.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"lang-r\"\u003eplot_words_1998 \u0026lt;- prince_nrc %\u0026gt;%\r\n  filter(year == \u0026quot;1998\u0026quot;) %\u0026gt;%\r\n  group_by(sentiment) %\u0026gt;%\r\n  count(word, sort = TRUE) %\u0026gt;%\r\n  arrange(desc(n)) %\u0026gt;%\r\n  slice(seq_len(10)) %\u0026gt;%\r\n  ungroup()\r\n\r\n#Same comments as previous graph\r\nplot_words_1998 %\u0026gt;%\r\n  ggplot(aes(word, 1, label = word, fill = sentiment )) +\r\n  geom_point(color = \u0026quot;transparent\u0026quot;) +\r\n  geom_label_repel(force = 1,nudge_y = .5,  \r\n                   direction = \u0026quot;y\u0026quot;,\r\n                   box.padding = 0.05,\r\n                   segment.color = \u0026quot;transparent\u0026quot;,\r\n                   size = 3) +\r\n  facet_grid(~sentiment) +\r\n  theme_lyrics() +\r\n  theme(axis.text.y = element_blank(), axis.text.x = element_blank(),\r\n        axis.title.x = element_text(size = 6),\r\n        panel.grid = element_blank(), panel.background = element_blank(),\r\n        panel.border = element_rect(\u0026quot;lightgray\u0026quot;, fill = NA),\r\n        strip.text.x = element_text(size = 9)) +\r\n  xlab(NULL) + ylab(NULL) +\r\n  ggtitle(\u0026quot;1998 NRC Sentiment\u0026quot;) +\r\n  coord_flip()\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cimg src=\"http://res.cloudinary.com/dyd911kmh/image/upload/f_auto,q_auto:best/v1520597739/unnamed-chunk-20-1_mpfkig.png\" width=\"100%\" /\u003e\u003c/p\u003e\r\n\u003cp\u003eGiven the personal loss and the looming threat of terrorism, words like \u003cem\u003e\u0026quot;suicide\u0026quot;\u003c/em\u003e, \u003cem\u003e\u0026quot;waste\u0026quot;\u003c/em\u003e, \u003cem\u003e\u0026quot;mad\u0026quot;\u003c/em\u003e, \u003cem\u003e\u0026quot;hurt\u0026quot;\u003c/em\u003e, and many more not captured in this graph are very indicative of the actual events. These words are powerful and provide real insight into the sentiment of that time period.\u003c/p\u003e\r\n\u003ch3 id=\"on-the-radar-radar-charts\"\u003eOn The Radar: Radar Charts\u003c/h3\u003e\r\n\u003cp\u003eAnother great way to compare sentiment across categories is to use a radar chart, which is also known as a spider chart. You can make this type of charts with the \u003ca href=\"https://github.com/mangothecat/radarchart\" target=\"_blank\"\u003e\u003ccode\u003eradarchart\u003c/code\u003e\u003c/a\u003e package. These are useful for seeing which variables have similar values or if there are any outliers for each variable.\u003c/p\u003e\r\n\u003cp\u003eYou will break this analysis into three different levels: \u003cem\u003eyear\u003c/em\u003e, \u003cem\u003echart\u003c/em\u003e, and \u003cem\u003edecade\u003c/em\u003e. (To save space, I\u0026#39;ll only include code for the specific years.)\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eUse the \u003ccode\u003eprince_nrc_sub\u003c/code\u003e dataset which does not contain the \u003cem\u003epositive\u003c/em\u003e and \u003cem\u003enegative\u003c/em\u003e sentiments so that the other ones are more visible. This time you will first calculate the total count of words by sentiment per year, as well as the total sentiment for the entire year and obtain a percentage ($count of sentiment words per year / total per year * 100$).\u003c/li\u003e\r\n\u003cli\u003eFilter for the specific years 1978, 1994, 1995, and remove the unneeded fields with \u003ccode\u003eselect()\u003c/code\u003e.\u003c/li\u003e\r\n\u003cli\u003eFinally, you\u0026#39;ll need to \u003ccode\u003espread()\u003c/code\u003e the year and percent values (key/value pairs) into multiple columns so that you have one row for each sentiment and a column for each year. Then use \u003ccode\u003echartJSRadar()\u003c/code\u003e to generate an interactive HTML widget. You can pass an argument to display dataset labels in the mouse over. (FYI, sometimes the J and Y are cropped from the word \u003cem\u003e\u0026quot;joy\u0026quot;\u003c/em\u003e by \u003ccode\u003eradarchart\u003c/code\u003e and it looks like \u0026quot;iov\u0026quot;.)\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cpre\u003e\u003ccode class=\"lang-r\"\u003e#Get the count of words per sentiment per year\r\nyear_sentiment_nrc \u0026lt;- prince_nrc_sub %\u0026gt;%\r\n  group_by(year, sentiment) %\u0026gt;%\r\n  count(year, sentiment) %\u0026gt;%\r\n  select(year, sentiment, sentiment_year_count = n)\r\n\r\n#Get the total count of sentiment words per year (not distinct)\r\ntotal_sentiment_year \u0026lt;- prince_nrc_sub %\u0026gt;%\r\n  count(year) %\u0026gt;%\r\n  select(year, year_total = n)\r\n\r\n#Join the two and create a percent field\r\nyear_radar_chart \u0026lt;- year_sentiment_nrc %\u0026gt;%\r\n  inner_join(total_sentiment_year, by = \u0026quot;year\u0026quot;) %\u0026gt;%\r\n  mutate(percent = sentiment_year_count / year_total * 100 ) %\u0026gt;%\r\n  filter(year %in% c(\u0026quot;1978\u0026quot;,\u0026quot;1994\u0026quot;,\u0026quot;1995\u0026quot;)) %\u0026gt;%\r\n  select(-sentiment_year_count, -year_total) %\u0026gt;%\r\n  spread(year, percent) %\u0026gt;%\r\n  chartJSRadar(showToolTipLabel = TRUE,\r\n               main = \u0026quot;NRC Years Radar\u0026quot;)\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003ciframe src=\"https://s3.amazonaws.com/assets.datacamp.com/blog_assets/Lyrics+Analysis+R/chart-radar-chart.html\" width=\"560\" height=\"500\" style=\"border:none;overflow:hidden\" scrolling=\"no\" frameborder=\"0\" allowTransparency=\"true\" allowFullScreen=\"true\"\u003e\u003c/iframe\u003e\r\n\u003ciframe src=\"https://s3.amazonaws.com/assets.datacamp.com/blog_assets/Lyrics+Analysis+R/decade-radar-chart.html\" width=\"560\" height=\"500\" style=\"border:none;overflow:hidden\" scrolling=\"no\" frameborder=\"0\" allowTransparency=\"true\" allowFullScreen=\"true\"\u003e\u003c/iframe\u003e\r\n\u003ciframe src=\"https://s3.amazonaws.com/assets.datacamp.com/blog_assets/Lyrics+Analysis+R/year-radar-chart.html\" width=\"560\" height=\"500\" style=\"border:none;overflow:hidden\" scrolling=\"no\" frameborder=\"0\" allowTransparency=\"true\" allowFullScreen=\"true\"\u003e\u003c/iframe\u003e\r\n\r\n\u003cp\u003eYou\u0026#39;ll have to scroll up and down to compare these graphs because I wanted to leave them full size. It\u0026#39;s interesting to note that with a smaller dataset like \u003ccode\u003eyear\u003c/code\u003e, you are able to see the variance in each sentiment more distinctly using this type of visualization. You may also notice that in contrast to previous exercises, using a percentage, \u003cem\u003e\u0026quot;joy\u0026quot;\u003c/em\u003e has the highest score on all charts (especially at the beginning of Prince\u0026#39;s career in 1978).\u003c/p\u003e\r\n\u003ch3 id=\"sign-o-the-times\"\u003eSign O\u0026#39; The Times\u003c/h3\u003e\r\n\u003cp\u003eSpotify uses machine learning to create song recommendations for its 140 million active users. It doesn\u0026#39;t use lyrical content yet. Imagine if it could... So now, take an even deeper look into the mood of specific songs.\u003c/p\u003e\r\n\u003cp\u003eIn 1987, Prince wrote a song called \u003cstrong\u003e\u0026quot;Sign O\u0026#39; the Times\u0026quot;\u003c/strong\u003e. A \u003ca href=\"https://www.billboard.com/articles/columns/pop/7744222/prince-sign-o-the-times-album-ranked\" target=\"_blank\"\u003eBillboard article\u003c/a\u003e by Kenneth Partridge stated:\u003c/p\u003e\r\n\u003cblockquote\u003e\r\n\u003cp\u003e\u0026quot;As he tackles the topics of AIDS, gangs, drugs, natural disasters, and even the Challenger explosion, Prince plays it cool and detached. \u0026#39;Sign O\u0026#39; the Times\u0026#39; is a status update, not a call to action. His solution isn\u0026#39;t marching in the streets or phoning your congressman.\u0026quot;\u003c/p\u003e\r\n\u003c/blockquote\u003e\r\n\u003cp\u003eSo how would a \u003cem\u003emachine\u003c/em\u003e interpret the mood of this song? Is it highly emotional or simply informative? Does it represent Prince as a person or society in general? Graph the NRC categories with \u003ccode\u003eggplot2\u003c/code\u003e.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"lang-r\"\u003eprince_nrc %\u0026gt;%\r\n  filter(song %in% \u0026quot;sign o the times\u0026quot;) %\u0026gt;%\r\n  group_by(sentiment) %\u0026gt;%\r\n  summarise(word_count = n()) %\u0026gt;%\r\n  ungroup() %\u0026gt;%\r\n  mutate(sentiment = reorder(sentiment, word_count)) %\u0026gt;%\r\n  ggplot(aes(sentiment, word_count, fill = -word_count)) +\r\n  geom_col() +\r\n  guides(fill = FALSE) +\r\n  theme_minimal() + theme_lyrics() +\r\n  labs(x = NULL, y = \u0026quot;Word Count\u0026quot;) +\r\n  ggtitle(\u0026quot;Sign O\u0026#39; The Times NRC Sentiment\u0026quot;) +\r\n  coord_flip()\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cimg src=\"http://res.cloudinary.com/dyd911kmh/image/upload/f_auto,q_auto:best/v1520597738/unnamed-chunk-24-1_g5p5wm.png\"/\u003e\u003c/p\u003e\r\n\u003cp\u003eAlthough once again highly subjective, your results appear to confirm that Prince \u0026quot;plays it cool and detached\u0026quot;, as stated by Partridge. This may be interpreted by the observation that \u003cem\u003eanticipation\u003c/em\u003e words are more prevalent than emotional categories such as \u003cem\u003esadness\u003c/em\u003e, \u003cem\u003efear\u003c/em\u003e, and \u003cem\u003eanger\u003c/em\u003e. \u003ca href=\"http://www.differencebetween.com/difference-between-emotion-and-vs-sentiment/\" target=\"_blank\"\u003eHere is an article\u003c/a\u003e that states these three categories are \u003cstrong\u003eemotions\u003c/strong\u003e whereas \u003cem\u003eanticipation\u003c/em\u003e is a \u003cstrong\u003esentiment\u003c/strong\u003e. The Billboard author also stated the song is simply a \u0026quot;status update, almost devoid of emotion\u0026quot;. It seems as that the \u003cem\u003emachine\u003c/em\u003e agrees. Do you interpret it this way as well? I know that this is an R tutorial, but sentiment analysis is not purely technical. It is said to be the place where \u003ca href=\"http://www.saaip.org/\" target=\"_blank\"\u003eAI meets psychology\u003c/a\u003e.\u003c/p\u003e\r\n\u003cp\u003eUsing \u003ccode\u003eggplot2\u003c/code\u003e to create a slightly different chart, look at the words for each category.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"lang-r\"\u003eprince_tidy %\u0026gt;%\r\n  filter(song %in% \u0026#39;sign o the times\u0026#39;) %\u0026gt;%\r\n  distinct(word) %\u0026gt;%\r\n  inner_join(get_sentiments(\u0026quot;nrc\u0026quot;)) %\u0026gt;%\r\n  ggplot(aes(x = word, fill = sentiment)) +\r\n  facet_grid(~sentiment) +\r\n  geom_bar() + #Create a bar for each word per sentiment\r\n  theme_lyrics() +\r\n  theme(panel.grid.major.x = element_blank(),\r\n        axis.text.x = element_blank()) + #Place the words on the y-axis\r\n  xlab(NULL) + ylab(NULL) +\r\n  ggtitle(\u0026quot;Sign O\u0026#39; The Times Sentiment Words\u0026quot;) +\r\n  coord_flip()\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cimg src=\"http://res.cloudinary.com/dyd911kmh/image/upload/f_auto,q_auto:best/v1520597738/unnamed-chunk-25-1_mfpm9v.png\"/\u003e\u003c/p\u003e\r\n\u003cp\u003eCan you match these words with the topics mentioned in the Billboard article? It\u0026#39;s pretty easy to see the connection:  Challenger disaster -\u0026gt; \u003cem\u003e\u0026quot;rocket\u0026quot;\u003c/em\u003e, AIDS -\u0026gt; \u003cem\u003e\u0026quot;disease\u0026quot;\u003c/em\u003e, Drugs -\u0026gt; \u003cem\u003e\u0026quot;crack\u0026quot;\u003c/em\u003e, Natural Disasters -\u0026gt; \u003cem\u003e\u0026quot;hurricane\u0026quot;\u003c/em\u003e, Gangs -\u0026gt; \u003cem\u003e\u0026quot;gang\u0026quot;\u003c/em\u003e, etc.\u003c/p\u003e\r\n\u003cp\u003eIt\u0026#39;s almost like Partridge wrote some R code and created this chart before writing the article!\u003c/p\u003e\r\n\u003ch3 id=\"more-songs\"\u003eMore Songs\u003c/h3\u003e\r\n\u003cp\u003eLook at the sentiment categories for a few more songs with distinctive titles and see if they appear to be correlated.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"lang-r\"\u003eprince_nrc_sub %\u0026gt;%\r\n  filter(song %in% c(\u0026quot;so blue\u0026quot;, \u0026quot;controversy\u0026quot;, \u0026quot;raspberry beret\u0026quot;,\r\n                     \u0026quot;when doves cry\u0026quot;, \u0026quot;the future\u0026quot;, \u0026quot;1999\u0026quot;)) %\u0026gt;%\r\n  count(song, sentiment, year) %\u0026gt;%\r\n  mutate(sentiment = reorder(sentiment, n), song = reorder(song, n)) %\u0026gt;%\r\n  ggplot(aes(sentiment, n, fill = sentiment)) +\r\n  geom_col() +\r\n  facet_wrap(year ~ song, scales = \u0026quot;free_x\u0026quot;, labeller = label_both) +\r\n  theme_lyrics() +\r\n  theme(panel.grid.major.x = element_blank(),\r\n        axis.text.x = element_blank()) +\r\n  labs(x = NULL, y = NULL) +\r\n  ggtitle(\u0026quot;NRC Sentiment Song Analysis\u0026quot;) +\r\n  coord_flip()\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cimg src=\"http://res.cloudinary.com/dyd911kmh/image/upload/f_auto,q_auto:best/v1520597739/unnamed-chunk-26-1_sbgdui.png\"/\u003e\u003c/p\u003e\r\n\u003cp\u003eNRC sentiments show high \u003cem\u003eanticipation\u003c/em\u003e and \u003cem\u003efear\u003c/em\u003e for a song about \u003cstrong\u003ethe future\u003c/strong\u003e, and the same thing plus high \u003cem\u003etrust\u003c/em\u003e for a song about \u003cstrong\u003econtroversy\u003c/strong\u003e. The songs that are prevalently \u003cem\u003esad\u003c/em\u003e seem to match their titles as well.\u003c/p\u003e\r\n\u003ch3 id=\"bigrams-per-decade\"\u003eBigrams Per Decade\u003c/h3\u003e\r\n\u003cp\u003eSo far you have only been looking at unigrams or single words. But if \u003cstrong\u003e\u0026quot;love\u0026quot;\u003c/strong\u003e is a common word, what precedes it? Or follows it? Looking at single words out of context could be misleading. So, now it\u0026#39;s time to look at some bigrams or word pairs.\u003c/p\u003e\r\n\u003cp\u003eConveniently, the \u003ccode\u003etidytext\u003c/code\u003e package provides the ability to unnest pairs of words as well as single words. In this case, you\u0026#39;ll call \u003ccode\u003eunnest_tokens()\u003c/code\u003e passing the \u003ccode\u003etoken\u003c/code\u003e argument \u003cem\u003engrams\u003c/em\u003e. Since you\u0026#39;re just looking at bigrams (two consecutive words), pass \u003ccode\u003en = 2\u003c/code\u003e. Use \u003ccode\u003eprince_bigrams\u003c/code\u003e to store the results.\u003c/p\u003e\r\n\u003cp\u003eThe \u003ccode\u003etidyr\u003c/code\u003e package provides the ability to separate the bigrams into individual words using the \u003ccode\u003eseparate()\u003c/code\u003e function. In order to remove the stop words and undesirable words, you\u0026#39;ll want to break the bigrams apart and filter out what you don\u0026#39;t want, then use \u003ccode\u003eunite()\u003c/code\u003e to put the word pairs back together. This makes it easy to visualize the most common bigrams per decade. (See \u003ca href=\"https://www.datacamp.com/community/tutorials/R-nlp-machine-learning\" target=\"_blank\"\u003ePart One\u003c/a\u003e for an explanation of \u003ccode\u003eslice()\u003c/code\u003e and \u003ccode\u003erow_number()\u003c/code\u003e)\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"lang-r\"\u003eprince_bigrams \u0026lt;- prince_data %\u0026gt;%\r\n  unnest_tokens(bigram, lyrics, token = \u0026quot;ngrams\u0026quot;, n = 2)\r\n\r\nbigrams_separated \u0026lt;- prince_bigrams %\u0026gt;%\r\n  separate(bigram, c(\u0026quot;word1\u0026quot;, \u0026quot;word2\u0026quot;), sep = \u0026quot; \u0026quot;)\r\n\r\nbigrams_filtered \u0026lt;- bigrams_separated %\u0026gt;%\r\n  filter(!word1 %in% stop_words$word) %\u0026gt;%\r\n  filter(!word2 %in% stop_words$word) %\u0026gt;%\r\n  filter(!word1 %in% undesirable_words) %\u0026gt;%\r\n  filter(!word2 %in% undesirable_words)\r\n\r\n#Because there is so much repetition in music, also filter out the cases where the two words are the same\r\nbigram_decade \u0026lt;- bigrams_filtered %\u0026gt;%\r\n  filter(word1 != word2) %\u0026gt;%\r\n  filter(decade != \u0026quot;NA\u0026quot;) %\u0026gt;%\r\n  unite(bigram, word1, word2, sep = \u0026quot; \u0026quot;) %\u0026gt;%\r\n  inner_join(prince_data) %\u0026gt;%\r\n  count(bigram, decade, sort = TRUE) %\u0026gt;%\r\n  group_by(decade) %\u0026gt;%\r\n  slice(seq_len(7)) %\u0026gt;%\r\n  ungroup() %\u0026gt;%\r\n  arrange(decade, n) %\u0026gt;%\r\n  mutate(row = row_number())\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cpre\u003e\u003ccode\u003e## Joining, by = c(\u0026quot;song\u0026quot;, \u0026quot;year\u0026quot;, \u0026quot;album\u0026quot;, \u0026quot;peak\u0026quot;, \u0026quot;us_pop\u0026quot;, \u0026quot;us_rnb\u0026quot;, \u0026quot;decade\u0026quot;, \u0026quot;chart_level\u0026quot;, \u0026quot;charted\u0026quot;)\r\n\u003c/code\u003e\u003c/pre\u003e\u003cpre\u003e\u003ccode class=\"lang-r\"\u003ebigram_decade %\u0026gt;%\r\n  ggplot(aes(row, n, fill = decade)) +\r\n  geom_col(show.legend = FALSE) +\r\n  facet_wrap(~decade, scales = \u0026quot;free_y\u0026quot;) +\r\n  xlab(NULL) + ylab(NULL) +\r\n  scale_x_continuous(  # This handles replacement of row\r\n      breaks = bigram_decade$row, # Notice need to reuse data frame\r\n      labels = bigram_decade$bigram) +\r\n  theme_lyrics() +\r\n  theme(panel.grid.major.x = element_blank()) +\r\n  ggtitle(\u0026quot;Bigrams Per Decade\u0026quot;) +\r\n  coord_flip()\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cimg src=\"http://res.cloudinary.com/dyd911kmh/image/upload/f_auto,q_auto:best/v1520597739/unnamed-chunk-27-1_veaovt.png\"/\u003e\u003c/p\u003e\r\n\u003cp\u003eUsing bigrams, you can almost see the common phrases shift from sex, dance and romance to religion and (rainbow) children. In case you didn\u0026#39;t know, the term \u0026quot;rainbow baby\u0026quot; is sometimes used by parents who are expecting another child after losing a baby to miscarriage. Interestingly, I could not find a real review of Prince\u0026#39;s Rainbow Children album that made note of this.  \u003c/p\u003e\r\n\u003ch3 id=\"sentiment-with-bigrams\"\u003eSentiment with Bigrams\u003c/h3\u003e\r\n\u003cp\u003eSo how do bigrams affect sentiment? This time use the AFINN lexicon to perform sentiment analysis on word pairs, looking at how often sentiment-associated words are preceded by \u003cem\u003e\u0026quot;not\u0026quot;\u003c/em\u003e or other negating words.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"lang-r\"\u003eAFINN \u0026lt;- get_sentiments(\u0026quot;afinn\u0026quot;)\r\n\r\nnot_words \u0026lt;- bigrams_separated %\u0026gt;%\r\n  filter(word1 == \u0026quot;not\u0026quot;) %\u0026gt;%\r\n  inner_join(AFINN, by = c(word2 = \u0026quot;word\u0026quot;)) %\u0026gt;%\r\n  count(word2, score, sort = TRUE) %\u0026gt;%\r\n  ungroup()\r\n\r\nnot_words %\u0026gt;%\r\n  mutate(contribution = n * score) %\u0026gt;%\r\n  arrange(desc(abs(contribution))) %\u0026gt;%\r\n  head(20) %\u0026gt;%\r\n  mutate(word2 = reorder(word2, contribution)) %\u0026gt;%\r\n  ggplot(aes(word2, n * score, fill = n * score \u0026gt; 0)) +\r\n  geom_col(show.legend = FALSE) +\r\n  theme_lyrics() +\r\n  xlab(\u0026quot;Words preceded by \\\u0026quot;not\\\u0026quot;\u0026quot;) +\r\n  ylab(\u0026quot;Sentiment score * Number of Occurrences\u0026quot;) +\r\n  ggtitle(\u0026quot;Polar Sentiment of Words Preceded by Not\u0026quot;) +\r\n  coord_flip()\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cimg src=\"http://res.cloudinary.com/dyd911kmh/image/upload/f_auto,q_auto:best/v1520597739/unnamed-chunk-28-1_yk59tk.png\"/\u003e\u003c/p\u003e\r\n\u003cp\u003eOn the first line of the graph, \u003cstrong\u003ecare\u003c/strong\u003e is given a \u003cem\u003efalse positive\u003c/em\u003e sentiment because the \u003cstrong\u003e\u0026quot;not\u0026quot;\u003c/strong\u003e is ignored with single-word analysis. Do the false positive bigrams cancel out the false negative bigrams?\u003c/p\u003e\r\n\u003cp\u003eYet another question that I can\u0026#39;t answer, but it\u0026#39;s a good topic for further exploration. \u003cstrong\u003eTip\u003c/strong\u003e: you can also pass the parameters of \u0026quot;trigrams\u0026quot; and \u0026quot;n = 3\u0026quot; to \u003ccode\u003eunnest_tokens()\u003c/code\u003e to look at even more consecutive words!\u003c/p\u003e\r\n\u003cp\u003eThere are other negation words to consider as well. This time you will create a network graph using the \u003ccode\u003eggraph\u003c/code\u003e and \u003ccode\u003eigraph\u003c/code\u003e packages. You\u0026#39;ll arrange the words into connected nodes with the negation words at the centers. Create the first object from the tidy dataset using \u003ccode\u003egraph_from_data_frame()\u003c/code\u003e and then use \u003ccode\u003eggraph()\u003c/code\u003e to plot it. You can highlight the main nodes with a call to \u003ccode\u003egeom_edge_density()\u003c/code\u003e. You can get more details of a similar example in Julia Silge and David Robinson\u0026#39;s book on \u003ca href=\"https://www.tidytextmining.com/\" target=\"_blank\"\u003eTidy Text Mining\u003c/a\u003e.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"lang-r\"\u003enegation_words \u0026lt;- c(\u0026quot;not\u0026quot;, \u0026quot;no\u0026quot;, \u0026quot;never\u0026quot;, \u0026quot;without\u0026quot;)\r\n\r\nnegation_bigrams \u0026lt;- bigrams_separated %\u0026gt;%\r\n  filter(word1 %in% negation_words) %\u0026gt;%\r\n  inner_join(AFINN, by = c(word2 = \u0026quot;word\u0026quot;)) %\u0026gt;%\r\n  count(word1, word2, score, sort = TRUE) %\u0026gt;%\r\n  mutate(contribution = n * score) %\u0026gt;%\r\n  arrange(desc(abs(contribution))) %\u0026gt;%\r\n  group_by(word1) %\u0026gt;%\r\n  slice(seq_len(20)) %\u0026gt;%\r\n  arrange(word1,desc(contribution)) %\u0026gt;%\r\n  ungroup()\r\n\r\nbigram_graph \u0026lt;- negation_bigrams %\u0026gt;%\r\n  graph_from_data_frame() #From `igraph`\r\n\r\nset.seed(123)\r\n\r\na \u0026lt;- grid::arrow(type = \u0026quot;closed\u0026quot;, length = unit(.15, \u0026quot;inches\u0026quot;))\r\n\r\nggraph(bigram_graph, layout = \u0026quot;fr\u0026quot;) +\r\n  geom_edge_link(alpha = .25) +\r\n  geom_edge_density(aes(fill = score)) +\r\n  geom_node_point(color = \u0026quot;purple1\u0026quot;, size = 1) + #Purple for Prince!\r\n  geom_node_text(aes(label = name),  repel = TRUE) +\r\n  theme_void() + theme(legend.position = \u0026quot;none\u0026quot;,\r\n                       plot.title = element_text(hjust = 0.5)) +\r\n  ggtitle(\u0026quot;Negation Bigram Network\u0026quot;)\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cimg src=\"http://res.cloudinary.com/dyd911kmh/image/upload/f_auto,q_auto:best/v1520597740/unnamed-chunk-29-1_wtzaho.png\"/\u003e\u003c/p\u003e\r\n\u003cp\u003eHere, you can see the word pairs associated with negation words. So if your analysis is based on unigrams and \u003cem\u003e\u0026quot;alone\u0026quot;\u003c/em\u003e comes back as negative, the bigram \u003cem\u003e\u0026quot;not alone\u0026quot;\u003c/em\u003e as you see above will have a reverse effect. Some words cross over to multiple nodes which can be seen easily in a visual like this one: for example, \u003cem\u003e\u0026quot;never hurt\u0026quot;\u003c/em\u003e and \u003cem\u003e\u0026quot;not hurt\u0026quot;\u003c/em\u003e.\u003c/p\u003e\r\n\u003ch3 id=\"pairwise-comparisons\"\u003ePairwise Comparisons\u003c/h3\u003e\r\n\u003cp\u003eSince you\u0026#39;ve now looked at n-grams, take a look at the \u003cem\u003ecorrelation\u003c/em\u003e between words. Which words are most highly correlated? Use the \u003ccode\u003epairwise_count()\u003c/code\u003e function from the \u003ccode\u003ewidyr\u003c/code\u003e package to identify co-occurrence counts. That is, you count the number of times each pair of words appear together within a song. The \u003ccode\u003ewidyr\u003c/code\u003e package takes a tidy dataset, and \u003cstrong\u003etemporarily\u003c/strong\u003e widens it before returning it to a tidy structure for visualization and further analysis.\u003c/p\u003e\r\n\u003cp\u003eTo keep it simple, I\u0026#39;ve chosen four interesting words in Prince\u0026#39;s lyrics.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"lang-r\"\u003epwc \u0026lt;- prince_tidy %\u0026gt;%\r\n  filter(n() \u0026gt;= 20) %\u0026gt;%  #High counts\r\n  pairwise_count(word, song, sort = TRUE) %\u0026gt;%\r\n  filter(item1 %in% c(\u0026quot;love\u0026quot;, \u0026quot;peace\u0026quot;, \u0026quot;gangster\u0026quot;, \u0026quot;hate\u0026quot;)) %\u0026gt;%\r\n  group_by(item1) %\u0026gt;%\r\n  slice(seq_len(7)) %\u0026gt;%\r\n  ungroup() %\u0026gt;%\r\n  mutate(row = -row_number()) #Descending order\r\n\r\npwc %\u0026gt;%\r\n  ggplot(aes(row, n, fill = item1)) +\r\n  geom_bar(stat = \u0026quot;identity\u0026quot;, show.legend = FALSE) +\r\n  facet_wrap(~item1, scales = \u0026quot;free\u0026quot;) +\r\n  scale_x_continuous(  #This handles replacement of row\r\n      breaks = pwc$row, #Notice need to reuse data frame\r\n      labels = pwc$item2) +\r\n  theme_lyrics() + theme(panel.grid.major.x = element_blank()) +\r\n  xlab(NULL) + ylab(NULL) +\r\n  ggtitle(\u0026quot;Pairwise Counts\u0026quot;) +\r\n  coord_flip()\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cimg src=\"http://res.cloudinary.com/dyd911kmh/image/upload/f_auto,q_auto:best/v1520597739/unnamed-chunk-30-1_vvkgi2.png\"/\u003e\u003c/p\u003e\r\n\u003cp\u003eCompare that to pairwise \u003cem\u003ecorrelation\u003c/em\u003e. This refers to how often words appear together relative to how often they appear separately. Use \u003ccode\u003epairwise_cor()\u003c/code\u003e to determine the correlation between words based on how often they appear in the same song.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"lang-r\"\u003eprince_tidy %\u0026gt;%\r\n  group_by(word) %\u0026gt;%\r\n  filter(n() \u0026gt;= 20) %\u0026gt;%\r\n  pairwise_cor(word, song, sort = TRUE) %\u0026gt;%\r\n  filter(item1 %in% c(\u0026quot;love\u0026quot;, \u0026quot;peace\u0026quot;, \u0026quot;gangster\u0026quot;, \u0026quot;hate\u0026quot;)) %\u0026gt;%\r\n  group_by(item1) %\u0026gt;%\r\n  top_n(7) %\u0026gt;%\r\n  ungroup() %\u0026gt;%\r\n  mutate(item2 = reorder(item2, correlation)) %\u0026gt;%\r\n  ggplot(aes(item2, correlation, fill = item1)) +\r\n  geom_bar(stat = \u0026#39;identity\u0026#39;, show.legend = FALSE) +\r\n  facet_wrap(~item1, scales = \u0026#39;free\u0026#39;) +\r\n  theme_lyrics() + theme(panel.grid.major.x = element_blank()) +\r\n  xlab(NULL) + ylab(NULL) +\r\n  ggtitle(\u0026quot;Pairwise Correlation\u0026quot;) +\r\n  coord_flip()\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cimg src=\"http://res.cloudinary.com/dyd911kmh/image/upload/f_auto,q_auto:best/v1520597740/unnamed-chunk-31-1_tdlbao.png\"/\u003e\u003c/p\u003e\r\n\u003cp\u003eI think these are fascinating insights into the lyrics, just based on these four words alone! Looking at these results you can begin to see some themes emerge. This provides a great segue into the next tutorial on Topic Modeling!\u003c/p\u003e\r\n\u003ch2 id=\"conclusion\"\u003eConclusion\u003c/h2\u003e\r\n\u003cp\u003eIn this tutorial, you created a tidy dataset and analyzed basic information such as the lexical diversity and song counts per release year, and you examined the relationship between release decade and whether a song hit the charts. You then explored some sentiment lexicons and how well they matched the lyrics. Next, you performed sentiment analysis on all songs in the dataset, sentiment over time, song level sentiment, and the impact of bigrams. You did this using a wide variety of interesting graphs, each giving a different perspective.\u003c/p\u003e\r\n\u003cp\u003eSo is it possible to write a program to determine mood in lyrics? Why yes, it is! How reliable are your results? It depends on a wide range of criteria such as the amount of data preparation, the choice of lexicon, the method of analysis, the quality of the source data, and so on. Comparing real life events, both personal and societal, can illuminate the mood of any lyric. Prince\u0026#39;s polar sentiment seemed to slightly decline over time, yet overall, \u003cem\u003ejoy\u003c/em\u003e does seem to stand out. Charted songs seem to be more positive than uncharted songs. The claims of predicting 9/11 and his own death seem to eerily match his words.\u003c/p\u003e\r\n\u003cp\u003eBut lyrics are complex and too many assumptions can cause problems. If you take what you\u0026#39;ve learned about the lyrics into the next tutorial, Part Two-B on Topic Modeling, you will be well on your way to digging out themes and motifs. How much NLP can be performed on lyrics which appear without punctuation or sentence structure? What was Prince really singing about? Now that you understand the mood, you\u0026#39;re more prepared to investigate the possible topics. And finally, can you apply machine learning techniques to predict the decade or chart level of a song? Join me in the next few tutorials to find out!  \u003c/p\u003e\r\n\u003cp\u003eI hope you\u0026#39;ve enjoyed the journey so far. In Part Two-B we\u0026#39;re going to party like it\u0026#39;s 1999!\u003c/p\u003e\r\n","contentUrl":"https://www.datacamp.com/community/tutorials/sentiment-analysis-R","userContentUrl":null,"illustrationUrl":null,"seoTitle":"Tidy Sentiment Analysis in R","seoMetaDescription":"Learn how to perform tidy sentiment analysis in R on Prince's songs, sentiment over time, song level sentiment, the impact of bigrams, and much more!","seoKeyword":"sentiment analysis R","mustRead":true,"programmingLanguage":null,"submissionDate":"2018-03-09T13:45:50.851Z","publishDate":"2018-03-29T10:00:00.000Z","episode":null,"isLatest":null,"externalUrl":null,"transcriptUrl":null,"guests":[],"links":null,"isSpam":false,"xp":0,"flaggingUsers":[],"isDisabled":false,"connectedInternalContentId":10101,"createdAt":"2018-03-09T13:45:50.835Z","updatedAt":"2018-06-04T06:00:49.640Z","upvoting":{"voteCount":98,"voted":false},"tags":["fun","nlp","case study","r programming"],"author":{"id":713170,"slug":"debbieliskefa5156febfc047aeb79dee6c802d3d04","avatarUrlSquare":"https://assets.datacamp.com/users/avatars/000/713/170/square/debprofile.jpg?1517605205","fullName":"Debbie Liske","nameFromEmail":"debbieliske","isAdmin":false},"recommendedArticles":[]},"isFetched":true,"isFetching":false,"statusMessage":""},"countdownBanner":{"banner":{"showBanner":false,"title":"","text":"","startDate":"","endDate":"","link":"","nonPromo":false},"isBannerOpen":false},"form":{},"list":{"isFetched":false,"isFetching":false,"statusMessage":""},"menu":{"isSidebarMenuOpen":false},"notifications":{"isFetched":false,"isFetching":false,"isReadFetched":false,"isReadFetching":false,"statusMessage":"","readStatusMessage":"","Notifications":[],"NotificationsTotal":0,"unReadCount":0},"preview":{"isFetching":false,"isFetched":false,"statusMessage":"","content":{}},"recommendCS":{"isPosting":false,"isPosted":false,"statusMessage":"","isModalOpen":false,"currentStep":"form"},"spam":{"isFlagging":false,"isSucceeded":false,"statusMessage":"","isSpamModalOpen":false,"isUnSpamModalOpen":false},"tag":{"isRequesting":false,"isSucceeded":false,"statusMessage":"","isDeleteTagModalOpen":false},"tagList":{"isFetched":false,"isFetching":false,"statusMessage":"","list":[],"total":0},"tagSearch":{"isFetching":false,"isFetched":false,"statusMessage":"","content":{}},"user":{"isFetching":false,"isFetched":false,"statusMessage":"","unBan":{"isUnBanning":false,"isSucceeded":false,"statusMessage":"","isUnBanUserModalOpen":false},"ban":{"isBanning":false,"isSucceeded":false,"statusMessage":"","isBanUserModalOpen":false}},"submitArticle":{"isPosting":false,"isPosted":false,"statusMessage":"","timer":0,"articleSlug":"","isModalOpen":false,"currentStep":"form","slug":"","externalUrl":""},"rss":{"isCreating":false,"isSucceeded":false,"statusMessage":""},"rssFeedList":{"isFetched":false,"isFetching":false,"statusMessage":"","list":[],"disconnectModal":{"isFetched":true,"isFetching":false,"isOpen":false,"rssFeedIdToDisconnect":null,"statusMessage":""}},"setAsHomePage":{"isSetAsHomePageModalOpen":false},"analytics":{}},"initialProps":{"asPath":"/community/tutorials/sentiment-analysis-R"}},"pathname":"/community/tutorial","query":{"slug":"sentiment-analysis-R"},"buildId":"5d9bc8f5-f0ca-4355-86d0-a48a793ca92f","buildStats":{"app.js":{"hash":"a173c06dd865e57fcaacdeeaaa4ca63b"}},"assetPrefix":"/community","nextExport":false,"err":null,"chunks":[]}
          module={}
          __NEXT_LOADED_PAGES__ = []
          __NEXT_LOADED_CHUNKS__ = []

          __NEXT_REGISTER_PAGE = function (route, fn) {
            __NEXT_LOADED_PAGES__.push({ route: route, fn: fn })
          }

          __NEXT_REGISTER_CHUNK = function (chunkName, fn) {
            __NEXT_LOADED_CHUNKS__.push({ chunkName: chunkName, fn: fn })
          }
        </script><script async="" id="__NEXT_PAGE__/community/tutorial" type="text/javascript" src="/community/_next/5d9bc8f5-f0ca-4355-86d0-a48a793ca92f/page/community/tutorial.js"></script><script async="" id="__NEXT_PAGE__/_error" type="text/javascript" src="/community/_next/5d9bc8f5-f0ca-4355-86d0-a48a793ca92f/page/_error.js"></script><script type="text/javascript" src="/community/_next/a173c06dd865e57fcaacdeeaaa4ca63b/app.js" async=""></script>
</body>
</html>
